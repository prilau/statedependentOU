for (i in 1:length(simmaps)){
for (j in 1:length(tip_edges)){
num_states <- length(simmaps[[i]]$maps[[tip_edges[j]]])
state <- names(simmaps[[i]]$maps[[tip_edges[j]]][num_states])
state_count[j] <- state_count[j] + as.numeric(state)
}
}
state_count_per_tip[count,] <- list(state_count)
state_count_per_tree <- append(state_count_per_tree, sum(state_count)/(length(simmaps)))
count = count + 1
}
count = 1
for (path in input_paths){
simmaps <- read.simmap(path, format="phylip")
state_count <- rep(0,6)
for (i in 1:length(simmaps)){
for (j in 1:length(tip_edges)){
num_states <- length(simmaps[[i]]$maps[[tip_edges[j]]])
state <- names(simmaps[[i]]$maps[[tip_edges[j]]][num_states])
state_count[j] <- state_count[j] + as.numeric(state)
}
}
state_count_per_tip[count,] <- as.list(state_count)
state_count_per_tree <- append(state_count_per_tree, sum(state_count)/(length(simmaps)))
count = count + 1
}
state_count_per_tip
state_count_per_tree
state_count_per_tip <- tibble(t1 = 0, t2 = 0, t3 = 0, t4 = 0, t5 = 0, t6 = 0)
state_count_per_tree <- c()
count = 1
for (path in input_paths){
simmaps <- read.simmap(path, format="phylip")
state_count <- rep(0,6)
for (i in 1:length(simmaps)){
for (j in 1:length(tip_edges)){
num_states <- length(simmaps[[i]]$maps[[tip_edges[j]]])
state <- names(simmaps[[i]]$maps[[tip_edges[j]]][num_states])
state_count[j] <- state_count[j] + as.numeric(state)
}
}
state_count_per_tip[count,] <- as.list(state_count/(length(simmaps)))
state_count_per_tree <- append(state_count_per_tree, sum(state_count)/(length(simmaps)))
count = count + 1
}
state_count_per_tip
mean(state_count_per_tip)
mean(state_count_per_tip[1,])
mean(state_count)
mean(state_count/101)
state_count_per_tip
state_count_per_tip
state_count_per_tree
mean(state_count_per_tree)
mean(state_count_per_tree) / 6
hist(state_count_per_tip$t1)
state_count_per_tip$t1
hist(state_count_per_tree)
dir_in = "output/3_empirical/aug_tipMissingDiscrete/"
for (file in list.files(dir_in)){
path = paste0(dir_in, file)
log <- read_tsv(path)
log <- as.data.frame(log$char_hist)
write_tsv(log, file=path, col_names = FALSE)
}
?read_tsv
# validate each tip expected sample state equally
# validate each tree expected sample state == 3
input_paths <- paste0(dir_in, list.files(dir_in))
input_paths
tip_edges <- c(which.edge(simmaps[[1]], "t1"),
which.edge(simmaps[[1]], "t2"),
which.edge(simmaps[[1]], "t3"),
which.edge(simmaps[[1]], "t4"),
which.edge(simmaps[[1]], "t5"),
which.edge(simmaps[[1]], "t6"))
state_count_per_tip <- tibble(t1 = 0, t2 = 0, t3 = 0, t4 = 0, t5 = 0, t6 = 0)
state_count_per_tree <- c()
count = 1
bar = txtProgressBar(style=3, width=40)
count = 1
state_count_per_tip <- tibble(t1 = 0, t2 = 0, t3 = 0, t4 = 0, t5 = 0, t6 = 0)
state_count_per_tree <- c()
count = 1
bar = txtProgressBar(style=3, width=40)
for (path in input_paths){
simmaps <- read.simmap(path, format="phylip")
state_count <- rep(0,6)
for (i in 1:length(simmaps)){
for (j in 1:length(tip_edges)){
num_states <- length(simmaps[[i]]$maps[[tip_edges[j]]])
state <- names(simmaps[[i]]$maps[[tip_edges[j]]][num_states])
state_count[j] <- state_count[j] + as.numeric(state)
}
}
state_count_per_tip[count,] <- as.list(state_count/(length(simmaps)))
state_count_per_tree <- append(state_count_per_tree, sum(state_count)/(length(simmaps)))
count = count + 1
setTxtProgressBar(bar, (count-1) / length(input_paths))
}
?read.simmap
path
read.simmap(path, format="phylip", verbose=FASLE)
read.simmap(path, format="phylip", verbose=FALSE)
hist(state_count_per_tip$t1)
ggplot(state_count_per_tip) +
geom_histogram(x=t1)
ggplot() +
geom_histogram(state_count_per_tip$t1)
ggplot() +
geom_histogram(aes(x=state_count_per_tip$t1))
ggplot(state_count_per_tip) +
geom_histogram(aes(x=t1))
ggplot(state_count_per_tip) +
geom_histogram(aes(x=t1, color="red")) +
geom_histogram(aes(x=t2)) +
geom_histogram(aes(x=t3)) +
geom_histogram(aes(x=t4)) +
geom_histogram(aes(x=t5)) +
geom_histogram(aes(x=t6)) +
hist(state_count_per_tip$t1)
ggplot(state_count_per_tip) +
geom_histogram(aes(x=t1, color="red")) +
geom_histogram(aes(x=t2)) +
geom_histogram(aes(x=t3)) +
geom_histogram(aes(x=t4)) +
geom_histogram(aes(x=t5)) +
geom_histogram(aes(x=t6))
ggplot(state_count_per_tip) +
geom_histogram(aes(x=t1, fill="red")) +
geom_histogram(aes(x=t2)) +
geom_histogram(aes(x=t3)) +
geom_histogram(aes(x=t4)) +
geom_histogram(aes(x=t5)) +
geom_histogram(aes(x=t6))
ggplot(state_count_per_tip) +
geom_histogram(aes(x=t1, fill="red", alpha=0.5)) +
geom_histogram(aes(x=t2)) +
geom_histogram(aes(x=t3)) +
geom_histogram(aes(x=t4)) +
geom_histogram(aes(x=t5)) +
geom_histogram(aes(x=t6))
ggplot(state_count_per_tip) +
geom_histogram(aes(x=t1, fill='#EE7733', alpha=0.5)) +
geom_histogram(aes(x=t2, fill='#0077BB', alpha=0.5)) +
geom_histogram(aes(x=t3, fill='#33BBEE', alpha=0.5)) +
geom_histogram(aes(x=t4, fill='#EE3377', alpha=0.5)) +
geom_histogram(aes(x=t5, fill='#CC3311', alpha=0.5)) +
geom_histogram(aes(x=t6, fill='#009988', alpha=0.5))
ggplot(state_count_per_tip) +
geom_histogram(aes(x=t1, fill='#EE7733', alpha=0.5)) +
geom_histogram(aes(x=t2, fill='#0077BB', alpha=0.5)) +
geom_histogram(aes(x=t3, fill='#33BBEE', alpha=0.5)) +
geom_histogram(aes(x=t4, fill='#EE3377', alpha=0.5)) +
geom_histogram(aes(x=t5, fill='#CC3311', alpha=0.5)) +
geom_histogram(aes(x=t6, fill='#009988', alpha=0.5)) +
scale_fill_manual(labels=c("t1", "t2", "t3", "t4", "t5", "t6"))
ggplot(state_count_per_tip) +
geom_histogram(aes(x=t1, alpha=0.5)) +
geom_histogram(aes(x=t2, alpha=0.5)) +
geom_histogram(aes(x=t3, alpha=0.5)) +
geom_histogram(aes(x=t4, alpha=0.5)) +
geom_histogram(aes(x=t5, alpha=0.5)) +
geom_histogram(aes(x=t6, alpha=0.5)) +
scale_fill_manual(c('#EE7733', '#0077BB', '#33BBEE', '#EE3377', '#CC3311', '#009988'), labels=c("t1", "t2", "t3", "t4", "t5", "t6"))
ggplot(state_count_per_tip) +
geom_histogram(aes(x=t1, fill='#EE7733', alpha=0.5)) +
geom_histogram(aes(x=t2, fill='#0077BB', alpha=0.5)) +
geom_histogram(aes(x=t3, fill='#33BBEE', alpha=0.5)) +
geom_histogram(aes(x=t4, fill='#EE3377', alpha=0.5)) +
geom_histogram(aes(x=t5, fill='#CC3311', alpha=0.5)) +
geom_histogram(aes(x=t6, fill='#009988', alpha=0.5))
ggplot(state_count_per_tree) +
geom_histogram(aes(x=state_count_per_tree))
state_count_per_tree
ggplot(state_count_per_tree) +
geom_histogram()
ggplot(as.data.frame(state_count_per_tree)) +
geom_histogram()
ggplot(as.data.frame(state_count_per_tree)) +
geom_histogram(aes(x=state_count_per_tree))
ggplot(state_count_per_tip) +
geom_histogram(aes(x=t1, fill='#EE7733', alpha=0.5)) +
geom_histogram(aes(x=t2, fill='#0077BB', alpha=0.5)) +
geom_histogram(aes(x=t3, fill='#33BBEE', alpha=0.5)) +
geom_histogram(aes(x=t4, fill='#EE3377', alpha=0.5)) +
geom_histogram(aes(x=t5, fill='#CC3311', alpha=0.5)) +
geom_histogram(aes(x=t6, fill='#009988', alpha=0.5))
ggplot(state_count_per_tip) +
geom_histogram(aes(x=t1, fill='#EE7733', alpha=0.5)) +
vline(x=mean(t1))
ggplot(state_count_per_tip) +
geom_histogram(aes(x=t1, fill='#EE7733', alpha=0.5)) +
geom_vline(x=mean(t1))
ggplot(state_count_per_tip) +
geom_histogram(aes(x=t1, fill='#EE7733', alpha=0.5)) +
geom_vline(x=mean())
ggplot(state_count_per_tip) +
geom_histogram(aes(x=t1, fill='#EE7733', alpha=0.5))
ggplot(state_count_per_tip) +
geom_histogram(aes(x=t1, fill='#EE7733', alpha=0.5)) +
geom_vline(x=mean(state_count_per_tip$t1))
ggplot(state_count_per_tip) +
geom_histogram(aes(x=t1, fill='#EE7733', alpha=0.5)) +
geom_vline(mean(t1))
ggplot(state_count_per_tip) +
geom_vline(mean(t1))
mean(state_count_per_tip$t1)
mean(state_count_per_tip$t2)
mean(state_count_per_tip$t3)
mean(state_count_per_tip$t4)
mean(state_count_per_tip$t5)
mean(state_count_per_tip$t6)
mean(state_count_per_tip$t7)
ggplot(as.data.frame(state_count_per_tree)) +
geom_histogram(aes(x=state_count_per_tree))
ggplot(state_count_per_tip) +
geom_histogram(aes(x=t1, fill='#EE7733', alpha=0.5))
plot(simmaps[[1]])
tree <- read.tree("data/3_empirical/dummy_r6.tre")
index_to_rev <- matchNodes(tree)
dir_in = "output/3_empirical/aug_tipMissingDiscrete/"
for (file in list.files(dir_in)){
path = paste0(dir_in, file)
log <- read_tsv(path, show_col_types = FALSE)
log <- as.data.frame(log$char_hist)
write_tsv(log, file=path, col_names = FALSE)
}
# validate each tip expected sample state equally
# validate each tree expected sample state == 3
input_paths <- paste0(dir_in, list.files(dir_in))
tip_edges <- c(which.edge(simmaps[[1]], "t1"),
which.edge(simmaps[[1]], "t2"),
which.edge(simmaps[[1]], "t3"),
which.edge(simmaps[[1]], "t4"),
which.edge(simmaps[[1]], "t5"),
which.edge(simmaps[[1]], "t6"))
state_count_per_tip <- tibble(t1 = 0, t2 = 0, t3 = 0, t4 = 0, t5 = 0, t6 = 0)
state_count_per_tree <- c()
count = 1
bar = txtProgressBar(style=3, width=40)
for (path in input_paths){
simmaps <- read.simmap(path, format="phylip")
state_count <- rep(0,6)
for (i in 1:length(simmaps)){
for (j in 1:length(tip_edges)){
num_states <- length(simmaps[[i]]$maps[[tip_edges[j]]])
state <- names(simmaps[[i]]$maps[[tip_edges[j]]][num_states])
state_count[j] <- state_count[j] + as.numeric(state)
}
}
state_count_per_tip[count,] <- as.list(state_count/(length(simmaps)))
state_count_per_tree <- append(state_count_per_tree, sum(state_count)/(length(simmaps)))
count = count + 1
setTxtProgressBar(bar, (count-1) / length(input_paths))
}
ggplot(state_count_per_tip) +
geom_histogram(aes(x=t1, fill='#EE7733', alpha=0.5)) +
geom_histogram(aes(x=t2, fill='#0077BB', alpha=0.5)) +
geom_histogram(aes(x=t3, fill='#33BBEE', alpha=0.5)) +
geom_histogram(aes(x=t4, fill='#EE3377', alpha=0.5)) +
geom_histogram(aes(x=t5, fill='#CC3311', alpha=0.5)) +
geom_histogram(aes(x=t6, fill='#009988', alpha=0.5))
ggplot(state_count_per_tip) +
geom_histogram(aes(x=t1, fill='#EE7733', alpha=0.5)) +
#geom_histogram(aes(x=t2, fill='#0077BB', alpha=0.5)) +
geom_histogram(aes(x=t3, fill='#33BBEE', alpha=0.5)) +
geom_histogram(aes(x=t4, fill='#EE3377', alpha=0.5)) +
geom_histogram(aes(x=t5, fill='#CC3311', alpha=0.5)) +
geom_histogram(aes(x=t6, fill='#009988', alpha=0.5))
ggplot(state_count_per_tip) +
geom_histogram(aes(x=t1, fill='#EE7733', alpha=0.5)) +
#geom_histogram(aes(x=t2, fill='#0077BB', alpha=0.5)) +
geom_histogram(aes(x=t3, fill='#33BBEE', alpha=0.5)) +
#geom_histogram(aes(x=t4, fill='#EE3377', alpha=0.5)) +
geom_histogram(aes(x=t5, fill='#CC3311', alpha=0.5)) +
geom_histogram(aes(x=t6, fill='#009988', alpha=0.5))
ggplot(state_count_per_tip) +
geom_histogram(aes(x=t1, fill='#EE7733', alpha=0.5)) +
#geom_histogram(aes(x=t2, fill='#0077BB', alpha=0.5)) +
geom_histogram(aes(x=t3, fill='#33BBEE', alpha=0.5)) +
#geom_histogram(aes(x=t4, fill='#EE3377', alpha=0.5)) +
geom_histogram(aes(x=t5, fill='#CC3311', alpha=0.5)) +
#geom_histogram(aes(x=t6, fill='#009988', alpha=0.5))
ggplot(as.data.frame(state_count_per_tree)) +
geom_histogram(aes(x=state_count_per_tree))
ggplot(state_count_per_tip) +
geom_histogram(aes(x=t1, fill='#EE7733', alpha=0.5)) +
#geom_histogram(aes(x=t2, fill='#0077BB', alpha=0.5)) +
geom_histogram(aes(x=t3, fill='#33BBEE', alpha=0.5)) +
#geom_histogram(aes(x=t4, fill='#EE3377', alpha=0.5)) +
geom_histogram(aes(x=t5, fill='#CC3311', alpha=0.5)) +
#geom_histogram(aes(x=t6, fill='#009988', alpha=0.5))
ggplot(as.data.frame(state_count_per_tree)) +
geom_histogram(aes(x=state_count_per_tree))
ggplot(state_count_per_tip) +
geom_histogram(aes(x=t1, fill='#EE7733', alpha=0.5)) +
#geom_histogram(aes(x=t2, fill='#0077BB', alpha=0.5)) +
geom_histogram(aes(x=t3, fill='#33BBEE', alpha=0.5)) +
#geom_histogram(aes(x=t4, fill='#EE3377', alpha=0.5)) +
#geom_histogram(aes(x=t5, fill='#CC3311', alpha=0.5)) +
geom_histogram(aes(x=t6, fill='#009988', alpha=0.5))
success <- 0:10000
plot(success, dbinom(success, size=10000, prob=0.5),type='h')
dir_in = "output/3_empirical/aug_tipMissingDiscrete/"
for (file in list.files(dir_in)){
path = paste0(dir_in, file)
log <- read_tsv(path, show_col_types = FALSE)
log <- as.data.frame(log$char_hist)
write_tsv(log, file=path, col_names = FALSE)
}
# validate each tip expected sample state equally
# validate each tree expected sample state == 3
input_paths <- paste0(dir_in, list.files(dir_in))
input_paths
tip_edges <- c(which.edge(simmaps[[1]], "t1"),
which.edge(simmaps[[1]], "t2"),
which.edge(simmaps[[1]], "t3"),
which.edge(simmaps[[1]], "t4"),
which.edge(simmaps[[1]], "t5"),
which.edge(simmaps[[1]], "t6"))
state_count_per_tip <- tibble(t1 = 0, t2 = 0, t3 = 0, t4 = 0, t5 = 0, t6 = 0)
state_count_per_tree <- c()
count = 1
bar = txtProgressBar(style=3, width=40)
for (path in input_paths){
simmaps <- read.simmap(path, format="phylip")
state_count <- rep(0,6)
for (i in 1:length(simmaps)){
for (j in 1:length(tip_edges)){
num_states <- length(simmaps[[i]]$maps[[tip_edges[j]]])
state <- names(simmaps[[i]]$maps[[tip_edges[j]]][num_states])
state_count[j] <- state_count[j] + as.numeric(state)
}
}
state_count_per_tip[count,] <- as.list(state_count/(length(simmaps)))
state_count_per_tree <- append(state_count_per_tree, sum(state_count)/(length(simmaps)))
count = count + 1
setTxtProgressBar(bar, (count-1) / length(input_paths))
}
ggplot(state_count_per_tip) +
geom_histogram(aes(x=t1, fill='#EE7733', alpha=0.5)) +
geom_histogram(aes(x=t2, fill='#0077BB', alpha=0.5)) +
geom_histogram(aes(x=t3, fill='#33BBEE', alpha=0.5)) +
geom_histogram(aes(x=t4, fill='#EE3377', alpha=0.5)) +
geom_histogram(aes(x=t5, fill='#CC3311', alpha=0.5)) +
geom_histogram(aes(x=t6, fill='#009988', alpha=0.5))
state_count_per_tip
state_count_per_tree
for (file in list.files(dir_in)){
path = paste0(dir_in, file)
log <- read_tsv(path, show_col_types = FALSE)
log <- as.data.frame(log$char_hist)
write_tsv(log, file=path, col_names = FALSE)
}
# validate each tip expected sample state equally
# validate each tree expected sample state == 3
input_paths <- paste0(dir_in, list.files(dir_in))
# validate each tip expected sample state equally
# validate each tree expected sample state == 3
path <- paste0(dir_in, list.files(dir_in))
simmaps <- read.simmap(path, format="phylip")
tip_edges <- c(which.edge(simmaps[[1]], "t1"),
which.edge(simmaps[[1]], "t2"),
which.edge(simmaps[[1]], "t3"),
which.edge(simmaps[[1]], "t4"),
which.edge(simmaps[[1]], "t5"),
which.edge(simmaps[[1]], "t6"))
tip_edges
plot(simmap[[1]])
plot(simmaps[[1]])
dir_in = "output/3_empirical/aug_tipMissingDiscrete/"
for (file in list.files(dir_in)){
path = paste0(dir_in, file)
log <- read_tsv(path, show_col_types = FALSE)
log <- as.data.frame(log$char_hist)
write_tsv(log, file=path, col_names = FALSE)
}
# validate each tip expected sample state equally
# validate each tree expected sample state == 3
path <- paste0(dir_in, list.files(dir_in))
simmaps <- read.simmap(path, format="phylip")
tip_edges <- c(which.edge(simmaps[[1]], "t1"),
which.edge(simmaps[[1]], "t2"),
which.edge(simmaps[[1]], "t3"),
which.edge(simmaps[[1]], "t4"),
which.edge(simmaps[[1]], "t5"),
which.edge(simmaps[[1]], "t6"))
tip_edges
plot(simmaps[[1]])
state_count_per_tip <- rep(0,6)
state_count_per_tip <- rep(0,6)
bar = txtProgressBar(style=3, width=40)
for (i in 1:length(simmaps)){
for (j in 1:length(tip_edges)){
num_states <- length(simmaps[[i]]$maps[[tip_edges[j]]])
state <- names(simmaps[[i]]$maps[[tip_edges[j]]][num_states])
state_count_per_tip[j] <- state_count_per_tip[j] + as.numeric(state)
}
setTxtProgressBar(bar, i / length(simmaps))
}
state_count_per_tip
state_count_per_tip = state_count_per_tip / length(simmaps)
state_count_per_tip
state_count_per_tree <- sum(state_count_per_tip)/(length(simmaps))
state_count_per_tree
state_count_per_tree <- sum(state_count_per_tip)/length(state_count_per_tip)
state_count_per_tree
j=1
state_count_per_tip <- rep(0,6)
i=1
for (j in 1:length(tip_edges)){
num_states <- length(simmaps[[i]]$maps[[tip_edges[j]]])
state <- names(simmaps[[i]]$maps[[tip_edges[j]]][num_states]) # obtain last (aka most recent) state on the tip branch
state_count_per_tip[j] <- state_count_per_tip[j] + as.numeric(state)
}
state_count_per_tip
for (i in 1:length(simmaps)){
for (j in 1:length(tip_edges)){ # add the tip state (0 or 1) for each tip
num_states <- length(simmaps[[i]]$maps[[tip_edges[j]]])
state <- names(simmaps[[i]]$maps[[tip_edges[j]]][num_states]) # obtain last (aka most recent) state on the tip branch
state_count_per_tip[j] <- state_count_per_tip[j] + as.numeric(state)
}
setTxtProgressBar(bar, i / length(simmaps))
}
p_state1_per_tip = state_count_per_tip / length(simmaps)
p_state1_per_tree <- sum(state_count_per_tip) / length(simmaps)
p_state1_per_tip
p_state1_per_tip = state_count_per_tip / length(simmaps)
p_state1_per_tree <- sum(state_count_per_tip) / length(simmaps)
p_state1_per_tip
p_state1_per_tree
p_state1_per_tip
# validate each tip expected sample state equally
# validate each tree expected sample state == 3
path <- paste0(dir_in, list.files(dir_in))
tree <- read.tree("data/3_empirical/dummy_r6.tre")
index_to_rev <- matchNodes(tree)
dir_in = "output/3_empirical/aug_tipMissingDiscrete/"
for (file in list.files(dir_in)){
path = paste0(dir_in, file)
log <- read_tsv(path, show_col_types = FALSE)
log <- as.data.frame(log$char_hist)
write_tsv(log, file=path, col_names = FALSE)
}
# validate each tip expected sample state equally
# validate each tree expected sample state == 3
path <- paste0(dir_in, list.files(dir_in))
simmaps <- read.simmap(path, format="phylip")
# obtain indices of tip branches
tip_edges <- c(which.edge(simmaps[[1]], "t1"),
which.edge(simmaps[[1]], "t2"),
which.edge(simmaps[[1]], "t3"),
which.edge(simmaps[[1]], "t4"),
which.edge(simmaps[[1]], "t5"),
which.edge(simmaps[[1]], "t6"))
# initiate number of state 1 sampled per tip
state_count_per_tip <- rep(0,6)
bar = txtProgressBar(style=3, width=40)
for (i in 1:length(simmaps)){
for (j in 1:length(tip_edges)){ # add the tip state (0 or 1) for each tip
num_states <- length(simmaps[[i]]$maps[[tip_edges[j]]])
state <- names(simmaps[[i]]$maps[[tip_edges[j]]][num_states]) # obtain last (aka most recent) state on the tip branch
state_count_per_tip[j] <- state_count_per_tip[j] + as.numeric(state)
}
setTxtProgressBar(bar, i / length(simmaps))
}
p_state1_per_tip = state_count_per_tip / length(simmaps) # expected == 0.5 for each tip
p_state1_per_tree <- sum(state_count_per_tip) / length(simmaps) # expected == 3
p_state1_per_tip
p_state1_per_tree
?qbinom
qbinom(0.975, 10000, 0.5)
qbinom(0.025, 10000, 0.5)
p_state1_per_tree
p_state1_per_tip
state_count_per_tip
library(ape)
library(ggplot2)
source("scripts/4_plots/revgadgets_StochMap.R")
# validate each tip expected sample state equally
# validate each tree expected sample state == 3
path <- paste0(dir_in, list.files(dir_in))
simmaps <- read.simmap(path, format="phylip")
library(phytools)
simmaps <- read.simmap(path, format="phylip")
dir_in = "output/3_empirical/aug_tipMissingDiscrete/"
# validate each tip expected sample state equally
# validate each tree expected sample state == 3
path <- paste0(dir_in, list.files(dir_in))
simmaps <- read.simmap(path, format="phylip")
# obtain indices of tip branches
tip_edges <- c(which.edge(simmaps[[1]], "t1"),
which.edge(simmaps[[1]], "t2"),
which.edge(simmaps[[1]], "t3"),
which.edge(simmaps[[1]], "t4"),
which.edge(simmaps[[1]], "t5"),
which.edge(simmaps[[1]], "t6"))
# initiate number of state 1 sampled per tip
state_count_per_tip <- rep(0,6)
bar = txtProgressBar(style=3, width=40)
for (i in 1:length(simmaps)){
for (j in 1:length(tip_edges)){ # add the tip state (0 or 1) for each tip
num_states <- length(simmaps[[i]]$maps[[tip_edges[j]]])
state <- names(simmaps[[i]]$maps[[tip_edges[j]]][num_states]) # obtain last (aka most recent) state on the tip branch
state_count_per_tip[j] <- state_count_per_tip[j] + as.numeric(state)
}
setTxtProgressBar(bar, i / length(simmaps))
}
p_state1_per_tip = state_count_per_tip / length(simmaps) # expected == 0.5 for each tip
p_state1_per_tree <- sum(state_count_per_tip) / length(simmaps) # expected == 3
p_state1_per_tip
