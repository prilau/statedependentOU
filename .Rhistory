cov.accum <- function(tree, mrca_node, alpha, sigma2){
root_node = length(tree$tip.label) + 1
if (mrca_node == root_node){
cov_accum = 0.0
} else {
nodes <- nodesAlongLineage(tree, root_node, mrca_node)
edges <- which(tree$edge[,2] %in% nodes) # from root to mcra_node
subedge_lengths <- rev(unlist(lapply(edges, function(i) tree$maps[[i]]))) # from mcra_node to root
subedge_lengths <- tibble(state = names(subedge_lengths),
time_span = subedge_lengths,
alpha = alpha[names(subedge_lengths)],
sigma2 = sigma2[names(subedge_lengths)]) %>%
mutate(exp1 = -1 * expm1(-2 * alpha * time_span),
sum2_temp = -2 * alpha * time_span)
subedge_lengths$sum2= 0
if (length(subedge_lengths[[1]]) == 1){
subedge_lengths = subedge_lengths %>%
mutate(cov = sigma2 / (2 * alpha) * exp1)
cov_accum = subedge_lengths$cov[[1]]
} else {
for (i in 2:length(subedge_lengths[[1]])){
subedge_lengths$sum2[i] = subedge_lengths$sum2_temp[i-1]
subedge_lengths$sum2_temp[i] = subedge_lengths$sum2[i] + subedge_lengths$sum2_temp[i]
}
cov_accum = subedge_lengths %>% mutate(exp3 = exp1 * exp(sum2)) %>%
group_by(state) %>%
summarise(sum4 = sum(sigma2 / (2 * alpha) * exp3)) %>%
reframe(sum_final = sum(sum4)) %>%
unlist() %>%
unname()
}
}
return(cov_accum)
}
cov.loss <- function(tree, mrca_node, alpha, tip){
if (mrca_node == tip){
cov_loss_rate = 0
} else {
nodes <- nodesAlongLineage(tree, mrca_node, tip)
nodes <- head(nodes, n = -1)
edges <- which(tree$edge[,2] %in% nodes) # from root to mcra_node
subedge_lengths <- rev(unlist(lapply(edges, function(i) tree$maps[[i]]))) # from mcra_node to root
subedge_lengths <- tibble(time_span = subedge_lengths,
alpha = alpha[names(subedge_lengths)])
cov_loss_rate = subedge_lengths %>%
mutate(sum1 = -1 * alpha * time_span) %>%
reframe(sum_final = sum(sum1))
}
return(cov_loss_rate)
}
vcv.pairwise <- function(tree, alpha, sigma2, tip1, tip2){
mrca_node <- ape::mrca(tree)[tip1, tip2]
cov_accum = cov.accum(tree, mrca_node, alpha, sigma2)
cov_loss1 = cov.loss(tree, mrca_node, alpha, tip1)
cov_loss2 = cov.loss(tree, mrca_node, alpha, tip2)
cov = cov_accum * exp(cov_loss1 + cov_loss2)
return(unlist(unname(cov)))
}
vcv.matrix <- function(tree, alpha, sigma2){
ntip <- length(tree$tip.label)
V <- matrix(nrow = ntip, ncol = ntip)
j = ntip
while (j != 0){
for (i in 1:ntip){
V[i,j] <- vcv.pairwise(tree, alpha, sigma2, i, j)
V[j,i] <- V[i,j]
}
j = j-1
}
colnames(V) <- tree$tip.label
rownames(V) <- tree$tip.label
return(V)
}
sd_logL_vcv <- function(tree, continuousChar, alpha, sigma2, theta){
alpha = alpha[sort(names(alpha))]
sigma2 = sigma2[sort(names(sigma2))]
theta = theta[sort(names(theta))]
theta = as.matrix(theta, nrow = 3)
ntip <- length(tree$tip.label)
V = vcv.matrix(tree, alpha, sigma2)
W = weight.matrix(tree, alpha)
C = chol(V) # upper triangular matrix
L = t(C) # lower triangular matrix
log_det_V = 0
for (i in 1:ntip){
log_det_V = log_det_V + log(L[i,i])
}
log_det_V = log_det_V * 2.0 # equals to julia implementation to 12 sig. fig.
y = NULL
for (species in tree$tip.label){
y[species] = as.numeric(continuousChar[species])
}
# inverse of L
r = solve(L) %*% y - solve(L) %*% W %*% theta # what does de-correlated residuals mean?
# res = - (n/2) * log(2*pi) - 0.5 * log_det_V - 0.5 * dot(r, r)
#     = exp(-n/2)^(2*pi) * exp(-0.5)^det_V * exp(-0.5)^dot(r, r) ?
res = 0.0
res = res - (ntip/2) * log(2*pi)
res = res - 0.5 * log_det_V
res = res - 0.5 * dot(r, r) # is it dot product? what is dot product of r?
return(res)
}
# From slouch
data("artiodactyla")
data("neocortex")
neocortex <- neocortex[match(artiodactyla$tip.label, neocortex$species), ]
# Example
tree <- artiodactyla
brain <- neocortex$brain_mass_g_log_mean
names(brain) <- tree$tip.label
# Example
diet <- as.character(neocortex$diet)
names(diet) <- neocortex$species
discrete_states <- unique(diet)
set.seed(123)
tree <- make.simmap(artiodactyla, diet)
plot(tree)
#alpha = c(rep(rgamma(n=1, shape=1, rate=10), 3))
alpha = rgamma(n=3, shape=1, rate=10)
names(alpha) = discrete_states
#sigma2 = c(rep(rgamma(n=1, shape=2, rate=10), 3))
sigma2 = rgamma(n=3, shape=2, rate=10)
names(sigma2) = discrete_states
#theta = c(rep(rnorm(1, mean = 0, sd = 3), 3))
theta = rnorm(3, mean = 0, sd = 3)
names(theta) = discrete_states
likelihood_difference = c()
bar = txtProgressBar(style=3, width=40)
for (i in 1:100){
alpha = rgamma(n=3, shape=1, rate=10)
sigma2 = rgamma(n=3, shape=2, rate=10)
theta = rnorm(3, mean = 0, sd = 3)
names(alpha) = discrete_states
names(sigma2) = discrete_states
names(theta) = discrete_states
l2 = sd_logL_pruning(tree, brain, alpha, sigma2, theta)
l1 = sd_logL_vcv(tree, brain, alpha, sigma2, theta)
likelihood_difference[i] = abs(l1 - l2)
setTxtProgressBar(bar, i / 100)
}
hist(log(likelihood_difference), breaks = 20)
ggplot(as.data.frame(likelihood_difference)) +
geom_point(aes(x = 1:50, y = likelihood_difference))
ggplot(as.data.frame(likelihood_difference)) +
geom_point(aes(x = 1:100, y = log(likelihood_difference)))
ggplot(as.data.frame(likelihood_difference)) +
geom_histogram(aes(y = log(likelihood_difference)))
ggplot(as.data.frame(likelihood_difference)) +
geom_histogram(aes(log(likelihood_difference)))
ggplot(as.data.frame(likelihood_difference)) +
geom_histogram(aes(likelihood_difference))
ggplot(as.data.frame(likelihood_difference)) +
geom_boxplot(aes(likelihood_difference))
save(plt, "Desktop/likelihood_difference_box.pdf")
plt <- ggplot(as.data.frame(likelihood_difference)) +
geom_boxplot(aes(likelihood_difference))
save(plt, "Desktop/likelihood_difference_box.pdf")
ggsave(plt, "Desktop/likelihood_difference_box.pdf")
?ggsave
ggplot(as.data.frame(likelihood_difference)) +
geom_boxplot(aes(likelihood_difference))
ggsave("Desktop/likelihood_difference_box.pdf")
ggplot(as.data.frame(likelihood_difference)) +
geom_histogram(aes(likelihood_difference))
ggsave("Desktop/likelihood_difference_box.pdf")
library(phytools)
read.simmap("Desktop/statedependentOU/test_simmap_write.txt")
read.simmap("Desktop/statedependentOU/test_simmap_write.txt", format = "phylip")
remotes::install_github("thej022214/OUwie")
library(OUwie)
data(tworegime)
# simulate an OUM model
Q <- matrix(c(-1,1,1,-1), 2, 2)
root.freqs <- c(1, 0)
alpha <- c(2, 2)
sigma.sq <- c(1,1)
theta0 <- 5
theta <- c(5, 10)
simulated_data <- hOUwie.sim(tree, Q, root.freqs, alpha, sigma.sq, theta0, theta)
plot(simulated_data$simmap)
hOUwie.fixed(simmaps=simulated_data$simmap,
data=simulated_data$data,
rate.cat=1,
discrete_model="SYM",
continuous_model"OUMVA",
getOUParamStructure(model="OUMVA",nObsState = 2, rate.cat = 1)
hOUwie.fixed(simmaps=simulated_data$simmap,
data=simulated_data$data,
rate.cat=1,
discrete_model="SYM",
continuous_model=getOUParamStructure(model="OUMVA",nObsState = 2, rate.cat = 1),
root.p              = 5)
simulated_data$simmap
getOUParamStructure(model="OUMVA",nObsState = 2, rate.cat = 1)
hOUwie.fixed(simmaps=simulated_data$simmap,
data=simulated_data$data,
rate.cat=1,
discrete_model=matrix(c(-1,1,1,-1), 2, 2),
continuous_model=getOUParamStructure(model="OUMVA",nObsState = 2, rate.cat = 1),
root.p              = 5)
tree <- simulated_data$simmap
data <- simulated_data$data
hOUwie.fixed(simmaps=tree,
data=data,
rate.cat=1,
discrete_model=matrix(c(-1,1,1,-1), 2, 2),
continuous_model=getOUParamStructure(model="OUMVA",nObsState = 2, rate.cat = 1),
root.p              = 5)
read.simmap()
phytools::read.simmap()
library(slouch)
load(artiodactyl)
load(artiodactyla)
load("artiodactyla")
data("artiodactyla")
library(ape)
library(phytools)
write.tree(artiodactyla, "Desktop/statedependentOU/data/1_validation/artiodactyla/artiodactyla.tree")
library(ape)
t <- read.tree("Desktop/statedependentOU/data/3_empirical/mammal_2022.tree")
t <- read.tree("Desktop/statedependentOU/data/3_empirical/mammal_2019.trees")[1]
t <- read.simmap("Desktop/statedependentOU/data/3_empirical/mammal_2022.tree", format="phylip")
library(phytools)
t <- read.simmap("Desktop/statedependentOU/data/3_empirical/mammal_2022.tree", format="phylip")
library(phytools)
?make.simmap
library(phytools)
read.simmap("Desktop/statedependentOU/output/3_empirical/mammal_diet/02_state-dependentBM.tre")
tree <- read.simmap("Desktop/statedependentOU/output/3_empirical/mammal_diet/02_state-dependentBM.tre", format = "phylip")
setwd("Desktop/statedependentOU/")
library(RevGadgets)
library(tidyverse)
library(ggplot2)
# plot true dthetas against P(state_0 > state_1)
num_sim_per_combo=200
num_combo=9
dir_in="output/2_simulation/power_theta/logs/"
dir_out="figures/2_simulation/power_theta/"
par_values <- read.csv("data/2_simulation/power_theta/sim_pars.csv") %>%
mutate(stv = round(stv / 12.39784, 1))
par_values$stv = paste0(par_values$stv, "v")
par_values <- read.csv("data/2_simulation/power_theta/sim_pars.csv") %>%
mutate(stv = paste0(round(stv / 12.39784, 1), "v"))
par_values
grid <- expand.grid(sim=1:num_sim_per_combo, combo=1:num_combo,
stv=par_values$stv)
grid$halflife=par_values$halflife
grid$dtheta=par_values$theta_1 - par_values$theta_2
grid <- expand.grid(sim=1:num_sim_per_combo, combo=1:num_combo)
grid$stv=par_values$stv
grid$halflife=par_values$halflife
grid$dtheta=par_values$theta_1 - par_values$theta_2
i=1
filename <- paste0(dir_in, "sim_", i, "_run_1.log")
df <- readTrace(filename, burnin = 0.0)[[1]] %>%
select("theta_compare_12")
df$sim = i
df$combo = grid$combo
df$combo = grid$combo[i]
df
df <- readTrace(filename, burnin = 0.0)[[1]] %>%
select("theta_compare_12") %>%
summarise(prob = mean(theta_compare_12))
df
df$sim = i
df$combo = grid$combo[i]
df
num_combo=1
# plot true dthetas against P(state_0 > state_1)
num_sim_per_combo=200
dir_in="output/2_simulation/power_theta/logs/"
dir_out="figures/2_simulation/power_theta/"
par_values <- read.csv("data/2_simulation/power_theta/sim_pars.csv") %>%
mutate(stv = paste0(round(stv / 12.39784, 1), "v"))
par_values$halflife = as.character(par_values$halflife)
grid <- expand.grid(sim=1:num_sim_per_combo, combo=1:num_combo)
grid$stv=par_values$stv
grid$halflife=par_values$halflife
grid$dtheta=par_values$theta_1 - par_values$theta_2
grid$stv=par_values$stv[1:200]
grid$halflife=par_values$halflife[1:200]
grid$dtheta=par_values$theta_1 - par_values$theta_2[1:200]
grid$dtheta=par_values$theta_1[1:200] - par_values$theta_2[1:200]
bar = txtProgressBar(style=3, width=40)
for (i in 1:nrow(grid)){
filename <- paste0(dir_in, "sim_", i, "_run_1.log")
df <- readTrace(filename, burnin = 0.0)[[1]] %>%
select("theta_compare_12") %>%
summarise(prob = mean(theta_compare_12))
df$sim = i
df$combo = grid$combo[i]
if (i == 1){
df_power_theta <- df
} else {
df_power_theta <- bind_rows(df_power_theta, df)
}
setTxtProgressBar(bar, i / nrow(grid))
}
df_power_theta
thresholds <- tibble(sim=1:num_sim, upper=0.975, lower=0.025)
# plot true dthetas against P(state_0 > state_1)
num_sim_per_combo=200
thresholds <- tibble(sim=1:num_sim_per_combo, upper=0.975, lower=0.025)
df_power_theta$dtheta = grid$dtheta
df_power_theta
df_power_theta %>%
group_by(combo)
med_prob_theta <- df_power_theta %>%
mutate(bin = round(dtheta, digits = 0)) %>%
group_by(combo, bin) %>%
summarise(med_prob=median(prob))
med_prob_theta
?summarise
# plot individual reps as points
p1 <- ggplot(df_power_theta, aes(x=dtheta, y=prob)) +
geom_point(aes(x = dtheta, y=prob), color="grey", alpha=0.4) +
geom_point(data=med_prob_theta, aes(x = bin, y=med_prob), color="black") +
geom_line(data=med_prob_theta, aes(x = bin, y=med_prob), color="black", linetype="dashed") +
theme_classic() +
labs(x = "theta_1 - theta_2", y = "P(theta_1 > theta_2)") +
geom_hline(mapping = aes(yintercept = upper), data=thresholds, linetype = "dashed", color = "brown") +
geom_hline(mapping = aes(yintercept = lower), data=thresholds, linetype = "dashed", color = "brown") +
ylim(c(0, 1)) +
ggtitle("stv=0.5v, halflife=0.1")
p1
df_power_theta
df
i=1
filename <- paste0(dir_in, "sim_", i, "_run_1.log")
df <- readTrace(filename, burnin = 0.0)[[1]] %>%
select("theta_compare_12") %>%
summarise(prob = mean(theta_compare_12))
grid$prob[i] <- df$prob
grid
# plot true dthetas against P(state_0 > state_1)
num_sim_per_combo=200
dir_in="output/2_simulation/power_theta/logs/"
dir_out="figures/2_simulation/power_theta/"
par_values <- read.csv("data/2_simulation/power_theta/sim_pars.csv") %>%
mutate(stv = paste0(round(stv / 12.39784, 1), "v"))
par_values$halflife = as.character(par_values$halflife)
grid <- expand.grid(sim=1:num_sim_per_combo, combo=1:num_combo)
grid$stv=par_values$stv
grid$halflife=par_values$halflife
grid$stv=par_values$stv[1:200]
grid$halflife=par_values$halflife[1:200]
grid$dtheta=par_values$theta_1 - par_values$theta_2[1:200]
grid$dtheta=par_values$theta_1[1:200] - par_values$theta_2[1:200]
bar = txtProgressBar(style=3, width=40)
for (i in 1:nrow(grid)){
filename <- paste0(dir_in, "sim_", i, "_run_1.log")
df <- readTrace(filename, burnin = 0.0)[[1]] %>%
select("theta_compare_12") %>%
summarise(prob = mean(theta_compare_12))
grid$prob[i] <- df$prob
setTxtProgressBar(bar, i / nrow(grid))
}
thresholds <- tibble(sim=1:num_sim, upper=0.975, lower=0.025)
num_combo
thresholds <- tibble(sim=1:num_sim_per_combo*num_combo, upper=0.975, lower=0.025)
med_prob_theta <- grid %>%
mutate(bin = round(dtheta, digits = 0)) %>%
group_by(combo, bin) %>%
summarise(med_prob=median(prob))
med_prob_theta
# plot individual reps as points
p1 <- ggplot(grid, aes(x=dtheta, y=prob)) +
geom_point(aes(x = dtheta, y=prob), color="grey", alpha=0.4) +
geom_point(data=med_prob_theta, aes(x = bin, y=med_prob), color="black") +
geom_line(data=med_prob_theta, aes(x = bin, y=med_prob), color="black", linetype="dashed") +
theme_classic() +
labs(x = "theta_1 - theta_2", y = "P(theta_1 > theta_2)") +
geom_hline(mapping = aes(yintercept = upper), data=thresholds, linetype = "dashed", color = "brown") +
geom_hline(mapping = aes(yintercept = lower), data=thresholds, linetype = "dashed", color = "brown") +
ylim(c(0, 1)) +
facet_grid(nrows = vars(stv), ncol = vars(halflife)) +
ggtitle("Power of theta")
grid
unique(grid$stv)
grid$stv[101:200] = "1v"
grid$halflife[1:50] = 0.3
grid$halflife[151:200] = 0.3
# plot individual reps as points
p1 <- ggplot(grid, aes(x=dtheta, y=prob)) +
geom_point(aes(x = dtheta, y=prob), color="grey", alpha=0.4) +
geom_point(data=med_prob_theta, aes(x = bin, y=med_prob), color="black") +
geom_line(data=med_prob_theta, aes(x = bin, y=med_prob), color="black", linetype="dashed") +
theme_classic() +
labs(x = "theta_1 - theta_2", y = "P(theta_1 > theta_2)") +
geom_hline(mapping = aes(yintercept = upper), data=thresholds, linetype = "dashed", color = "brown") +
geom_hline(mapping = aes(yintercept = lower), data=thresholds, linetype = "dashed", color = "brown") +
ylim(c(0, 1)) +
facet_grid(nrows = vars(stv), ncol = vars(halflife)) +
ggtitle("Power of theta")
# plot individual reps as points
p1 <- ggplot(grid, aes(x=dtheta, y=prob)) +
geom_point(aes(x = dtheta, y=prob), color="grey", alpha=0.4) +
geom_point(data=med_prob_theta, aes(x = bin, y=med_prob), color="black") +
geom_line(data=med_prob_theta, aes(x = bin, y=med_prob), color="black", linetype="dashed") +
theme_classic() +
labs(x = "theta_1 - theta_2", y = "P(theta_1 > theta_2)") +
geom_hline(mapping = aes(yintercept = upper), data=thresholds, linetype = "dashed", color = "brown") +
geom_hline(mapping = aes(yintercept = lower), data=thresholds, linetype = "dashed", color = "brown") +
ylim(c(0, 1)) +
facet_grid(rows = vars(stv), col = vars(halflife)) +
ggtitle("Power of theta")
p1
# plot individual reps as points
p1 <- ggplot(grid, aes(x=dtheta, y=prob)) +
geom_point(aes(x = dtheta, y=prob), color="grey", alpha=0.4) +
geom_point(data=med_prob_theta, aes(x = bin, y=med_prob), color="black") +
geom_line(data=med_prob_theta, aes(x = bin, y=med_prob), color="black", linetype="dashed") +
#theme_classic() +
labs(x = "theta_1 - theta_2", y = "P(theta_1 > theta_2)") +
geom_hline(mapping = aes(yintercept = upper), data=thresholds, linetype = "dashed", color = "brown") +
geom_hline(mapping = aes(yintercept = lower), data=thresholds, linetype = "dashed", color = "brown") +
ylim(c(0, 1)) +
facet_grid(rows = vars(stv), col = vars(halflife)) +
ggtitle("Power of theta")
p1
# plot individual reps as points
p1 <- ggplot(grid, aes(x=dtheta, y=prob)) +
geom_point(aes(x = dtheta, y=prob), color="grey", alpha=0.4) +
geom_point(data=med_prob_theta, aes(x = bin, y=med_prob), color="black") +
geom_line(data=med_prob_theta, aes(x = bin, y=med_prob), color="black", linetype="dashed") +
theme_bw() +
labs(x = "theta_1 - theta_2", y = "P(theta_1 > theta_2)") +
geom_hline(mapping = aes(yintercept = upper), data=thresholds, linetype = "dashed", color = "brown") +
geom_hline(mapping = aes(yintercept = lower), data=thresholds, linetype = "dashed", color = "brown") +
ylim(c(0, 1)) +
facet_grid(rows = vars(stv), col = vars(halflife)) +
ggtitle("Power of theta")
p1
par_values <- read.csv("data/2_simulation/power_theta/sim_pars.csv") %>%
reframe(stv = paste0(round(stv / 12.39784, 1), "v"))
par_values
par_values <- read.csv("data/2_simulation/power_theta/sim_pars.csv") %>%
mutate(stv = paste0(round(stv / 12.39784, 1), "v"))
par_values
par_values <- read.csv("data/2_simulation/power_theta/sim_pars.csv") %>%
mutate(stv = paste0(round(stv / 12.39784, 1), "v"),
halflife = paste0(halflife, "tl"))
par_values
par_values <- read.csv("data/2_simulation/power_theta/sim_pars.csv") %>%
mutate(stv = paste0(round(stv / 12.39784, 1), " v"),
halflife = paste0(halflife, " tl"))
par_values
par_values <- read.csv("data/2_simulation/power_theta/sim_pars.csv") %>%
mutate(stv = paste0(round(stv / 12.39784, 1), " v"),
halflife = paste0(halflife, " tl"))
par_values
par_values <- read.csv("data/2_simulation/power_theta/sim_pars.csv")
par_values
par_values <- read.csv("data/2_simulation/power_theta/sim_pars.csv") %>%
mutate(stv = paste0(round(stv / 12.39784, 1), " v"),
halflife = paste0(halflife, " tl"))
View(par_values)
par_values <- read.csv("data/2_simulation/power_theta/sim_pars.csv") %>%
mutate(stv = paste0(round(stv / 12.39784, 1), " v"),
halflife = paste0(halflife, " TL"))
# plot individual reps as points
p1 <- ggplot(grid, aes(x=dtheta, y=prob)) +
geom_point(aes(x = dtheta, y=prob), color="grey", alpha=0.4) +
geom_point(data=med_prob_theta, aes(x = bin, y=med_prob), color="black") +
geom_line(data=med_prob_theta, aes(x = bin, y=med_prob), color="black", linetype="dashed") +
theme_bw() +
labs(x = "theta_1 - theta_2", y = "P(theta_1 > theta_2)") +
geom_hline(mapping = aes(yintercept = upper), data=thresholds, linetype = "dashed", color = "brown") +
geom_hline(mapping = aes(yintercept = lower), data=thresholds, linetype = "dashed", color = "brown") +
ylim(c(0, 1)) +
facet_grid(rows = vars(stv), col = vars(halflife)) +
ggtitle("Power of θ")
p1
# plot individual reps as points
p1 <- ggplot(grid, aes(x=dtheta, y=prob)) +
geom_point(aes(x = dtheta, y=prob), color="grey", alpha=0.4) +
geom_point(data=med_prob_theta, aes(x = bin, y=med_prob), color="black") +
geom_line(data=med_prob_theta, aes(x = bin, y=med_prob), color="black", linetype="dashed") +
theme_bw() +
labs(x = "θ_1 - θ_2", y = "P(θ_1 > θ_2)") +
geom_hline(mapping = aes(yintercept = upper), data=thresholds, linetype = "dashed", color = "brown") +
geom_hline(mapping = aes(yintercept = lower), data=thresholds, linetype = "dashed", color = "brown") +
ylim(c(0, 1)) +
facet_grid(rows = vars(stv), col = vars(halflife)) +
ggtitle("Power of θ")
# plot individual reps as points
p1 <- ggplot(grid, aes(x=dtheta, y=prob)) +
geom_point(aes(x = dtheta, y=prob), color="grey", alpha=0.4) +
geom_point(data=med_prob_theta, aes(x = bin, y=med_prob), color="black") +
geom_line(data=med_prob_theta, aes(x = bin, y=med_prob), color="black", linetype="dashed") +
theme_bw() +
labs(x = "θ_1 - θ_2", y = "P(θ_1 > θ_2)") +
geom_hline(mapping = aes(yintercept = upper), data=thresholds, linetype = "dashed", color = "brown") +
geom_hline(mapping = aes(yintercept = lower), data=thresholds, linetype = "dashed", color = "brown") +
ylim(c(0, 1)) +
facet_grid(rows = vars(stv), col = vars(halflife)) +
ggtitle("Power of θ")
p1
# plot individual reps as points
p1 <- ggplot(grid, aes(x=dtheta, y=prob)) +
geom_point(aes(x = dtheta, y=prob), color="grey", alpha=0.4) +
geom_point(data=med_prob_theta, aes(x = bin, y=med_prob), color="black") +
geom_line(data=med_prob_theta, aes(x = bin, y=med_prob), color="black", linetype="dashed") +
theme_bw() +
labs(x = "θ1 - θ2", y = "P(θ1 > θ2)") +
geom_hline(mapping = aes(yintercept = upper), data=thresholds, linetype = "dashed", color = "brown") +
geom_hline(mapping = aes(yintercept = lower), data=thresholds, linetype = "dashed", color = "brown") +
ylim(c(0, 1)) +
facet_grid(rows = vars(stv), col = vars(halflife)) +
ggtitle("Power of θ")
p1
library(ggplot2)
