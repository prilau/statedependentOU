y = c(0.001, 0.05, 0.1, 0.2, 0.5, 1.0)
y = -log(y/2)
y
plot(y)
y = c(0.001, 0.05, 0.1, 0.2, 0.5, 1.0)
plot(-log(y/2))
library(ape)
dummy <- read.tree("data/1_validation/artiodactyla/artiodactyla_nonultrametric_dummy.tree")
plot(dummy)
dummy <- read.tree("data/1_validation/artiodactyla/artiodactyla_nonultrametric_dummy.tree")
plot(dummy)
library(phytools)
dummy <- read.simmap("data/1_validation/artiodactyla/artiodactyla_nonultrametric_dummy.tree")
dummy <- read.simmap("data/1_validation/artiodactyla/artiodactyla_nonultrametric_dummy.tree", format="phylip")
dummy <- read.simmap("data/1_validation/artiodactyla/artiodactyla.tree", format="phylip")
dummy <- read.simmap("data/1_validation/artiodactyla/artiodactyla.trees", format="phylip")
dummy <- dummy[[1]]
plot(dummy)
dummy$edge.length
dummy$mapped.edge
write.tree(dummy, file = "data/1_validation/artiodactyla/artiodactyla_dummy.tree")
dummy <- read.tree("data/1_validation/artiodactyla/artiodactyla_dummy.tree")
make.simmap(dummy)
?make.simmap
library(slouch)
data("neocortex")
brain <- neocortex$diet
diet <- neocortex$diet
diet
data("artiodactyla")
names(diet) <- artiodactyla$tip.label
diet
make.simmap(dummy, diet)
sm_dummy <- make.simmap(dummy, diet)
plot(sm_dummy)
dummy <- read.tree("data/1_validation/artiodactyla/artiodactyla_dummy.tree")
sm_dummy <- make.simmap(dummy, diet)
plot(sm_dummy)
dummy <- read.tree("data/1_validation/artiodactyla/artiodactyla_dummy.tree")
sm_dummy <- make.simmap(dummy, diet)
plot(sm_dummy)
dummy <- read.tree("data/1_validation/artiodactyla/artiodactyla_dummy.tree")
sm_dummy <- make.simmap(dummy, diet)
plot(sm_dummy)
dummy <- read.tree("data/1_validation/artiodactyla/artiodactyla_dummy.tree")
sm_dummy <- make.simmap(dummy, diet)
plot(sm_dummy)
dummy <- read.tree("data/1_validation/artiodactyla/artiodactyla_dummy.tree")
sm_dummy <- make.simmap(dummy, diet)
plot(sm_dummy)
plot(sm_dummy)
dummy <- read.tree("data/1_validation/artiodactyla/artiodactyla_dummy.tree")
sm_dummy <- make.simmap(dummy, diet)
plot(sm_dummy)
a <- c(0.01, 0.05, 0.1, 0.5)
plot(-log(a/2))
sdou1 <- readTrace("output/1_validation/state_less_OU/state_dependent_OU_run_1.log", burnin = 0.05)[[1]]
sdou1 <- sdou1 %>% mutate(stationaryVariance = sigma2 / (2 * alpha))
#sdou1 <- read.csv("output/1_validation/state_less_OU/state_dependent_OU_run_1.log", sep="\t") %>%
#  mutate(stationaryVariance = sigma2 / (2 * alpha))
#write_delim(sdou1, file="output/1_validation/state_less_OU/state_dependent_OU_run_1_modified.log", delim="\t")
ou1 <- readTrace("output/1_validation/state_less_OU/state_less_OU_run_1
sdou1 <- readTrace("output/1_validation/state_less_OU/state_dependent_OU_run_1.log", burnin = 0.05)[[1]]
sdou1 <- readTrace("output/1_validation/state_less_OU/state_dependent_OU_run_1.log", burnin = 0.05)[[1]]
sdou1 <- sdou1 %>% mutate(stationaryVariance = sigma2 / (2 * alpha))
#sdou1 <- read.csv("output/1_validation/state_less_OU/state_dependent_OU_run_1.log", sep="\t") %>%
#  mutate(stationaryVariance = sigma2 / (2 * alpha))
#write_delim(sdou1, file="output/1_validation/state_less_OU/state_dependent_OU_run_1_modified.log", delim="\t")
ou1 <- readTrace("output/1_validation/state_less_OU/state_less_OU_run_1.log", burnin = 0.05)[[1]]
ou1 <- ou1 %>% mutate(stationaryVariance = sigma2 / (2 * alpha))
# only theta passed KL divergence test
kl.dist(sdou1$sigma2, ou1$sigma2, exp(1))[[3]]
sqrt(-log(0.05/2) * 0.5 * (5024+5001)/(5024*5001))
kl.dist(sdou1$alpha, ou1$alpha, exp(1))[[3]]
sqrt(-log(0.05/2) * 0.5 * (4344+4805)/(4344*4805))
kl.dist(sdou1$theta, ou1$theta, exp(1))[[3]]
sqrt(-log(0.05/2) * 0.5 * (8238+8248)/(8238*8248))
?coda::gelman.diag()
num_reps
num_bins
results_dir
results_dir <- "output/1_validation/equilibrium"
output_dir
output_dir <- results_dir
figs_dir
figs_dir <- "figures/1_validation/equilibrium"
# get the list of parameters
parameters <- colnames(read_data(paste0(output_dir,
"/Validation_Sim_0/posterior_samples.var")))
parameters
parameters <- parameters[-1]   # remove the first column ("Iteration")
# exclude "branch_rates" if present
parameters <- parameters[parameters != "branch_rates"]
# Iterate over each parameter
for (param in parameters) {
# initialize variables
coverage_probs <- data.frame(total_count = numeric(0),
in_count = numeric(0),
hpd_width = numeric(0),
stringsAsFactors = FALSE)
hpd_width <- seq(from = 0.0, to = 1.0, by = 1/n_bins)
for (i in 1:(n_bins+1)) {
coverage_probs[i,] = c(total_count = 0, in_count = 0, hpd_width = hpd_width[i])
}
# initialize progress bar
pb <- txtProgressBar(min = 0, max = n_reps, char = "*", style = 3)
# iterate over each replication
for (i in 1:n_reps) {
setTxtProgressBar(pb, i)
# read in the data
data <- read_data(paste0(output_dir,
"/Validation_Sim_",
i-1,
"/posterior_samples.var"))
if (is.null(data)) next
# extract samples
num_samples = length(data[,1])
x <- as.mcmc(data[round(0.25*num_samples):num_samples, param])
true_val_ext <- ifelse(param == "branch_rates", ".out", ".txt")
true_val <- read.table(file=paste0(output_dir,
"/Validation_Sim_",
i-1,
"/",
param,
true_val_ext))[1,1]
# calculate coverage probabilities
for (k in 1:(n_bins + 1)) {
hpd <- HPDinterval(x, prob = hpd_width[k])
if (true_val >= hpd[1,1] && true_val <= hpd[1,2]){
coverage_probs[k, "in_count"] <- coverage_probs[k, "in_count"] + 1
}
coverage_probs[k, "total_count"] <- coverage_probs[k, "total_count"] + 1
}
}
close(pb)
# calculate frequency of coverage
coverage_probs$freq = coverage_probs$in_count / coverage_probs$total_count
# save coverage probabilities
saveRDS(coverage_probs, file = paste0(results_dir, "/", param, ".rds"))
# print results to the screen
cat(param,"\n")
cat("HPD-width:\t\t",hpd_width,"\n")
cat("Coverage-freq:\t\t",coverage_probs$freq,"\n")
}
# Iterate over each parameter
for (param in parameters) {
# Read coverage probabilities
coverage_probs <- readRDS(file = paste0(results_dir, "/", param, ".rds"))
# Generate plot
p <- ggplot(coverage_probs) +
geom_bar(stat="identity", aes(x=hpd_width, y=freq), colour="lightgray", fill="lightgray") +
theme_classic() +
xlab("HPD width") + ylab("coverage probability") + ggtitle(param) +
geom_segment(aes(x=0, y=0, xend=1, yend=1), linetype="dashed", size=1.5, show.legend=FALSE) +
theme(legend.position="none", plot.title = element_text(hjust = 0.5))
# Save plot
ggsave(paste0(figs_dir, "/hpd_width_vs_coverage_", param, ".pdf"), plot=p, width=10, height=10, units="cm")
}
# Iterate over each parameter
for (param in parameters) {
# Read coverage probabilities
coverage_probs <- readRDS(file = paste0(results_dir, "/", param, ".rds"))
# Generate plot
p <- ggplot(coverage_probs) +
geom_bar(stat="identity", aes(x=hpd_width, y=freq), colour="lightgray", fill="lightgray") +
theme_classic() +
xlab("HPD width") + ylab("coverage probability") + ggtitle(param) +
geom_segment(aes(x=0, y=0, xend=1, yend=1), linetype="dashed", size=1.5, show.legend=FALSE) +
theme(legend.position="none", plot.title = element_text(hjust = 0.5))
# Save plot
ggsave(paste0(figs_dir, "/hpd_width_vs_coverage_", param, ".pdf"), plot=p, width=10, height=10, units="cm")
}
results_dir = output_dir = "output/1_validation/parameter"
figs_dir = "figures/1_validation/parameter"
# get the list of parameters
parameters <- colnames(read_data(paste0(output_dir,
"/Validation_Sim_0/posterior_samples.var")))
parameters <- parameters[-1]   # remove the first column ("Iteration")
# exclude "branch_rates" if present
parameters <- parameters[parameters != "branch_rates"]
parameters
# Iterate over each parameter
for (param in parameters) {
# initialize variables
coverage_probs <- data.frame(total_count = numeric(0),
in_count = numeric(0),
hpd_width = numeric(0),
stringsAsFactors = FALSE)
hpd_width <- seq(from = 0.0, to = 1.0, by = 1/n_bins)
for (i in 1:(n_bins+1)) {
coverage_probs[i,] = c(total_count = 0, in_count = 0, hpd_width = hpd_width[i])
}
# initialize progress bar
pb <- txtProgressBar(min = 0, max = n_reps, char = "*", style = 3)
# iterate over each replication
for (i in 1:n_reps) {
setTxtProgressBar(pb, i)
# read in the data
data <- read_data(paste0(output_dir,
"/Validation_Sim_",
i-1,
"/posterior_samples.var"))
if (is.null(data)) next
# extract samples
num_samples = length(data[,1])
x <- as.mcmc(data[round(0.25*num_samples):num_samples, param])
true_val_ext <- ifelse(param == "branch_rates", ".out", ".txt")
true_val <- read.table(file=paste0(output_dir,
"/Validation_Sim_",
i-1,
"/",
param,
true_val_ext))[1,1]
# calculate coverage probabilities
for (k in 1:(n_bins + 1)) {
hpd <- HPDinterval(x, prob = hpd_width[k])
if (true_val >= hpd[1,1] && true_val <= hpd[1,2]){
coverage_probs[k, "in_count"] <- coverage_probs[k, "in_count"] + 1
}
coverage_probs[k, "total_count"] <- coverage_probs[k, "total_count"] + 1
}
}
close(pb)
# calculate frequency of coverage
coverage_probs$freq = coverage_probs$in_count / coverage_probs$total_count
# save coverage probabilities
saveRDS(coverage_probs, file = paste0(results_dir, "/", param, ".rds"))
# print results to the screen
cat(param,"\n")
cat("HPD-width:\t\t",hpd_width,"\n")
cat("Coverage-freq:\t\t",coverage_probs$freq,"\n")
}
# Iterate over each parameter
for (param in parameters) {
# Read coverage probabilities
coverage_probs <- readRDS(file = paste0(results_dir, "/", param, ".rds"))
# Generate plot
p <- ggplot(coverage_probs) +
geom_bar(stat="identity", aes(x=hpd_width, y=freq), colour="lightgray", fill="lightgray") +
theme_classic() +
xlab("HPD width") + ylab("coverage probability") + ggtitle(param) +
geom_segment(aes(x=0, y=0, xend=1, yend=1), linetype="dashed", size=1.5, show.legend=FALSE) +
theme(legend.position="none", plot.title = element_text(hjust = 0.5))
# Save plot
ggsave(paste0(figs_dir, "/hpd_width_vs_coverage_", param, ".pdf"), plot=p, width=10, height=10, units="cm")
}
library(RevGadgets)
library(grid)
library(ggplot2)
library(tidyverse)
library(tikzDevice)
bm1 <- readTrace(path = "output/state_less_BM/state_less_BM_run_1.log", burnin = 0.05)
bm1 <- readTrace(path = "output/1_validation/state_less_BM/state_less_BM_run_1.log", burnin = 0.05)
sdou1 <-  readTrace(path = "output/1_validation/state_less_BM/state_dependent_OU_run_1.log", burnin = 0.05)
sdbm1 <- readTrace(path = "output/1_validation/state_less_BM/state_dependent_BM_run_1.log", burnin = 0.05)
ou2 <- readTrace(path = "output/1_validation/state_less_BM/state_less_OU_run_1.log", burnin = 0.05)
bm1[[1]]$sigma2_sdou <- sdou1[[1]]$sigma2
bm1[[1]]$sigma2_ou <- ou2[[1]]$sigma2
bm1[[1]]$sigma2_sdbm <- sdbm1[[1]]$sigma2
colors_bm <- c("sigma2" = "#ABC3C9", "sigma2_sdbm" = "#CCBe9F",
"sigma2_ou"="#FFCCCC", "sigma2_sdou"="#663333")
plot_bm <- plotTrace(trace = bm1, vars = c("sigma2", "sigma2_sdbm",
"sigma2_ou", "sigma2_sdou"),
color=colors_bm)[[1]] +
theme(panel.grid = element_blank(),
legend.position = "none") +
ggtitle("s")
plot_bm
pdf("figures/stateless_bm.pdf")
plot_bm
dev.off()
ou <- readTrace(path = "output/1_validation/state_less_OU/state_less_OU_run_2.log", burnin = 0.05)
ou[[1]] <- ou[[1]] %>%
mutate(stv = sigma2 / (2 * alpha))
sdou2 <-  readTrace(path = "output/1_validation/state_less_OU/state_dependent_OU_run_2.log", burnin = 0.05)
sdou2[[1]] <- sdou2[[1]] %>%
mutate(stv = sigma2 / (2 * alpha))
ou <- readTrace(path = "output/1_validation/state_less_OU/state_less_OU_run_2.log", burnin = 0.05)
ou <- readTrace(path = "output/1_validation/state_less_OU/state_less_OU_run_2.log", burnin = 0.05)
#ou[[1]] <- ou[[1]] %>%
#  mutate(stv = sigma2 / (2 * alpha))
sdou2 <-  readTrace(path = "output/1_validation/state_less_OU/state_dependent_OU_run_2.log", burnin = 0.05)
ou[[1]]$sigma2_sdou <- sdou2[[1]]$sigma2
ou[[1]]$theta_sdou <- sdou2[[1]]$theta
ou[[1]]$alpha_sdou <- sdou2[[1]]$alpha
ou[[1]]$stv_sdou <- sdou2[[1]]$stV
colors_ou <- c("stv_sdou" = "#663333", "stV" = "#FFCCCC")
ou_stv <- plotTrace(trace = ou, vars = c("stV", "stv_sdou"), color=colors_ou)[[1]] +
theme(panel.grid = element_blank(),
legend.position = "none") +
ggtitle("v")
ou[[1]]$stv_sdou <- sdou2[[1]]$stV
sdou2[[1]]$stV
ou <- readTrace(path = "output/1_validation/state_less_OU/state_less_OU_run_1.log", burnin = 0.05)
#ou[[1]] <- ou[[1]] %>%
#  mutate(stv = sigma2 / (2 * alpha))
sdou2 <-  readTrace(path = "output/1_validation/state_less_OU/state_dependent_OU_run_1.log", burnin = 0.05)
sdou2
ou[[1]]$sigma2_sdou <- sdou2[[1]]$sigma2
ou[[1]]$theta_sdou <- sdou2[[1]]$theta
ou[[1]]$alpha_sdou <- sdou2[[1]]$alpha
ou[[1]]$stv_sdou <- sdou2[[1]]$`stVs[1]`
colors_ou <- c("stv_sdou" = "#663333", "stV" = "#FFCCCC")
ou_stv <- plotTrace(trace = ou, vars = c("stV", "stV_sdou"), color=colors_ou)[[1]] +
theme(panel.grid = element_blank(),
legend.position = "none") +
ggtitle("v")
colors_ou <- c("stv_sdou" = "#663333", "stV" = "#FFCCCC")
ou_stv <- plotTrace(trace = ou, vars = c("stV", "stv_sdou"), color=colors_ou)[[1]] +
theme(panel.grid = element_blank(),
legend.position = "none") +
ggtitle("v")
colors_ou <- c("sigma2_sdou" = "#663333", "sigma2" = "#FFCCCC")
ou_sigma2 <- plotTrace(trace = ou, vars = c("sigma2", "sigma2_sdou"), color=colors_ou)[[1]] +
theme(panel.grid = element_blank(),
legend.position = "none") +
ggtitle("s")
colors_ou <- c("theta_sdou" = "#663333", "theta" = "#FFCCCC")
ou_theta <- plotTrace(trace = ou, vars = c("theta", "theta_sdou"), color=colors_ou)[[1]] +
theme(panel.grid = element_blank(),
legend.position = "none") +
ggtitle("t")
colors_ou <- c("alpha_sdou" = "#663333", "alpha" = "#FFCCCC")
ou_alpha <- plotTrace(trace = ou, vars = c("alpha", "alpha_sdou"), color=colors_ou)[[1]] +
theme(panel.grid = element_blank(),
legend.position = "none") +
ggtitle("a")
ou_alpha
ou_theta
ou_sigma2
ou_stv
pdf("figures/stateless_ou.pdf")
ou_stv
ou_alpha
ou_sigma2
ou_theta
dev.off()
sdbm <- readTrace(path = "output/1_validation/state_dependent_BM/state_dependent_BM_run_1.log", burnin = 0.05)
sdbm2020 <- readTrace(path = "output/1_validation/state_dependent_BM/state_dependent_BM_MayMoore_run_1.log", burnin = 0.05)
sdou <-  readTrace(path = "output/1_validation/state_dependent_BM/state_dependent_OU_run_1.log", burnin = 0.05)
sdbm2020[[1]]$`sigma2_sdou_0` <- sdou[[1]]$`sigma2s[1]`
sdbm2020[[1]]$`sigma2_sdou_1` <- sdou[[1]]$`sigma2s[2]`
sdbm2020[[1]]$`sigma2_0` <- sdbm[[1]]$`sigma2s[1]`
sdbm2020[[1]]$`sigma2_1` <- sdbm[[1]]$`sigma2s[2]`
colors_sdbm <- c("sigma2_sdou_0" = "#663333", "sigma2s[1]" = "#CCBe9F", "sigma2_0" = "#ABC3C9",
"sigma2_sdou_1" = "#663333", "sigma2s[2]" = "#CCBe9F", "sigma2_1" = "#ABC3C9")
plot_sdbm0 <- plotTrace(trace = sdbm2020,
color = colors_sdbm,
vars = c("sigma2_0", "sigma2_1", "sigma2s[1]", "sigma2s[2]", "sigma2_sdou_0", "sigma2_sdou_1"))[[1]] +
ggtitle("s") +
theme(panel.grid = element_blank(),
legend.position = "none",
)
plot_sdbm0
pdf("figures/state-dependent_bm.pdf")
plot_sdbm0
dev.off()
results_dir = output_dir = "output/1_validation/optimum_fixedHistory"
figs_dir = "figures/1_validation/fixedHistory/"
# get the list of parameters
parameters <- colnames(read_data(paste0(output_dir,
"/Validation_Sim_0/posterior_samples.var")))
parameters <- parameters[-1]   # remove the first column ("Iteration")
# exclude "branch_rates" if present
parameters <- parameters[parameters != "branch_rates"]
parameters
# get the list of parameters
parameters <- colnames(read_data(paste0(output_dir,
"/Validation_Sim_0/posterior_samples.var")))
parameters
parameters <- parameters[-1]   # remove the first column ("Iteration")
# exclude "branch_rates" if present
parameters <- parameters[parameters != "branch_rates"]
# Iterate over each parameter
for (param in parameters) {
# initialize variables
coverage_probs <- data.frame(total_count = numeric(0),
in_count = numeric(0),
hpd_width = numeric(0),
stringsAsFactors = FALSE)
hpd_width <- seq(from = 0.0, to = 1.0, by = 1/n_bins)
for (i in 1:(n_bins+1)) {
coverage_probs[i,] = c(total_count = 0, in_count = 0, hpd_width = hpd_width[i])
}
# initialize progress bar
pb <- txtProgressBar(min = 0, max = n_reps, char = "*", style = 3)
# iterate over each replication
for (i in 1:n_reps) {
setTxtProgressBar(pb, i)
# read in the data
data <- read_data(paste0(output_dir,
"/Validation_Sim_",
i-1,
"/posterior_samples.var"))
if (is.null(data)) next
# extract samples
num_samples = length(data[,1])
x <- as.mcmc(data[round(0.25*num_samples):num_samples, param])
true_val_ext <- ifelse(param == "branch_rates", ".out", ".txt")
true_val <- read.table(file=paste0(output_dir,
"/Validation_Sim_",
i-1,
"/",
param,
true_val_ext))[1,1]
# calculate coverage probabilities
for (k in 1:(n_bins + 1)) {
hpd <- HPDinterval(x, prob = hpd_width[k])
if (true_val >= hpd[1,1] && true_val <= hpd[1,2]){
coverage_probs[k, "in_count"] <- coverage_probs[k, "in_count"] + 1
}
coverage_probs[k, "total_count"] <- coverage_probs[k, "total_count"] + 1
}
}
close(pb)
# calculate frequency of coverage
coverage_probs$freq = coverage_probs$in_count / coverage_probs$total_count
# save coverage probabilities
saveRDS(coverage_probs, file = paste0(results_dir, "/", param, ".rds"))
# print results to the screen
cat(param,"\n")
cat("HPD-width:\t\t",hpd_width,"\n")
cat("Coverage-freq:\t\t",coverage_probs$freq,"\n")
}
# Iterate over each parameter
for (param in parameters) {
# Read coverage probabilities
coverage_probs <- readRDS(file = paste0(results_dir, "/", param, ".rds"))
# Generate plot
p <- ggplot(coverage_probs) +
geom_bar(stat="identity", aes(x=hpd_width, y=freq), colour="lightgray", fill="lightgray") +
theme_classic() +
xlab("HPD width") + ylab("coverage probability") + ggtitle(param) +
geom_segment(aes(x=0, y=0, xend=1, yend=1), linetype="dashed", size=1.5, show.legend=FALSE) +
theme(legend.position="none", plot.title = element_text(hjust = 0.5))
# Save plot
ggsave(paste0(figs_dir, "/hpd_width_vs_coverage_", param, ".pdf"), plot=p, width=10, height=10, units="cm")
}
results_dir = output_dir = "output/1_validation/optimum_simulatedHistory"
figs_dir = "figures/1_validation/simulatedHistory/"
# get the list of parameters
parameters <- colnames(read_data(paste0(output_dir,
"/Validation_Sim_0/posterior_samples.var")))
parameters <- parameters[-1]   # remove the first column ("Iteration")
# exclude "branch_rates" if present
parameters <- parameters[parameters != "branch_rates"]
parameters
# Iterate over each parameter
for (param in parameters) {
# initialize variables
coverage_probs <- data.frame(total_count = numeric(0),
in_count = numeric(0),
hpd_width = numeric(0),
stringsAsFactors = FALSE)
hpd_width <- seq(from = 0.0, to = 1.0, by = 1/n_bins)
for (i in 1:(n_bins+1)) {
coverage_probs[i,] = c(total_count = 0, in_count = 0, hpd_width = hpd_width[i])
}
# initialize progress bar
pb <- txtProgressBar(min = 0, max = n_reps, char = "*", style = 3)
# iterate over each replication
for (i in 1:n_reps) {
setTxtProgressBar(pb, i)
# read in the data
data <- read_data(paste0(output_dir,
"/Validation_Sim_",
i-1,
"/posterior_samples.var"))
if (is.null(data)) next
# extract samples
num_samples = length(data[,1])
x <- as.mcmc(data[round(0.25*num_samples):num_samples, param])
true_val_ext <- ifelse(param == "branch_rates", ".out", ".txt")
true_val <- read.table(file=paste0(output_dir,
"/Validation_Sim_",
i-1,
"/",
param,
true_val_ext))[1,1]
# calculate coverage probabilities
for (k in 1:(n_bins + 1)) {
hpd <- HPDinterval(x, prob = hpd_width[k])
if (true_val >= hpd[1,1] && true_val <= hpd[1,2]){
coverage_probs[k, "in_count"] <- coverage_probs[k, "in_count"] + 1
}
coverage_probs[k, "total_count"] <- coverage_probs[k, "total_count"] + 1
}
}
close(pb)
# calculate frequency of coverage
coverage_probs$freq = coverage_probs$in_count / coverage_probs$total_count
# save coverage probabilities
saveRDS(coverage_probs, file = paste0(results_dir, "/", param, ".rds"))
# print results to the screen
cat(param,"\n")
cat("HPD-width:\t\t",hpd_width,"\n")
cat("Coverage-freq:\t\t",coverage_probs$freq,"\n")
}
# Iterate over each parameter
for (param in parameters) {
# Read coverage probabilities
coverage_probs <- readRDS(file = paste0(results_dir, "/", param, ".rds"))
# Generate plot
p <- ggplot(coverage_probs) +
geom_bar(stat="identity", aes(x=hpd_width, y=freq), colour="lightgray", fill="lightgray") +
theme_classic() +
xlab("HPD width") + ylab("coverage probability") + ggtitle(param) +
geom_segment(aes(x=0, y=0, xend=1, yend=1), linetype="dashed", size=1.5, show.legend=FALSE) +
theme(legend.position="none", plot.title = element_text(hjust = 0.5))
# Save plot
ggsave(paste0(figs_dir, "/hpd_width_vs_coverage_", param, ".pdf"), plot=p, width=10, height=10, units="cm")
}
