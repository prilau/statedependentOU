ggpairs(clean_df,
columns = c("$t_{1/2}$","$\\alpha$", "$\\sigma^2$",
"$V_{st}$", "$\\theta_0$", "$\\theta_1$"),
upper = list(continuous = "cor"),
lower = list(continuous = "smooth"))
ggpairs(clean_df,
columns = c("$t_{1/2}$","$\\alpha$", "$\\sigma^2$",
"$V_{st}$", "$\\theta_0$"),
upper = list(continuous = "cor"),
lower = list(continuous = "smooth"))
ggplot(clean_df, aes(x = `$\\theta_0$`, y = `$\\sigma^2$`)) +
geom_point()
ggplot(clean_df, aes(x = `$\\theta_0$`, y = `$\\sigma^2$`)) +
geom_point() +
theme_bw()
ggplot(clean_df, aes(x = `$\\theta_0$`, y = c(`$t_{1/2}$`, `$\\alpha$`,
`$\\sigma^2$`,`$V_{st}$`))) +
geom_point() +
theme_bw()
ggplot(clean_df, aes(x = `$\\theta_0$`, y = c(`$t_{1/2}$`, `$\\alpha$`,
`$\\sigma^2$`,`$V_{st}$`))) +
geom_point() +
theme_bw() +
facet_grid(rows = Parameter)
ggplot(clean_df, aes(x = `$\\theta_0$`, y = c(`$t_{1/2}$`, `$\\alpha$`,
`$\\sigma^2$`,`$V_{st}$`))) +
geom_point() +
theme_bw() +
facet_grid()
cleanDf <- function(path) {
messy_df <- read.csv(path, sep = "\t")
clean_df <- messy_df %>%
filter(Iteration >= 240) %>%
select(halfLife, alpha.1., sigma2.1., stationaryVariance.1., theta.1., theta.2.) %>%
rename(`$t_{1/2}$` = halfLife,
`$\\alpha$` = alpha.1.,
`$\\sigma^2$` = sigma2.1.,
`$V_{st}$` = stationaryVariance.1.,
`$\\theta_0$` = theta.1.,
`$\\theta_1$` = theta.2.) %>%
pivot_longer(cols = c(`$t_{1/2}$`, `$\\alpha$`,
`$\\sigma^2$`,`$V_{st}$`))
}
this_path = "output/sdOU_simulation2_n500t1d1c2.log"
clean_df <- cleanDf(this_path)
ggplot(clean_df, aes(x = `$\\theta_0$`, y = name)) +
geom_point() +
theme_bw() +
facet_grid(cols = name)
clean_df <- messy_df %>%
filter(Iteration >= 240) %>%
select(halfLife, alpha.1., sigma2.1., stationaryVariance.1., theta.1., theta.2.) %>%
rename(`$t_{1/2}$` = halfLife,
`$\\alpha$` = alpha.1.,
`$\\sigma^2$` = sigma2.1.,
`$V_{st}$` = stationaryVariance.1.,
`$\\theta_0$` = theta.1.,
`$\\theta_1$` = theta.2.) %>%
pivot_longer(parameter = c(`$t_{1/2}$`, `$\\alpha$`,
`$\\sigma^2$`,`$V_{st}$`))
cleanDf <- function(path) {
messy_df <- read.csv(path, sep = "\t")
clean_df <- messy_df %>%
filter(Iteration >= 240) %>%
select(halfLife, alpha.1., sigma2.1., stationaryVariance.1., theta.1., theta.2.) %>%
rename(`$t_{1/2}$` = halfLife,
`$\\alpha$` = alpha.1.,
`$\\sigma^2$` = sigma2.1.,
`$V_{st}$` = stationaryVariance.1.,
`$\\theta_0$` = theta.1.,
`$\\theta_1$` = theta.2.) %>%
pivot_longer(cols = c(`$t_{1/2}$`, `$\\alpha$`,
`$\\sigma^2$`,`$V_{st}$`),
names_to = "parameter",
values_to = "value")
}
this_path = "output/sdOU_simulation2_n500t1d1c2.log"
clean_df <- cleanDf(this_path)
ggplot(clean_df, aes(x = `$\\theta_0$`, y = value)) +
geom_point() +
theme_bw()
ggplot(clean_df, aes(x = `$\\theta_0$`, y = value)) +
geom_point() +
theme_bw() +
facet_grid(cols = vars(parameter))
ggplot(clean_df, aes(x = `$\\theta_0$`, y = value, size = 1)) +
geom_point() +
theme_bw() +
facet_grid(cols = vars(parameter))
ggplot(clean_df, aes(x = `$\\theta_0$`, y = value, size = 0.001)) +
geom_point() +
theme_bw() +
facet_grid(cols = vars(parameter))
ggplot(clean_df, aes(x = `$\\theta_0$`, y = value)) +
geom_point() +
theme_bw() +
facet_grid(cols = vars(parameter))
ggplot(clean_df, aes(x = `$\\theta_0$`, y = value)) +
geom_point(aes(colour = "red", size = 3)) +
theme_bw() +
facet_grid(cols = vars(parameter))
ggplot(clean_df, aes(x = `$\\theta_0$`, y = value)) +
geom_point(aes(colour = "red", size = 0.1)) +
theme_bw() +
facet_grid(cols = vars(parameter))
ggplot(clean_df, aes(x = `$\\theta_0$`, y = value, alpha = 0.5)) +
geom_point() +
theme_bw() +
facet_grid(cols = vars(parameter))
ggplot(clean_df, aes(x = `$\\theta_0$`, y = value, alpha = 0.5, fill = NA)) +
geom_point() +
theme_bw() +
facet_grid(cols = vars(parameter))
ggplot(clean_df, aes(x = `$\\theta_0$`, y = value, alpha = 0.3)) +
geom_point() +
theme_bw() +
facet_grid(cols = vars(parameter))
ggplot(clean_df, aes(x = `$\\theta_0$`, y = value, alpha = 0.1)) +
geom_point() +
theme_bw() +
facet_grid(cols = vars(parameter))
ggplot(clean_df, aes(x = `$\\theta_1$`, y = value, alpha = 0.1)) +
geom_point() +
theme_bw() +
facet_grid(cols = vars(parameter))
theta0 <- ggplot(clean_df, aes(x = `$\\theta_0$`, y = value, alpha = 0.1)) +
geom_point() +
theme_bw() +
facet_grid(cols = vars(parameter))
theta1 <- ggplot(clean_df, aes(x = `$\\theta_1$`, y = value, alpha = 0.1)) +
geom_point() +
theme_bw() +
facet_grid(cols = vars(parameter))
nested_sim2 <- (theta0/theta1)
jpeg("figures/testing.jpg", width = 5.8, height = 3.26, units = "in", res = 480)
nested_sim2
dev.off()
cleanDf <- function(path) {
messy_df <- read.csv(path, sep = "\t")
clean_df <- messy_df %>%
filter(Iteration >= 240) %>%
select(halfLife, sigma2.1., stationaryVariance.1., theta.1., theta.2.) %>%
rename(`$t_{1/2}$` = halfLife,
`$\\sigma^2$` = sigma2.1.,
`$V_{st}$` = stationaryVariance.1.,
`$\\theta_0$` = theta.1.,
`$\\theta_1$` = theta.2.) %>%
pivot_longer(cols = c(`$t_{1/2}$`,
`$\\sigma^2$`,`$V_{st}$`),
names_to = "parameter",
values_to = "value")
}
this_path = "output/sdOU_simulation2_n500t1d1c2.log"
clean_df <- cleanDf(this_path)
theta0 <- ggplot(clean_df, aes(x = `$\\theta_0$`, y = value, alpha = 0.1)) +
geom_point() +
theme_bw() +
facet_grid(cols = vars(parameter))
theta1 <- ggplot(clean_df, aes(x = `$\\theta_1$`, y = value, alpha = 0.1)) +
geom_point() +
theme_bw() +
facet_grid(cols = vars(parameter))
nested_sim2 <- (theta0/theta1)
jpeg("figures/testing.jpg", width = 5.8, height = 3.26, units = "in", res = 480)
nested_sim2
dev.off()
View(clean_df)
clean_df <- messy_df %>%
filter(Iteration >= 240) %>%
select(halfLife, sigma2.1., stationaryVariance.1., theta.1., theta.2.) %>%
rename(`$t_{1/2}$` = halfLife,
`$\\sigma^2$` = sigma2.1.,
`$V_{st}$` = stationaryVariance.1.,
`$\\theta_0$` = theta.1.,
`$\\theta_1$` = theta.2.) %>%
pivot_longer(cols = c(`$\\theta_0$`,
`$\\theta_1$`),
names_to = "theta",
values_to = "theta_value") %>%
pivot_longer()
cleanDf <- function(path) {
messy_df <- read.csv(path, sep = "\t")
clean_df <- messy_df %>%
filter(Iteration >= 240) %>%
select(halfLife, sigma2.1., stationaryVariance.1., theta.1., theta.2.) %>%
rename(`$t_{1/2}$` = halfLife,
`$\\sigma^2$` = sigma2.1.,
`$V_{st}$` = stationaryVariance.1.,
`$\\theta_0$` = theta.1.,
`$\\theta_1$` = theta.2.) %>%
pivot_longer(cols = c(`$t_{1/2}$`,
`$\\sigma^2$`,`$V_{st}$`),
names_to = "parameter",
values_to = "value") %>%
pivot_longer(cols = c(`$\\theta_0$`,
`$\\theta_1$`),
names_to = "theta",
values_to = "theta_value")
}
this_path = "output/sdOU_simulation2_n500t1d1c2.log"
clean_df <- cleanDf(this_path)
View(clean_df)
cleanDf <- function(path) {
messy_df <- read.csv(path, sep = "\t")
clean_df <- messy_df %>%
filter(Iteration >= 240) %>%
select(halfLife, sigma2.1., stationaryVariance.1., theta.1., theta.2.) %>%
rename(`$t_{1/2}$` = halfLife,
`$\\sigma^2$` = sigma2.1.,
`$V_{st}$` = stationaryVariance.1.,
`$\\theta_0$` = theta.1.,
`$\\theta_1$` = theta.2.) %>%
pivot_longer(cols = c(`$\\theta_0$`,
`$\\theta_1$`),
names_to = "theta",
values_to = "theta_value")
}
this_path = "output/sdOU_simulation2_n500t1d1c2.log"
clean_df <- cleanDf(this_path)
View(clean_df)
ggpairs(clean_df,
columns = c(`$t_{1/2}$`,
`$\\sigma^2$`,
`$V_{st}$`,
`$\\theta_value$`),
upper = list(continuous = "cor"),
lower = list(continuous = "smooth"),
mapping = ggplot2::aes(color=theta,alpha=0.5))
ggpairs(clean_df,
columns = c("$t_{1/2}$",
"$\\sigma^2$",
"$V_{st}$",
"$\\theta_value$"),
upper = list(continuous = "cor"),
lower = list(continuous = "smooth"),
mapping = ggplot2::aes(color=theta,alpha=0.5))
cleanDf <- function(path) {
messy_df <- read.csv(path, sep = "\t")
clean_df <- messy_df %>%
filter(Iteration >= 240) %>%
select(halfLife, sigma2.1., stationaryVariance.1., theta.1., theta.2.) %>%
rename(`$t_{1/2}$` = halfLife,
`$\\sigma^2$` = sigma2.1.,
`$V_{st}$` = stationaryVariance.1.,
`$\\theta_0$` = theta.1.,
`$\\theta_1$` = theta.2.) %>%
pivot_longer(cols = c(`$\\theta_0$`,
`$\\theta_1$`),
names_to = "$\\theta$",
values_to = "$\\theta_value$")
}
this_path = "output/sdOU_simulation2_n500t1d1c2.log"
clean_df <- cleanDf(this_path)
ggpairs(clean_df,
columns = c("$t_{1/2}$",
"$\\sigma^2$",
"$V_{st}$",
"$\\theta_value$"),
upper = list(continuous = "cor"),
lower = list(continuous = "smooth"),
mapping = ggplot2::aes(color=theta,alpha=0.5))
ggpairs(clean_df,
columns = c("$t_{1/2}$",
"$\\sigma^2$",
"$V_{st}$",
"$\\theta_value$"),
upper = list(continuous = "cor"),
lower = list(continuous = "smooth"),
mapping = ggplot2::aes(color="$\\theta$",alpha=0.5))
cleanDf <- function(path) {
messy_df <- read.csv(path, sep = "\t")
clean_df <- messy_df %>%
filter(Iteration >= 240) %>%
select(halfLife, alpha.1., sigma2.1., stationaryVariance.1., theta.1., theta.2.) %>%
rename(`$t_{1/2}$` = halfLife,
`$\\alpha$` = alpha.1.,
`$\\sigma^2$` = sigma2.1.,
`$V_{st}$` = stationaryVariance.1.,
`$\\theta_0$` = theta.1.,
`$\\theta_1$` = theta.2.) %>%
pivot_longer(cols = c(`$t_{1/2}$`,`$\\alpha$`,
`$\\sigma^2$`,`$V_{st}$`),
names_to = "parameter",
values_to = "value") %>%
pivot_longer(cols = c(`$\\theta_0$`,
`$\\theta_1$`),
names_to = "$\\theta$",
values_to = "$\\theta$_value")
}
this_path = "output/sdOU_simulation2_n500t1d1c2.log"
clean_df <- cleanDf(this_path)
ggplot(clean_df, aes(x = "$\\theta$", y = parameter)) +
geom_point() +
theme_minimal()
cleanDf <- function(path) {
messy_df <- read.csv(path, sep = "\t")
clean_df <- messy_df %>%
filter(Iteration >= 240) %>%
select(halfLife, alpha.1., sigma2.1., stationaryVariance.1., theta.1., theta.2.) %>%
rename(`$t_{1/2}$` = halfLife,
`$\\alpha$` = alpha.1.,
`$\\sigma^2$` = sigma2.1.,
`$V_{st}$` = stationaryVariance.1.,
`$\\theta_0$` = theta.1.,
`$\\theta_1$` = theta.2.) %>%
pivot_longer(cols = c(`$t_{1/2}$`,`$\\alpha$`,
`$\\sigma^2$`,`$V_{st}$`),
names_to = "parameter",
values_to = "value") %>%
pivot_longer(cols = c(`$\\theta_0$`,
`$\\theta_1$`),
names_to = "$\\theta$",
values_to = "theta_value")
}
this_path = "output/sdOU_simulation2_n500t1d1c2.log"
clean_df <- cleanDf(this_path)
cleanDf <- function(path) {
messy_df <- read.csv(path, sep = "\t")
clean_df <- messy_df %>%
filter(Iteration >= 240) %>%
select(halfLife, alpha.1., sigma2.1., stationaryVariance.1., theta.1., theta.2.) %>%
rename(`$t_{1/2}$` = halfLife,
`$\\alpha$` = alpha.1.,
`$\\sigma^2$` = sigma2.1.,
`$V_{st}$` = stationaryVariance.1.,
`$\\theta_0$` = theta.1.,
`$\\theta_1$` = theta.2.) %>%
pivot_longer(cols = c(`$t_{1/2}$`,`$\\alpha$`,
`$\\sigma^2$`,`$V_{st}$`),
names_to = "parameter",
values_to = "value") %>%
pivot_longer(cols = c(`$\\theta_0$`,
`$\\theta_1$`),
names_to = "theta",
values_to = "theta_value")
}
this_path = "output/sdOU_simulation2_n500t1d1c2.log"
clean_df <- cleanDf(this_path)
ggplot(clean_df, aes(x = theta_value, y = value)) +
geom_point() +
theme_minimal()
ggplot(clean_df, aes(x = theta_value, y = `$t_{1/2}$`)) +
geom_point() +
theme_minimal()
cleanDf <- function(path) {
messy_df <- read.csv(path, sep = "\t")
clean_df <- messy_df %>%
filter(Iteration >= 240) %>%
select(halfLife, alpha.1., sigma2.1., stationaryVariance.1., theta.1., theta.2.) %>%
rename(`$t_{1/2}$` = halfLife,
`$\\alpha$` = alpha.1.,
`$\\sigma^2$` = sigma2.1.,
`$V_{st}$` = stationaryVariance.1.,
`$\\theta_0$` = theta.1.,
`$\\theta_1$` = theta.2.) %>%
#    pivot_longer(cols = c(`$t_{1/2}$`,`$\\alpha$`,
#                          `$\\sigma^2$`,`$V_{st}$`),
#                 names_to = "parameter",
#                 values_to = "value") %>%
pivot_longer(cols = c(`$\\theta_0$`,
`$\\theta_1$`),
names_to = "theta",
values_to = "theta_value")
}
this_path = "output/sdOU_simulation2_n500t1d1c2.log"
clean_df <- cleanDf(this_path)
ggplot(clean_df, aes(x = theta_value, y = `$t_{1/2}$`)) +
geom_point() +
theme_minimal()
ggplot(clean_df, aes(x = theta_value, y = `$t_{1/2}$`, col = theta)) +
geom_point() +
theme_minimal() +
nested_sim2 <- (theta0/theta1)
ggplot(clean_df, aes(x = theta_value, y = `$t_{1/2}$`, col = theta)) +
geom_point() +
theme_minimal() +
nested_sim2 <- (theta0/theta1)
ggplot(clean_df, aes(x = theta_value, y = `$t_{1/2}$`, fill = theta)) +
geom_point() +
theme_minimal() +
nested_sim2 <- (theta0/theta1)
ggplot(clean_df, aes(x = theta_value, y = `$t_{1/2}$`)) +
geom_point() +
theme_minimal() +
nested_sim2 <- (theta0/theta1)
ggplot(clean_df, aes(x = theta_value, y = `$t_{1/2}$`, col = theta)) +
geom_point() +
theme_minimal()
ggplot(clean_df, aes(x = theta_value, y = `$t_{1/2}$`, col = theta)) +
geom_point() +
theme_minimal() +
stat_ellipse()
ggplot(clean_df, aes(x = theta_value, y = `$t_{1/2}$`, col = theta)) +
geom_point() +
theme_minimal() +
stat_ellipse(aes(col = "black"))
theta_color <- c('#EE7733', '#0077BB')
names(parameter_color) <- levels(sim3_r$theta)
theta_color <- c('#EE7733', '#0077BB')
names(parameter_color) <- levels(clean_df$theta)
theta_color <- c('#EE7733', '#0077BB')
names(theta_color) <- levels(clean_df$theta)
theta_color <- c('#EE7733', '#0077BB')
names(theta_color) <- levels(clean_df$theta)
eclipse_color <- c('#555555', '#555555')
names(eclipse_color) <- levels(clean_df$theta)
ggplot(clean_df, aes(x = theta_value, y = `$t_{1/2}$`, col = theta_color)) +
geom_point() +
theme_minimal() +
stat_ellipse(aes(col = eclipse_color))
ggplot(clean_df, aes(x = theta_value, y = `$t_{1/2}$`, col = theta_color)) +
geom_point() +
theme_minimal()
ggplot(clean_df, aes(x = theta_value, y = `$t_{1/2}$`, col = theta)) +
geom_point() +
theme_minimal() +
scale_colour_manual(name = "theta",
labels = c(`$\\theta_0$`,
`$\\theta_1$`),
values = theta_color)
cleanDf <- function(path) {
messy_df <- read.csv(path, sep = "\t")
clean_df <- messy_df %>%
filter(Iteration >= 240) %>%
select(halfLife, alpha.1., sigma2.1., stationaryVariance.1., theta.1., theta.2.) %>%
rename("$t_{1/2}$" = halfLife,
"$\\alpha$" = alpha.1.,
"$\\sigma^2$" = sigma2.1.,
"$V_{st}$" = stationaryVariance.1.,
"$\\theta_0$" = theta.1.,
"$\\theta_1$" = theta.2.) %>%
#    pivot_longer(cols = c(`$t_{1/2}$`,`$\\alpha$`,
#                          `$\\sigma^2$`,`$V_{st}$`),
#                 names_to = "parameter",
#                 values_to = "value") %>%
pivot_longer(cols = c(`$\\theta_0$`,
`$\\theta_1$`),
names_to = "theta",
values_to = "theta_value")
}
this_path = "output/sdOU_simulation2_n500t1d1c2.log"
clean_df <- cleanDf(this_path)
View(clean_df)
cleanDf <- function(path) {
messy_df <- read.csv(path, sep = "\t")
clean_df <- messy_df %>%
filter(Iteration >= 240) %>%
select(halfLife, alpha.1., sigma2.1., stationaryVariance.1., theta.1., theta.2.) %>%
rename("$t_{1/2}$" = halfLife,
"$\\alpha$" = alpha.1.,
"$\\sigma^2$" = sigma2.1.,
"$V_{st}$" = stationaryVariance.1.,
"$\\theta_0$" = theta.1.,
"$\\theta_1$" = theta.2.) %>%
#    pivot_longer(cols = c(`$t_{1/2}$`,`$\\alpha$`,
#                          `$\\sigma^2$`,`$V_{st}$`),
#                 names_to = "parameter",
#                 values_to = "value") %>%
pivot_longer(cols = c("$\\theta_0$",
"$\\theta_1$"),
names_to = "theta",
values_to = "theta_value")
}
this_path = "output/sdOU_simulation2_n500t1d1c2.log"
clean_df <- cleanDf(this_path)
ggplot(clean_df, aes(x = theta_value, y = `$t_{1/2}$`, col = theta)) +
geom_point() +
theme_minimal() +
scale_colour_manual(name = "theta",
labels = c(`$\theta_0$`,
`$\theta_1$`),
values = theta_color)
levels(clean_df$theta)
theta_color <- c('#EE7733', '#0077BB')
names(theta_color) <- unique(clean_df$theta)
eclipse_color <- c('#555555', '#555555')
names(eclipse_color) <- unique(clean_df$theta)
unique(clean_df$theta)
ggplot(clean_df, aes(x = theta_value, y = `$t_{1/2}$`, col = theta)) +
geom_point() +
theme_minimal() +
scale_colour_manual(name = "theta",
labels = unique(clean_df$theta),
values = theta_color)
ggplot(clean_df, aes(x = theta_value, y = `$t_{1/2}$`, col = theta)) +
geom_point() +
theme_minimal() +
scale_colour_manual(name = "theta",
labels = unique(clean_df$theta),
values = theta_color) +
stat_ellipse(aes(col = eclipse_color))
ggplot(clean_df, aes(x = theta_value, y = `$t_{1/2}$`, col = theta)) +
geom_point() +
theme_minimal() +
scale_colour_manual(name = "theta",
labels = unique(clean_df$theta),
values = theta_color) +
stat_ellipse()
ggplot(clean_df, aes(x = theta_value, y = `$t_{1/2}$`, col = theta)) +
geom_point(aes(alpha = 0.3)) +
theme_minimal() +
scale_colour_manual(name = "theta",
labels = unique(clean_df$theta),
values = theta_color) +
stat_ellipse()
ggplot(clean_df, aes(y = theta_value, x = `$t_{1/2}$`, col = theta)) +
geom_point(aes(alpha = 0.3)) +
theme_minimal() +
scale_colour_manual(name = "theta",
labels = unique(clean_df$theta),
values = theta_color) +
stat_ellipse()
