b = 0.2345
c = 0.00003456
theta0 = 0.5
theta1 = 2
halflife = 0.35
alpha = log( 2 ) / halflife
stV = 0.0625
sigma2 = 2 * alpha * stV
#branch A
vL = sigma2 / ( 2 * alpha ) * ( exp(2 * alpha * 0.7) - 1 )
dL = 0
varL = vL + dL * exp(2 * alpha * 0.7)
dL = varL
muL = exp(0.7 * alpha) * (a  - theta0)  + theta0
#branch B
vR = sigma2 / ( 2 * alpha ) * ( exp(2 * alpha * 0.7) - 1 )
dR = 0
varR = vR + dR * exp(2 * alpha * 0.7)
dR = varR
muR = exp(0.7 * alpha) * (b  - theta0)  + theta0
mu_nAB = ( muL * varR + muR * varL ) / ( varL + varR )
mu_contrast = muL - muR
zL = 1
zR = 1
z_nAB = exp( alpha * 0.7 + alpha * 0.7 ) / ( zL * zR ) * exp( -mu_contrast^2 / ( 2 * ( varL + varR ) ) ) / sqrt( 2 * pi ) / sqrt( varL + varR )
lnl = log(z_nAB)
a = 0.00001234
b = 23.45
c = 0.00003456
theta0 = 0.5
theta1 = 2
halflife = 0.35
alpha = log( 2 ) / halflife
stV = 0.0625
sigma2 = 2 * alpha * stV
#branch A
vL = sigma2 / ( 2 * alpha ) * ( exp(2 * alpha * 0.7) - 1 )
dL = 0
varL = vL + dL * exp(2 * alpha * 0.7)
dL = varL
muL = exp(0.7 * alpha) * (a  - theta0)  + theta0
#branch B
vR = sigma2 / ( 2 * alpha ) * ( exp(2 * alpha * 0.7) - 1 )
dR = 0
varR = vR + dR * exp(2 * alpha * 0.7)
dR = varR
muR = exp(0.7 * alpha) * (b  - theta0)  + theta0
mu_nAB = ( muL * varR + muR * varL ) / ( varL + varR )
mu_contrast = muL - muR
zL = 1
zR = 1
z_nAB = exp( alpha * 0.7 + alpha * 0.7 ) / ( zL * zR ) * exp( -mu_contrast^2 / ( 2 * ( varL + varR ) ) ) / sqrt( 2 * pi ) / sqrt( varL + varR )
lnl = log(z_nAB)
b = 2.345
#branch A
vL = sigma2 / ( 2 * alpha ) * ( exp(2 * alpha * 0.7) - 1 )
dL = 0
varL = vL + dL * exp(2 * alpha * 0.7)
dL = varL
muL = exp(0.7 * alpha) * (a  - theta0)  + theta0
#branch B
vR = sigma2 / ( 2 * alpha ) * ( exp(2 * alpha * 0.7) - 1 )
dR = 0
varR = vR + dR * exp(2 * alpha * 0.7)
dR = varR
muR = exp(0.7 * alpha) * (b  - theta0)  + theta0
mu_nAB = ( muL * varR + muR * varL ) / ( varL + varR )
mu_contrast = muL - muR
zL = 1
zR = 1
z_nAB = exp( alpha * 0.7 + alpha * 0.7 ) / ( zL * zR ) * exp( -mu_contrast^2 / ( 2 * ( varL + varR ) ) ) / sqrt( 2 * pi ) / sqrt( varL + varR )
lnl = log(z_nAB)
a = 0.1234
a = 0.1234
b = 0.2345
c = 0.3456
theta0 = 0.5
theta1 = 2
halflife = 0.35
alpha = log( 2 ) / halflife
stV = 0.0625
sigma2 = 2 * alpha * stV
#branch A
vL = sigma2 / ( 2 * alpha ) * ( exp(2 * alpha * 0.7) - 1 )
dL = 0
varL = vL + dL * exp(2 * alpha * 0.7)
dL = varL
muL = exp(0.7 * alpha) * (a  - theta0)  + theta0
#branch B
vR = sigma2 / ( 2 * alpha ) * ( exp(2 * alpha * 0.7) - 1 )
dR = 0
varR = vR + dR * exp(2 * alpha * 0.7)
dR = varR
muR = exp(0.7 * alpha) * (b  - theta0)  + theta0
mu_nAB = ( muL * varR + muR * varL ) / ( varL + varR )
mu_contrast = muL - muR
zL = 1
zR = 1
z_nAB = exp( alpha * 0.7 + alpha * 0.7 ) / ( zL * zR ) * exp( -mu_contrast^2 / ( 2 * ( varL + varR ) ) ) / sqrt( 2 * pi ) / sqrt( varL + varR )
lnl_nAB = log(z_nAB)
#branch AB
vL = sigma2 / ( 2 * alpha ) * ( exp(2 * alpha * 0.3) - 1 )
varL = vL + dL * exp(2 * alpha * 0.3)
dL = varL
muL = exp(0.3 * alpha) * (mu_nAB  - theta0)  + theta0
#branch C
dR = 0
vR = sigma2 / ( 2 * alpha ) * ( exp(2 * alpha * 0.5) - 1 )
varR = vR + dR * exp(2 * alpha * 0.5)
dR = varR
muR = exp(0.5 * alpha) * (c  - theta1)  + theta1
vR = sigma2 / ( 2 * alpha ) * ( exp(2 * alpha * 0.5) - 1 )
varR = vR + dR * exp(2 * alpha * 0.5)
dR = varR
muR = exp(0.5 * alpha) * (muR  - theta0)  + theta0
mu_nABC = ( muL * varR + muR * varL ) / ( varL + varR )
mu_contrast = muL - muR
zL = 1
zR = 1
z_nABC = exp( alpha * 1.0 + alpha * 1.0 ) / ( zL * zR ) * exp( -mu_contrast^2 / ( 2 * ( varL + varR ) ) ) / sqrt( 2 * pi ) / sqrt( varL + varR )
lnl_nABC = log(z_nABC) + lnl_nAB
library(ape)
library(phytools)
read.nexus.data("haemulidae_Continuous.nex", type = "Continuous")
read.nexus.data("haemulidae_Continuous.nex", format = "Continuous")
?read.nexus.data
read.nexus.data("Desktop/ASSIM/lab_hoehna/statedependentOU/data/4_empirical/haemulidae_Continuous.nex")
read.nexus.data("Desktop/ASSIM/lab_hoehna/statedependentOU/data/4_empirical/haemulidae_Continuous.nex")
c(
"4.7999142627806",
"5.27469043591688",
"4.93447393313069",
"5.25921264666728",
"5.26527751246984",
"5.45318207710895",
"5.16860723502529",
"4.36944785246702",
"5.19112183494448",
"4.84158527949554",
"5.31320597904179",
"5.26269018890489",
"5.33271879326537",
"5.23110861685459",
"5.57215403217776",
"5.34233425196481",
"5.03043792139244",
"4.86368088113959",
"5.09172360877836",
"5.08140436498446",
"4.84024230816757",
"5.16860723502529",
"4.93447393313069",
"5.06259503302697",
"5.34710753071747",
"5.48063892334199",
"5.15138225842434",
"5.05624580534831",
"5.18178355029209",
"4.84418708645859",
"5.10999785795045",
"5.28320372873799",
"5.37989735354046",
"4.96284463025991",
"5.0998664278242",
"5.28066243130932",
"5.19017520792833",
"5.22305488204749",
"5.33271879326537",
"5.25577514328236",
"5.27979691691066",
"5.34233425196481",
"5.34391195410643",
"5.25749537202778",
"5.49511694252264",
"5.20768124628859",
"4.43081679884331",
"5.36129216570943",
"5.23819574320666"
)
data <- c(
"4.7999142627806",
"5.27469043591688",
"4.93447393313069",
"5.25921264666728",
"5.26527751246984",
"5.45318207710895",
"5.16860723502529",
"4.36944785246702",
"5.19112183494448",
"4.84158527949554",
"5.31320597904179",
"5.26269018890489",
"5.33271879326537",
"5.23110861685459",
"5.57215403217776",
"5.34233425196481",
"5.03043792139244",
"4.86368088113959",
"5.09172360877836",
"5.08140436498446",
"4.84024230816757",
"5.16860723502529",
"4.93447393313069",
"5.06259503302697",
"5.34710753071747",
"5.48063892334199",
"5.15138225842434",
"5.05624580534831",
"5.18178355029209",
"4.84418708645859",
"5.10999785795045",
"5.28320372873799",
"5.37989735354046",
"4.96284463025991",
"5.0998664278242",
"5.28066243130932",
"5.19017520792833",
"5.22305488204749",
"5.33271879326537",
"5.25577514328236",
"5.27979691691066",
"5.34233425196481",
"5.34391195410643",
"5.25749537202778",
"5.49511694252264",
"5.20768124628859",
"4.43081679884331",
"5.36129216570943",
"5.23819574320666"
)
var(data)
mean(data)
data <- c(
4.7999142627806,
5.27469043591688,
4.93447393313069,
5.25921264666728,
5.26527751246984,
5.45318207710895,
5.16860723502529,
4.36944785246702,
5.19112183494448,
4.84158527949554,
5.31320597904179,
5.26269018890489,
5.33271879326537,
5.23110861685459,
5.57215403217776,
5.34233425196481,
5.03043792139244,
4.86368088113959,
5.09172360877836,
5.08140436498446,
4.84024230816757,
5.16860723502529,
4.93447393313069,
5.06259503302697,
5.34710753071747,
5.48063892334199,
5.15138225842434,
5.05624580534831,
5.18178355029209,
4.84418708645859,
5.10999785795045,
5.28320372873799,
5.37989735354046,
4.96284463025991,
5.0998664278242,
5.28066243130932,
5.19017520792833,
5.22305488204749,
5.33271879326537,
5.25577514328236,
5.27979691691066,
5.34233425196481,
5.34391195410643,
5.25749537202778,
5.49511694252264,
5.20768124628859,
4.43081679884331,
5.36129216570943,
5.23819574320666
)
var(data)
mean(data)
min(data)
max(data)
setwd("Desktop/ASSIM/lab_hoehna/statedependentOU/")
read.nexus.data("data/4_empirical/haemulidae_Continuous.nex")
data <- read.csv("data/4_empirical/haemulidae_Continuous.tsv")
View(data)
data <- read.csv("data/4_empirical/haemulidae_Continuous.tsv", sep = "\t")
data <- read.csv("data/4_empirical/haemulidae_Continuous.tsv", sep = "\t")
data <- read.csv("data/4_empirical/haemulidae_Continuous.tsv", sep = "\t")
data <- read.nexus.data("data/4_empirical/haemulidae_Continuous.nex")
data <- read.csv("data/4_empirical/haemulidae_Continuous.nex", sep = "\t")
data <- read.csv("data/4_empirical/haemulidae_Continuous.nex", sep = "\t")
View(data)
data <- read.csv("data/4_empirical/haemulidae_Continuous.nex")
data <- read.csv("data/4_empirical/haemulidae_Continuous.tsv", sep = "\t")
View(data)
data <- read.csv("data/4_empirical/haemulidae_Continuous.tsv")
View(data)
data[1]
data[2]
2:13
for (i in 2:13) {
print(paste0("trait ", i-1, mean(data[i]), max(data[i]), min(data[i]), var(data[i])))
}
for (i in 2:13) {
x <- as.numeric(data[i])
print(paste0(i-1, " ", mean(x), " ", max(x), " ", min(x), " ", var(x)))
}
as.numeric(data$open)
View(data)
data <- read.csv("data/4_empirical/haemulidae_Continuous.tsv")
data <- read.csv("data/4_empirical/haemulidae_Continuous.tsv")
View(data)
for (i in 2:13) {
print(paste0(i-1, " ", mean(data[i]), " ", max(data[i]), " ", min(data[i]), " ", var(data[i])))
}
?mean
warning(())
warning()
for (i in 2:13) {
print(paste0(i-1, " ", mean(data[i]), " ", max(data[i]), " ", min(data[i]), " ", var(data[i])))
}
warning()
warnings()
for (i in 2:13) {
print(paste0(i-1, " ", mean(data[i]), " ", max(data[i]), " ", min(data[i]), " ", var(data[i])))
}
warnings()
mean(data$adductor_mass)
mean(data$body_size)
mean(data$adductor_mass)
mean(data$open)
mean(data$close)
mean(data$ascending_process)
mean(data$raker_length)
mean(data$eye_width)
mean(data$suction)
mean(data$buccal_length)
mean(data$buccal_width)
mean(data$head_height)
mean(data$head_length)
exp(4.36944785246702)
exp(5.57215403217776)
exp(-1.5350567286627)
exp(0.247312448243126)
exp(1.64865862558738)
exp(3.43398720448515)
exp(0.53062825106217)
exp(2.01089499914473)
exp(1.87180217690159)
exp(2.92852352386054)
exp(2.83321334405622)
exp(4.14788532915013)
exp(1.56861591791385)
exp(3.3603753871419)
exp(1.1314021114911)
exp(3.60549784517489)
exp(4.49423862528081)
exp(3.05400118167797)
library(ggridges)
library(ggplot2)
library(tidyverse)
cleanDf <- function(path, simID, expChange) {
messy_df <- read.csv(path, sep = "\t")
clean_df <- messy_df %>%
filter(Iteration >= 240) %>%
select(halfLife, sigmaStateless, theta.1., theta.2.) %>%
rename(sigmaStateless = sigma2,
theta_state0 = theta.1.,
theta_state1 = theta.2.) %>%
mutate(simulationID = simID) %>%
pivot_longer(cols = c("halfLife", "sigma2",
"theta_state0", "theta_state1"),
names_to = "parameter",
values_to = "value") %>%
mutate(exp_change = expChange)
}
num_tips   = 500
tree_reps   = 1
rate = c(5, 10, 20, 50, 500)
num_dtraits = 4
num_ctraits = 4
grid = expand.grid(num_tips=num_tips, tree=1:tree_reps,
ctraits=1:num_ctraits, dtraits = 1:num_dtraits,
rates = rate,
stringsAsFactors=FALSE)
this_dir = "output/"
looongPosteriorDf <- data.frame()
for(i in 1:nrow(grid)) {
this_row = grid[i,]
this_num_tips   = this_row[[1]]
this_tree       = this_row[[2]]
this_num_ctraits = this_row[[3]]
this_num_dtraits = this_row[[4]]
this_rate = this_row[[5]]
this_simID = paste0("n", this_num_tips,
"t", this_tree,
"r", this_rate,
"d", this_num_dtraits,
"c", this_num_ctraits)
this_path = paste0(this_dir, "sdOU_simulation3_", this_simID, ".log")
clean_df <- cleanDf(this_path, this_simID, this_rate)
looongPosteriorDf <- looongPosteriorDf %>%
bind_rows(clean_df)
}
read.csv("sdOU_simulation3_n500t1r500d2c1.log", sep = "\t")
read.csv("output/sdOU_simulation3_n500t1r500d2c1.log", sep = "\t")
cleanDf <- function(path, simID, expChange) {
messy_df <- read.csv(path, sep = "\t")
clean_df <- messy_df %>%
filter(Iteration >= 240) %>%
select(halfLife, sigma2Stateless, theta.1., theta.2.) %>%
rename(sigma2Stateless = sigma2,
theta_state0 = theta.1.,
theta_state1 = theta.2.) %>%
mutate(simulationID = simID) %>%
pivot_longer(cols = c("halfLife", "sigma2",
"theta_state0", "theta_state1"),
names_to = "parameter",
values_to = "value") %>%
mutate(exp_change = expChange)
}
for(i in 1:nrow(grid)) {
this_row = grid[i,]
this_num_tips   = this_row[[1]]
this_tree       = this_row[[2]]
this_num_ctraits = this_row[[3]]
this_num_dtraits = this_row[[4]]
this_rate = this_row[[5]]
this_simID = paste0("n", this_num_tips,
"t", this_tree,
"r", this_rate,
"d", this_num_dtraits,
"c", this_num_ctraits)
this_path = paste0(this_dir, "sdOU_simulation3_", this_simID, ".log")
clean_df <- cleanDf(this_path, this_simID, this_rate)
looongPosteriorDf <- looongPosteriorDf %>%
bind_rows(clean_df)
}
cleanDf <- function(path, simID, expChange) {
messy_df <- read.csv(path, sep = "\t")
clean_df <- messy_df %>%
filter(Iteration >= 240) %>%
select(halfLife, sigma2Stateless, theta.1., theta.2.) %>%
rename(theta_state0 = theta.1.,
theta_state1 = theta.2.) %>%
mutate(simulationID = simID) %>%
pivot_longer(cols = c("halfLife", "sigma2Stateless",
"theta_state0", "theta_state1"),
names_to = "parameter",
values_to = "value") %>%
mutate(exp_change = expChange)
}
for(i in 1:nrow(grid)) {
this_row = grid[i,]
this_num_tips   = this_row[[1]]
this_tree       = this_row[[2]]
this_num_ctraits = this_row[[3]]
this_num_dtraits = this_row[[4]]
this_rate = this_row[[5]]
this_simID = paste0("n", this_num_tips,
"t", this_tree,
"r", this_rate,
"d", this_num_dtraits,
"c", this_num_ctraits)
this_path = paste0(this_dir, "sdOU_simulation3_", this_simID, ".log")
clean_df <- cleanDf(this_path, this_simID, this_rate)
looongPosteriorDf <- looongPosteriorDf %>%
bind_rows(clean_df)
}
# basic example
mean_parameters <- looongPosteriorDf %>%
group_by(parameter, simulationID) %>%
summarise(mean = mean(value), exp_change = mean(exp_change))
View(mean_parameters)
true_values <- tibble(
parameter = c("halfLife", "sigma2Stateless",
"theta_state0", "theta_state1"),
value = c(0.35, 0.0625*2*log(2)/0.35, 0.5, 2.0))
View(true_values)
cuteTetrisPlot <- mean_parameters %>%
filter(parameter %in% c("halfLife", "sigma2Stateless",
"theta_state0", "theta_state1")) %>%
ggplot(aes(x = mean, alpha = 0.5, fill = factor(exp_change))) +
geom_histogram(bins = 10) +
facet_grid(cols = vars(parameter), rows = vars(exp_change), scales = "free_x") +
geom_vline(aes(xintercept = value, alpha = 0.5), data = true_values) +
theme_bw()
cuteTetrisPlot
cuteTetrisPlot <- mean_parameters %>%
filter(parameter %in% c("halfLife", "sigma2Stateless",
"theta_state0", "theta_state1")) %>%
ggplot(aes(x = mean, alpha = 0.5, fill = factor(exp_change))) +
geom_histogram(bins = 20) +
facet_grid(cols = vars(parameter), rows = vars(exp_change), scales = "free_x") +
geom_vline(aes(xintercept = value, alpha = 0.5), data = true_values) +
theme_bw()
cuteTetrisPlot
cuteTetrisPlot <- mean_parameters %>%
filter(parameter %in% c("halfLife", "sigma2Stateless",
"theta_state0", "theta_state1")) %>%
ggplot(aes(x = mean, alpha = 0.5, fill = factor(exp_change))) +
geom_histogram(bins = 15) +
facet_grid(cols = vars(parameter), rows = vars(exp_change), scales = "free_x") +
geom_vline(aes(xintercept = value, alpha = 0.5), data = true_values) +
theme_bw()
cuteTetrisPlot
