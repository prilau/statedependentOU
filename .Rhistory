log_det_V = 0
for (i in 1:ntip){
log_det_V = log_det_V + log(L[i,i])
}
log_det_V = log_det_V *2.0 # equals to julia implementation to 12 sig. fig.
y = NULL
for (species in tree$tip.label){
y[species] = as.numeric(continuousChar[species])
}
r = solve(L) %*% y - solve(L) %*% X * theta # what does de-correlated residuals mean?
# res = - (n/2) * log(2*pi) - 0.5 * log_det_V - 0.5 * dot(r, r)
#     = exp(-n/2)^(2*pi) * exp(-0.5)^det_V * exp(-0.5)^dot(r, r) ?
res = 0.0
res = res - 0.5 * ntip * log(2*pi)
res = res - 0.5 * log_det_V
res = res - 0.5 * dot(r, r) # what is r and what is  dot product of r?
return(res)
}
###################################################
#                                                 #
#               State-dependent vcv               #
#                                                 #
###################################################
# find parent node by providing child node
parentNode <- function(tree, x){
m <- which(tree$edge[, 2] == x)
return(tree$edge[m, 1])
}
# find nodes along a lineage towards root node by providing initial child (presumably tip) node
nodesAlongLineage <- function(tree, old_node, young_node){
k <- young_node
while(young_node != old_node){
k <- c(k, parentNode(tree, young_node))
young_node <- tail(k, n = 1)
}
return(k)
}
# find subedges of a lineage
lineage.constructor <- function(tree, root_node, e){
nodes <- nodesAlongLineage(tree, root_node, e)
edges <- which(tree$edge[,2] %in% nodes) # from root to tip
subedge_lengths <- rev(unlist(lapply(edges, function(i) tree$maps[[i]]))) # tip to root
state_changes <- names(subedge_lengths) # from tip to root
#state_changes <- c(state_changes[1], state_changes) # add root state, assuming root state equals the state of the closest subedge
#lineage$state_indicator <- lapply(all_states, function(x) {res <- match(lineage$state_changes, x); res[is.na(res)] <- 0; return(res)})
#names(lineage$state_indicator) <- all_states
# recording time-related numbers of each subedge (root is a subedge with length = 0)
#times <- cumsum(unname(subedge_lengths))
#time_tip <- tail(times, n = 1)
#time_begin <- time_tip - c(0, head(times, n = -1))
#time_end <- time_tip - times
#time_span <- time_begin - time_end
return(tibble(state = state_changes,
#time_begin = time_begin,
#time_end = time_end,
time_span = subedge_lengths))
}
# not yet finished - weight matrix function
## need updates
weights.lineage <- function(tree, alpha, e){
root_node = length(tree$tip.label) + 1
lineage <- lineage.constructor(tree, root_node, e)
lineage[["alpha"]] = alpha[lineage[["state"]]]
W = matrix(0, ncol = length(alpha), nrow = 1)
colnames(W) = sort(names(alpha))
if (length(lineage[[1]]) > 1){
lineage <- lineage %>%
mutate(
exp1 = -1 * expm1(-1 * alpha * time_span),
sum2_temp = -1 * alpha * time_span)
lineage$exp1[length(lineage$exp1)] = 1
lineage$sum2 = 0
for (i in 2:length(lineage[[1]])){
lineage$sum2[i] = lineage$sum2_temp[i-1]
lineage$sum2_temp[i] = lineage$sum2[i] + lineage$sum2_temp[i]
}
weights = lineage %>% mutate(exp_final = exp1 * exp(sum2)) %>%
group_by(state) %>%
summarise(weight = sum(exp_final))
for (i in 1:nrow(weights)){
W[, weights$state[i]] = weights$weight[i]
}
} else {
W[, weights$state[1]] = 1
}
return(W)
}
# combine to form weight matrix
weight.matrix <- function(tree, alpha){
ntip = length(tree$tip.label)
weight_matrix = matrix(0, nrow = ntip, ncol = length(alpha))
rownames(weight_matrix) <- tree$tip.label
colnames(weight_matrix) <- c(sort(names(alpha)))
for (i in 1:ntip){
weight_matrix[i, ] <- weights.lineage(tree, alpha, i)
}
return(weight_matrix)
}
cov.accum <- function(tree, mrca_node, alpha, sigma2){
root_node = length(tree$tip.label) + 1
if (mrca_node == root_node){
cov_accum = 0.0
} else {
nodes <- nodesAlongLineage(tree, root_node, mrca_node)
edges <- which(tree$edge[,2] %in% nodes) # from root to mcra_node
subedge_lengths <- rev(unlist(lapply(edges, function(i) tree$maps[[i]]))) # from mcra_node to root
subedge_lengths <- tibble(state = names(subedge_lengths),
time_span = subedge_lengths,
alpha = alpha[names(subedge_lengths)],
sigma2 = sigma2[names(subedge_lengths)]) %>%
mutate(exp1 = -1 * expm1(-2 * alpha * time_span),
sum2_temp = -2 * alpha * time_span)
subedge_lengths$sum2= 0
if (length(subedge_lengths[[1]]) == 1){
subedge_lengths = subedge_lengths %>%
mutate(cov = sigma2 / (2 * alpha) * exp1)
cov_accum = subedge_lengths$cov[[1]]
} else {
for (i in 2:length(subedge_lengths[[1]])){
subedge_lengths$sum2[i] = subedge_lengths$sum2_temp[i-1]
subedge_lengths$sum2_temp[i] = subedge_lengths$sum2[i] + subedge_lengths$sum2_temp[i]
}
cov_accum = subedge_lengths %>% mutate(exp3 = exp1 * exp(sum2)) %>%
group_by(state) %>%
summarise(sum4 = sum(sigma2 / (2 * alpha) * exp3)) %>%
reframe(sum_final = sum(sum4)) %>%
unlist() %>%
unname()
}
}
return(cov_accum)
}
cov.loss <- function(tree, mrca_node, alpha, tip){
if (mrca_node == tip){
cov_loss_rate = 0
} else {
nodes <- nodesAlongLineage(tree, mrca_node, tip)
nodes <- head(nodes, n = -1)
edges <- which(tree$edge[,2] %in% nodes) # from root to mcra_node
subedge_lengths <- rev(unlist(lapply(edges, function(i) tree$maps[[i]]))) # from mcra_node to root
subedge_lengths <- tibble(time_span = subedge_lengths,
alpha = alpha[names(subedge_lengths)])
cov_loss_rate = subedge_lengths %>%
mutate(sum1 = -1 * alpha * time_span) %>%
reframe(sum_final = sum(sum1))
}
return(cov_loss_rate)
}
vcv.pairwise <- function(tree, alpha, sigma2, tip1, tip2){
mrca_node <- ape::mrca(tree)[tip1, tip2]
cov_accum = cov.accum(tree, mrca_node, alpha, sigma2)
cov_loss1 = cov.loss(tree, mrca_node, alpha, tip1)
cov_loss2 = cov.loss(tree, mrca_node, alpha, tip2)
cov = cov_accum * exp(cov_loss1 + cov_loss2)
return(unlist(unname(cov)))
}
vcv.matrix <- function(tree, alpha, sigma2){
ntip <- length(tree$tip.label)
V <- matrix(nrow = ntip, ncol = ntip)
j = ntip
while (j != 0){
for (i in 1:ntip){
V[i,j] <- vcv.pairwise(tree, alpha, sigma2, i, j)
V[j,i] <- V[i,j]
}
j = j-1
}
colnames(V) <- tree$tip.label
rownames(V) <- tree$tip.label
return(V)
}
sd_logL_vcv <- function(tree, continuousChar, alpha, sigma2, theta){
alpha = alpha[sort(names(alpha))]
sigma2 = sigma2[sort(names(sigma2))]
theta = theta[sort(names(theta))]
theta = as.matrix(theta, nrow = 3)
ntip <- length(tree$tip.label)
V = vcv.matrix(tree, alpha, sigma2)
W = weight.matrix(tree, alpha)
C = chol(V) # upper triangular matrix
L = t(C) # lower triangular matrix
log_det_V = 0
for (i in 1:ntip){
log_det_V = log_det_V + log(L[i,i])
}
log_det_V = log_det_V * 2.0 # equals to julia implementation to 12 sig. fig.
y = NULL
for (species in tree$tip.label){
y[species] = as.numeric(continuousChar[species])
}
# inverse of L
r = solve(L) %*% y - solve(L) %*% W %*% theta # what does de-correlated residuals mean?
# res = - (n/2) * log(2*pi) - 0.5 * log_det_V - 0.5 * dot(r, r)
#     = exp(-n/2)^(2*pi) * exp(-0.5)^det_V * exp(-0.5)^dot(r, r) ?
res = 0.0
res = res - (ntip/2) * log(2*pi)
res = res - 0.5 * log_det_V
res = res - 0.5 * dot(r, r) # is it dot product? what is dot product of r?
return(res)
}
# From slouch
data("artiodactyla")
data("neocortex")
neocortex <- neocortex[match(artiodactyla$tip.label, neocortex$species), ]
# Example
tree <- artiodactyla
brain <- neocortex$brain_mass_g_log_mean
names(brain) <- tree$tip.label
# Example
diet <- as.character(neocortex$diet)
names(diet) <- neocortex$species
discrete_states <- unique(diet)
set.seed(123)
tree <- make.simmap(artiodactyla, diet)
plot(tree)
#alpha = c(rep(rgamma(n=1, shape=1, rate=10), 3))
alpha = rgamma(n=3, shape=1, rate=10)
names(alpha) = discrete_states
#sigma2 = c(rep(rgamma(n=1, shape=2, rate=10), 3))
sigma2 = rgamma(n=3, shape=2, rate=10)
names(sigma2) = discrete_states
#theta = c(rep(rnorm(1, mean = 0, sd = 3), 3))
theta = rnorm(3, mean = 0, sd = 3)
names(theta) = discrete_states
likelihood_difference = c()
bar = txtProgressBar(style=3, width=40)
for (i in 1:100){
alpha = rgamma(n=3, shape=1, rate=10)
sigma2 = rgamma(n=3, shape=2, rate=10)
theta = rnorm(3, mean = 0, sd = 3)
names(alpha) = discrete_states
names(sigma2) = discrete_states
names(theta) = discrete_states
l2 = sd_logL_pruning(tree, brain, alpha, sigma2, theta)
l1 = sd_logL_vcv(tree, brain, alpha, sigma2, theta)
likelihood_difference[i] = abs(l1 - l2)
setTxtProgressBar(bar, i / 100)
}
hist(log(likelihood_difference), breaks = 20)
ggplot(as.data.frame(likelihood_difference)) +
geom_point(aes(x = 1:50, y = likelihood_difference))
ggplot(as.data.frame(likelihood_difference)) +
geom_point(aes(x = 1:100, y = log(likelihood_difference)))
ggplot(as.data.frame(likelihood_difference)) +
geom_histogram(aes(y = log(likelihood_difference)))
ggplot(as.data.frame(likelihood_difference)) +
geom_histogram(aes(log(likelihood_difference)))
ggplot(as.data.frame(likelihood_difference)) +
geom_histogram(aes(likelihood_difference))
ggplot(as.data.frame(likelihood_difference)) +
geom_boxplot(aes(likelihood_difference))
save(plt, "Desktop/likelihood_difference_box.pdf")
plt <- ggplot(as.data.frame(likelihood_difference)) +
geom_boxplot(aes(likelihood_difference))
save(plt, "Desktop/likelihood_difference_box.pdf")
ggsave(plt, "Desktop/likelihood_difference_box.pdf")
?ggsave
ggplot(as.data.frame(likelihood_difference)) +
geom_boxplot(aes(likelihood_difference))
ggsave("Desktop/likelihood_difference_box.pdf")
ggplot(as.data.frame(likelihood_difference)) +
geom_histogram(aes(likelihood_difference))
ggsave("Desktop/likelihood_difference_box.pdf")
library(phytools)
read.simmap("Desktop/statedependentOU/test_simmap_write.txt")
read.simmap("Desktop/statedependentOU/test_simmap_write.txt", format = "phylip")
remotes::install_github("thej022214/OUwie")
library(OUwie)
data(tworegime)
# simulate an OUM model
Q <- matrix(c(-1,1,1,-1), 2, 2)
root.freqs <- c(1, 0)
alpha <- c(2, 2)
sigma.sq <- c(1,1)
theta0 <- 5
theta <- c(5, 10)
simulated_data <- hOUwie.sim(tree, Q, root.freqs, alpha, sigma.sq, theta0, theta)
plot(simulated_data$simmap)
hOUwie.fixed(simmaps=simulated_data$simmap,
data=simulated_data$data,
rate.cat=1,
discrete_model="SYM",
continuous_model"OUMVA",
getOUParamStructure(model="OUMVA",nObsState = 2, rate.cat = 1)
hOUwie.fixed(simmaps=simulated_data$simmap,
data=simulated_data$data,
rate.cat=1,
discrete_model="SYM",
continuous_model=getOUParamStructure(model="OUMVA",nObsState = 2, rate.cat = 1),
root.p              = 5)
simulated_data$simmap
getOUParamStructure(model="OUMVA",nObsState = 2, rate.cat = 1)
hOUwie.fixed(simmaps=simulated_data$simmap,
data=simulated_data$data,
rate.cat=1,
discrete_model=matrix(c(-1,1,1,-1), 2, 2),
continuous_model=getOUParamStructure(model="OUMVA",nObsState = 2, rate.cat = 1),
root.p              = 5)
tree <- simulated_data$simmap
data <- simulated_data$data
hOUwie.fixed(simmaps=tree,
data=data,
rate.cat=1,
discrete_model=matrix(c(-1,1,1,-1), 2, 2),
continuous_model=getOUParamStructure(model="OUMVA",nObsState = 2, rate.cat = 1),
root.p              = 5)
read.simmap()
phytools::read.simmap()
library(slouch)
load(artiodactyl)
load(artiodactyla)
load("artiodactyla")
data("artiodactyla")
library(ape)
library(phytools)
write.tree(artiodactyla, "Desktop/statedependentOU/data/1_validation/artiodactyla/artiodactyla.tree")
library(ape)
t <- read.tree("Desktop/statedependentOU/data/3_empirical/mammal_2022.tree")
t <- read.tree("Desktop/statedependentOU/data/3_empirical/mammal_2019.trees")[1]
t <- read.simmap("Desktop/statedependentOU/data/3_empirical/mammal_2022.tree", format="phylip")
library(phytools)
t <- read.simmap("Desktop/statedependentOU/data/3_empirical/mammal_2022.tree", format="phylip")
library(phytools)
?make.simmap
library(phytools)
read.simmap("Desktop/statedependentOU/output/3_empirical/mammal_diet/02_state-dependentBM.tre")
tree <- read.simmap("Desktop/statedependentOU/output/3_empirical/mammal_diet/02_state-dependentBM.tre", format = "phylip")
load("Desktop/statedependentOU/data/2_simulation/convergence/pars_sd.Rda")
View(pars_sd)
load("Desktop/statedependentOU/data/2_simulation/convergence/pars_stateless.Rda")
View(pars_sd)
View(pars_stateless)
setwd("Desktop/statedependentOU/")
load("data/2_simulation/convergence/pars_sd.Rda")
load("data/2_simulation/convergence/pars_stateless.Rda")
pars <- c("theta", "alpha", "sigma2", "rho", "stv", "halflife")
dir_in = "output/2_simulation/convergence/logs/"
dir_out = "figures/2_simulation/convergence/"
# Plot set 2
num_sim = 3
sdORsx   = c("sd", "stateless")
link = c("linkedPrior", "unlinkedPrior")
grid = expand.grid(num_sim=1:num_sim, sdORsx=sdORsx, link=link, stringsAsFactors=FALSE)
for (i in 1:nrow(grid)){
this_row = grid[i,]
this_num_sim = this_row[[1]]
this_state = this_row[[2]]
this_link = this_row[[3]]
this_combo = paste0(c("sim", this_num_sim, this_state, this_link, "set_2"), collapse = "_")
read_run1 <- paste0(dir_in, paste0(c("sim", this_num_sim, this_state, "run_1_2mv", this_link), collapse = "_"), ".log")
read_run2 <- paste0(dir_in, paste0(c("sim", this_num_sim, this_state, "run_2_2mv", this_link), collapse = "_"), ".log")
if ( isFALSE(file.exists(read_run1)) | isFALSE(file.exists(read_run2))) {
next
}
df <- readTrace(path = read_run1, burnin = 0.1)
df[[2]] <- readTrace(path = read_run2, burnin = 0.1)[[1]]
df[[1]]$run <- "run 1"
df[[2]]$run <- "run 2"
dfx <- bind_rows(df[[1]], df[[2]]) %>%
select(-starts_with(c("theta_compare", "alpha_compare", "rho_compare", "sigma2_compare", "halflife_compare", "stv_compare")))
for (par in pars){
if (this_state == "sd"){
dfs <- process_par(par, "sd", this_num_sim)
} else {
dfs <- process_par(par, "stateless", this_num_sim)
}
df_par <- dfs[[1]]
df_par_meantrue <- dfs[[2]]
this_combo_par <- paste0(this_combo, "_", par)
plot_par(par_name=par, df_par, df_par_meantrue, dir_out, this_combo_par)
}
}
i=1
this_row = grid[i,]
this_num_sim = this_row[[1]]
this_state = this_row[[2]]
this_link = this_row[[3]]
this_combo = paste0(c("sim", this_num_sim, this_state, this_link, "set_2"), collapse = "_")
this_combo
for (i in 1:nrow(grid)){
this_row = grid[i,]
this_num_sim = this_row[[1]]
this_state = this_row[[2]]
this_link = this_row[[3]]
this_combo = paste0(c("sim", this_num_sim, this_state, this_link, "set_2"), collapse = "_")
read_run1 <- paste0(dir_in, paste0(c("sim", this_num_sim, this_state, "run_1_2mv", this_link, "set_2"), collapse = "_"), ".log")
read_run2 <- paste0(dir_in, paste0(c("sim", this_num_sim, this_state, "run_2_2mv", this_link, "set_2"), collapse = "_"), ".log")
if ( isFALSE(file.exists(read_run1)) | isFALSE(file.exists(read_run2))) {
next
}
df <- readTrace(path = read_run1, burnin = 0.1)
df[[2]] <- readTrace(path = read_run2, burnin = 0.1)[[1]]
df[[1]]$run <- "run 1"
df[[2]]$run <- "run 2"
dfx <- bind_rows(df[[1]], df[[2]]) %>%
select(-starts_with(c("theta_compare", "alpha_compare", "rho_compare", "sigma2_compare", "halflife_compare", "stv_compare")))
for (par in pars){
if (this_state == "sd"){
dfs <- process_par(par, "sd", this_num_sim)
} else {
dfs <- process_par(par, "stateless", this_num_sim)
}
df_par <- dfs[[1]]
df_par_meantrue <- dfs[[2]]
this_combo_par <- paste0(this_combo, "_", par)
plot_par(par_name=par, df_par, df_par_meantrue, dir_out, this_combo_par)
}
}
library(RevGadgets)
library(tidyverse)
library(grid)
process_par <- function(par, sdORsx, num_sim){
df_par <- pivot_longer(dfx, starts_with(par), names_to = "par")
df_mean_true <- df_par %>%
group_by(par, run) %>%
summarize(mean = mean(value))
par_0 <- paste0(par, "_0")
par_1 <- paste0(par, "_1")
if (sdORsx == "sd"){
df_mean_true$true <- c(rep(pars_sd[[par_0]][num_sim], 2), rep(pars_sd[[par_1]][num_sim], 2))
} else {
df_mean_true$true <- c(rep(pars_stateless[[par_0]][num_sim], 4))
}
return(list(df_par, df_mean_true))
}
plot_par <- function(par_name, df, mean_true, dir_out, combo){
p <- ggplot(df, aes(x = value, fill = par)) +
geom_density(aes(x = value, after_stat(density), fill=run), color = "black", alpha = 0.4) +
theme_classic() +
theme(legend.position = "inside",
legend.position.inside = c(0.7, 0.8)) +
facet_grid(cols = vars(par), scales = "free_y") +
geom_vline(mapping = aes(xintercept = mean), data = mean_true, linetype = "dashed", color = "darkgrey") +
geom_vline(mapping = aes(xintercept = true), data = mean_true, linetype = "dashed", color = "brown") +
#scale_x_log10(breaks = c(p_breaks[[par_name]])) +
#coord_cartesian(xlim = p_xlim[[par_name]]) +
labs(x = combo, y = "posterior density")
filename <- paste0(dir_out, combo, ".pdf")
ggsave(filename, p, width = 200, height = 120, units = "mm")
}
for (i in 1:nrow(grid)){
this_row = grid[i,]
this_num_sim = this_row[[1]]
this_state = this_row[[2]]
this_link = this_row[[3]]
this_combo = paste0(c("sim", this_num_sim, this_state, this_link, "set_2"), collapse = "_")
read_run1 <- paste0(dir_in, paste0(c("sim", this_num_sim, this_state, "run_1_2mv", this_link, "set_2"), collapse = "_"), ".log")
read_run2 <- paste0(dir_in, paste0(c("sim", this_num_sim, this_state, "run_2_2mv", this_link, "set_2"), collapse = "_"), ".log")
if ( isFALSE(file.exists(read_run1)) | isFALSE(file.exists(read_run2))) {
next
}
df <- readTrace(path = read_run1, burnin = 0.1)
df[[2]] <- readTrace(path = read_run2, burnin = 0.1)[[1]]
df[[1]]$run <- "run 1"
df[[2]]$run <- "run 2"
dfx <- bind_rows(df[[1]], df[[2]]) %>%
select(-starts_with(c("theta_compare", "alpha_compare", "rho_compare", "sigma2_compare", "halflife_compare", "stv_compare")))
for (par in pars){
if (this_state == "sd"){
dfs <- process_par(par, "sd", this_num_sim)
} else {
dfs <- process_par(par, "stateless", this_num_sim)
}
df_par <- dfs[[1]]
df_par_meantrue <- dfs[[2]]
this_combo_par <- paste0(this_combo, "_", par)
plot_par(par_name=par, df_par, df_par_meantrue, dir_out, this_combo_par)
}
}
process_par <- function(par, sdORsx, num_sim){
df_par <- pivot_longer(dfx, starts_with(par), names_to = "par")
df_mean_true <- df_par %>%
group_by(par, run) %>%
summarize(mean = median(value))
par_0 <- paste0(par, "_0")
par_1 <- paste0(par, "_1")
if (sdORsx == "sd"){
df_mean_true$true <- c(rep(pars_sd[[par_0]][num_sim], 2), rep(pars_sd[[par_1]][num_sim], 2))
} else {
df_mean_true$true <- c(rep(pars_stateless[[par_0]][num_sim], 4))
}
return(list(df_par, df_mean_true))
}
for (i in 1:nrow(grid)){
this_row = grid[i,]
this_num_sim = this_row[[1]]
this_state = this_row[[2]]
this_link = this_row[[3]]
this_combo = paste0(c("sim", this_num_sim, this_state, this_link, "set_2"), collapse = "_")
read_run1 <- paste0(dir_in, paste0(c("sim", this_num_sim, this_state, "run_1_2mv", this_link, "set_2"), collapse = "_"), ".log")
read_run2 <- paste0(dir_in, paste0(c("sim", this_num_sim, this_state, "run_2_2mv", this_link, "set_2"), collapse = "_"), ".log")
if ( isFALSE(file.exists(read_run1)) | isFALSE(file.exists(read_run2))) {
next
}
df <- readTrace(path = read_run1, burnin = 0.1)
df[[2]] <- readTrace(path = read_run2, burnin = 0.1)[[1]]
df[[1]]$run <- "run 1"
df[[2]]$run <- "run 2"
dfx <- bind_rows(df[[1]], df[[2]]) %>%
select(-starts_with(c("theta_compare", "alpha_compare", "rho_compare", "sigma2_compare", "halflife_compare", "stv_compare")))
for (par in pars){
if (this_state == "sd"){
dfs <- process_par(par, "sd", this_num_sim)
} else {
dfs <- process_par(par, "stateless", this_num_sim)
}
df_par <- dfs[[1]]
df_par_meantrue <- dfs[[2]]
this_combo_par <- paste0(this_combo, "_", par)
plot_par(par_name=par, df_par, df_par_meantrue, dir_out, this_combo_par)
}
}
