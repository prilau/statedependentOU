facet_grid(rows = vars(stv), col = vars(theta)) +
ggtitle("Power of alpha")
p1c <- ggplot(grid, aes(x=dalpha, y=prob)) +
geom_point(aes(x = abs(dalpha), y=prob), color="grey", alpha=0.5) +
#geom_point(data=med_prob, aes(x = bin, y=med_prob, group = combo), color="black") +
#geom_line(data=med_prob, aes(x = bin, y=med_prob, group=combo), color="black", linetype="dashed") +
geom_step(aes(x=abs(dalpha), y=prob), direction="vh")+
theme_bw() +
labs(x = "alpha1 - alpha2", y = "P(alpha1 > alpha2)") +
geom_hline(mapping = aes(yintercept = upper), data=thresholds, linetype = "dashed", color = "brown") +
geom_hline(mapping = aes(yintercept = lower), data=thresholds, linetype = "dashed", color = "brown") +
ylim(c(0, 1)) +
facet_grid(rows = vars(stv), col = vars(theta)) +
ggtitle("Power of alpha")
p1c
p1c <- ggplot(grid, aes(x=dalpha, y=prob)) +
geom_point(aes(x = abs(dalpha), y=prob), color="grey", alpha=0.5) +
#geom_point(data=med_prob, aes(x = bin, y=med_prob, group = combo), color="black") +
#geom_line(data=med_prob, aes(x = bin, y=med_prob, group=combo), color="black", linetype="dashed") +
geom_step(aes(x=abs(dalpha), y=prob), direction="hv")+
theme_bw() +
labs(x = "alpha1 - alpha2", y = "P(alpha1 > alpha2)") +
geom_hline(mapping = aes(yintercept = upper), data=thresholds, linetype = "dashed", color = "brown") +
geom_hline(mapping = aes(yintercept = lower), data=thresholds, linetype = "dashed", color = "brown") +
ylim(c(0, 1)) +
facet_grid(rows = vars(stv), col = vars(theta)) +
ggtitle("Power of alpha")
p1c
p1c <- ggplot(grid, aes(x=dalpha, y=prob)) +
geom_point(aes(x = abs(dalpha), y=prob), color="grey", alpha=0.5) +
#geom_point(data=med_prob, aes(x = bin, y=med_prob, group = combo), color="black") +
#geom_line(data=med_prob, aes(x = bin, y=med_prob, group=combo), color="black", linetype="dashed") +
geom_step(aes(x=abs(dalpha), y=prob))+
theme_bw() +
labs(x = "alpha1 - alpha2", y = "P(alpha1 > alpha2)") +
geom_hline(mapping = aes(yintercept = upper), data=thresholds, linetype = "dashed", color = "brown") +
geom_hline(mapping = aes(yintercept = lower), data=thresholds, linetype = "dashed", color = "brown") +
ylim(c(0, 1)) +
facet_grid(rows = vars(stv), col = vars(theta)) +
ggtitle("Power of alpha")
grid <- grid %>%
mutate(ABSdalpha = abs(dalpha))
p1c <- ggplot(grid, aes(x=dalpha, y=prob)) +
geom_point(aes(x = abs(dalpha), y=prob), color="grey", alpha=0.5) +
#geom_point(data=med_prob, aes(x = bin, y=med_prob, group = combo), color="black") +
#geom_line(data=med_prob, aes(x = bin, y=med_prob, group=combo), color="black", linetype="dashed") +
geom_step(aes(x=ABSdalpha[seq(1, length(ABSdalpha), 10)]), y=prob[seq(1, length(ABSdalpha), 10)]))+
p1c <- ggplot(grid, aes(x=dalpha, y=prob)) +
geom_point(aes(x = abs(dalpha), y=prob), color="grey", alpha=0.5) +
#geom_point(data=med_prob, aes(x = bin, y=med_prob, group = combo), color="black") +
#geom_line(data=med_prob, aes(x = bin, y=med_prob, group=combo), color="black", linetype="dashed") +
geom_step(aes(x=ABSdalpha[seq(1, length(ABSdalpha), 10)]), y=prob[seq(1, length(ABSdalpha), 10)])+
theme_bw() +
labs(x = "alpha1 - alpha2", y = "P(alpha1 > alpha2)") +
geom_hline(mapping = aes(yintercept = upper), data=thresholds, linetype = "dashed", color = "brown") +
geom_hline(mapping = aes(yintercept = lower), data=thresholds, linetype = "dashed", color = "brown") +
ylim(c(0, 1)) +
facet_grid(rows = vars(stv), col = vars(theta)) +
ggtitle("Power of alpha")
p1c <- ggplot(grid, aes(x=dalpha, y=prob)) +
geom_point(aes(x = abs(dalpha), y=prob), color="grey", alpha=0.5) +
#geom_point(data=med_prob, aes(x = bin, y=med_prob, group = combo), color="black") +
#geom_line(data=med_prob, aes(x = bin, y=med_prob, group=combo), color="black", linetype="dashed") +
geom_step(aes(x=ABSdalpha[seq(1, length(ABSdalpha), 10)], y=prob[seq(1, length(ABSdalpha), 10)]))+
theme_bw() +
labs(x = "alpha1 - alpha2", y = "P(alpha1 > alpha2)") +
geom_hline(mapping = aes(yintercept = upper), data=thresholds, linetype = "dashed", color = "brown") +
geom_hline(mapping = aes(yintercept = lower), data=thresholds, linetype = "dashed", color = "brown") +
ylim(c(0, 1)) +
facet_grid(rows = vars(stv), col = vars(theta)) +
ggtitle("Power of alpha")
p1c
ggplot()+geom_step(aes(x=ABSdalpha[seq(1, length(ABSdalpha), 10)], y=prob[seq(1, length(ABSdalpha), 10)]))
ggplot(grid)+geom_step(aes(x=ABSdalpha[seq(1, length(ABSdalpha), 10)], y=prob[seq(1, length(ABSdalpha), 10)]))
ggplot(grid[seq(1, length(ABSdalpha), 10)])+geom_step(aes(x=ABSdalpha[seq(1, length(ABSdalpha), 10)], y=prob[seq(1, length(ABSdalpha), 10)]))
ggplot(grid[seq(1, length(grid$ABSdalpha), 10)])+geom_step(aes(x=ABSdalpha[seq(1, length(ABSdalpha), 10)], y=prob[seq(1, length(ABSdalpha), 10)]))
grid[seq(1, length(grid$ABSdalpha), 10)]
ggplot(grid[seq(1, length(grid$ABSdalpha), 10)],)+geom_step(aes(x=ABSdalpha[seq(1, length(ABSdalpha), 10)], y=prob[seq(1, length(ABSdalpha), 10)]))
ggplot(grid[seq(1, length(grid$ABSdalpha), 10),])+geom_step(aes(x=ABSdalpha[seq(1, length(ABSdalpha), 10)], y=prob[seq(1, length(ABSdalpha), 10)]))
n <- 2L
n
n=2
n
tt0 <- seq(min(gridsort$dalpha), max(gridsort$dalpha), by = 0.1)
tt1 <- seq(min(gridsort$dalpha), max(gridsort$dalpha), by = 1)
tt05 <- seq(min(gridsort$dalpha), max(gridsort$dalpha), by = 0.5)
plot(sfun1, xval = tt0, col.hor = "black")
plot(sfun1, xval = tt05, col.hor = "red")
plot(sfun1, xval = tt05, col.hor = "red", col.vert = "white")
plot(sfun1, xval = tt05, col.hor = "red")
plot(sfun1, xval = tt0, col.hor = "black")
plot(sfun1, xval = tt05, col.hor = "red", add = T)
plot(sfun1, xval = tt0, col.hor = "blue")
plot(sfun1, xval = tt0, col.hor = "blue", col.vert = "white")
plot(sfun1, xval = tt0, col.hor = "blue", col.vert = "white", lty = 3)
plot(sfun1, xval = tt0, col.hor = "blue", col.vert = "white", lty = 30)
plot(sfun1, xval = tt0, col.hor = "blue", col.vert = "white", lty = 3000)
plot(sfun1, xval = tt0, col.hor = "blue", col.vert = "white", lty = a)
plot(sfun1, xval = tt0, col.hor = "blue", col.vert = "white", lty = 10)
plot(sfun1, xval = tt0, col.hor = "blue", col.vert = "white")
plot(sfun1, xval = tt05, col.hor = "red", add = T)
plot(sfun1, xval = tt05, col.hor = "red", col.vert = "white", add = T)
plot(sfun1, xval = tt0, col.hor = "blue", col.vert = "white")
plot(sfun1, xval = tt05, col.hor = "red", add = T)
plot(sfun1, xval = tt0, col.hor = "blue", col.vert = "white")
plot(sfun1, xval = tt05, col.hor = "red", col.vert = "white", add = T)
plot(sfun1, xval = tt1, col.hor = "green", col.vert = "white", add = T)
sfun1  <- stepfun(x, y, f=1)
plot(sfun1, xval = tt0, col.hor = "blue", col.vert = "white")
plot(sfun1, xval = tt05, col.hor = "red", col.vert = "white", add = T)
plot(sfun1, xval = tt1, col.hor = "green", col.vert = "white", add = T)
plot(sfun1, xval = tt0, col.hor = "blue")
op <- par(mfrow = c(2,2))
plot(sfun1); plot(sfun1, xval = tt0, add = TRUE, col.hor = "bisque")
plot(sfun1);plot(sfun1, xval = tt05, add = TRUE, col = "orange") # all colors
op <- par(mfrow = c(2,2))
plot(sfun1); plot(sfun1, xval = tt0, add = TRUE, col.hor = "red")
plot(sfun1);plot(sfun1, xval = tt05, add = TRUE, col = "red") # all colors
plot(sfun1);lines(sfun1, xval = tt1, col.hor = "coral")
op <- par(mfrow = c(2,2))
plot(sfun1, xval = tt0, add = TRUE, col.hor = "red")
plot(sfun1, xval = tt05, add = TRUE, col = "red") # all colors
op <- par(mfrow = c(2,2))
plot(sfun1, xval = tt0, add = TRUE, col.hor = "red")
op <- par(mfrow = c(2,2))
plot(sfun1, xval = tt0, col.hor = "red")
plot(sfun1, xval = tt05, add = TRUE, col = "red")
op <- par(mfrow = c(2,2))
plot(sfun1, xval = tt0, col.hor = "red", add = TRUE)
par(op)
op
op <- par(mfrow = c(2,2))
plot(sfun1, xval = tt0, col.hor = "red", add = TRUE)
plot(sfun1, xval = tt0, col.hor = "red", add = TRUE)
plot(sfun1, xval = tt0, col.hor = "red", add = TRUE)
op <- par(mfrow = c(2,2))
plot(sfun1, xval = tt0, col.hor = "red", add = TRUE)
plot(sfun1, xval = tt0, col.hor = "red")
plot(sfun1, xval = tt0, col.hor = "blue")
op <- par(mfrow = c(2,2))
plot(sfun1, xval = tt0, col.hor = "red")
plot(sfun1, xval = tt05, col.hor = "blue")
plot(sfun1, xval = tt1, col.hor = "green")
tt02 <- seq(min(gridsort$dalpha), max(gridsort$dalpha), by = 0.2)
plot(sfun1, xval = tt0, col.hor = "red");  plot(sfun1, xval = tt02, col.hor = "orange"); plot(sfun1, xval = tt05, col.hor = "blue");plot(sfun1, xval = tt1, col.hor = "green")
op <- par(mfrow = c(2,2))
plot(sfun1, xval = tt0, col.hor = "red");  plot(sfun1, xval = tt02, col.hor = "orange"); plot(sfun1, xval = tt05, col.hor = "blue");plot(sfun1, xval = tt1, col.hor = "green")
plot(sfun1, xval = tt0, col.hor = "red");
plot(sfun1, xval = tt02, col.hor = "orange");
plot(sfun1, xval = tt05, col.hor = "blue");
plot(sfun1, xval = tt1, col.hor = "green")
grid_sort_d = grid[order(abs(grid$dhalflife)),]
grid=gridall
# remove the rows without input in prob
# this row is used when not all runs have been completed but you want plot a figure
grid <- grid  %>%
filter(!is.na(prob))
grid <- grid %>%
mutate(prob = ifelse(dhalflife > 0, prob, 1-prob),
abs_halflife = abs(dhalflife))
hist(grid$abs_halflife)
hist(grid$prob)
grid=gridall
# remove the rows without input in prob
# this row is used when not all runs have been completed but you want plot a figure
grid <- grid  %>%
filter(!is.na(prob))
grid <- grid %>%
mutate(prob = ifelse(dhalflife > 0, 1-prob, prob),
abs_halflife = abs(dhalflife))
hist(grid$prob)
grid_sort_d = grid[order(grid$abs_dhalflife),]
grid_sort_d = grid[order(grid$abs_halflife),]
x = grid_sort_d$abs_halflife[2:nrow(grid_sort_d))]
x = grid_sort_d$abs_halflife[2:nrow(grid_sort_d)]
y = grid_sort_d$prob
sfun1  <- stepfun(x, y, f=0)
tt01 <- seq(min(gridsort$dhalflife), max(gridsort$dhalflife), by = 0.1)
tt02 <- seq(min(gridsort$dhalflife), max(gridsort$dhalflife), by = 0.2)
tt05 <- seq(min(gridsort$dhalflife), max(gridsort$dhalflife), by = 0.5)
tt1 <- seq(min(gridsort$dhalflife), max(gridsort$dhalflife), by = 1)
op <- par(mfrow = c(2,2))
plot(sfun1, xval = tt0, col.hor = "red");
plot(sfun1, xval = tt02, col.hor = "orange");
plot(sfun1, xval = tt05, col.hor = "blue");
plot(sfun1, xval = tt1, col.hor = "green")
tt01
tt01 <- seq(min(gridsort$abs_halflife), max(gridsort$abs_halflife), by = 0.1)
tt02 <- seq(min(gridsort$abs_halflife), max(gridsort$abs_halflife), by = 0.2)
tt05 <- seq(min(gridsort$abs_halflife), max(gridsort$abs_halflife), by = 0.5)
tt01 <- seq(min(gridsort_d$abs_halflife), max(gridsort_d$abs_halflife), by = 0.1)
sfun_d  <- stepfun(x, y, f=0)
tt01 <- seq(min(grid_sort_d$abs_halflife), max(grid_sort_d$abs_halflife), by = 0.1)
tt02 <- seq(min(grid_sort_d$abs_halflife), max(grid_sort_d$abs_halflife), by = 0.2)
tt05 <- seq(min(grid_sort_d$abs_halflife), max(grid_sort_d$abs_halflife), by = 0.5)
tt1 <- seq(min(grid_sort_d$abs_halflife), max(grid_sort_d$abs_halflife), by = 1)
op <- par(mfrow = c(2,2))
plot(sfun_d, xval = tt0, col.hor = "red");
plot(sfun_d, xval = tt02, col.hor = "orange");
plot(sfun_d, xval = tt05, col.hor = "blue");
plot(sfun_d, xval = tt1, col.hor = "green")
max(grid_sort_d$abs_halflife)
grid=gridall
# remove the rows without input in prob
# this row is used when not all runs have been completed but you want plot a figure
grid <- grid  %>%
filter(!is.na(prob))
grid <- grid %>%
mutate(prob = ifelse(dhalflife > 0, 1-prob, prob),
abs_dh = abs(dhalflife))
max(grid_sort_d$abs_dh)
grid_sort_d = grid[order(grid$abs_dh),]
max(grid_sort_d$abs_dh)
min(grid_sort_d$abs_dh)
tt01 <- seq(min(grid_sort_d$abs_dh), max(grid_sort_d$abs_dh), by = 0.1)
tt01
tt02 <- seq(min(grid_sort_d$abs_dh), max(grid_sort_d$abs_dh), by = 0.2)
tt02
tt05 <- seq(min(grid_sort_d$abs_dh), max(grid_sort_d$abs_dh), by = 0.5)
tt05
tt0005 <- seq(min(grid_sort_d$abs_dh), max(grid_sort_d$abs_dh), by = 0.005)
tt0005
tt001 <- seq(min(grid_sort_d$abs_dh), max(grid_sort_d$abs_dh), by = 0.01)
tt001
tt005 <- seq(min(grid_sort_d$abs_dh), max(grid_sort_d$abs_dh), by = 0.05)
tt005
tt01 <- seq(min(grid_sort_d$abs_dh), max(grid_sort_d$abs_dh), by = 0.1)
tt01
tt001 <- seq(min(grid_sort_d$abs_dh), max(grid_sort_d$abs_dh), by = 0.01)
tt005 <- seq(min(grid_sort_d$abs_dh), max(grid_sort_d$abs_dh), by = 0.05)
tt01 <- seq(min(grid_sort_d$abs_dh), max(grid_sort_d$abs_dh), by = 0.1)
op <- par(mfrow = c(1,3))
plot(sfun_d, xval = tt001, col.hor = "red");
tt001 <- seq(min(grid_sort_d$abs_dh), max(grid_sort_d$abs_dh), by = 0.01)
tt005 <- seq(min(grid_sort_d$abs_dh), max(grid_sort_d$abs_dh), by = 0.05)
tt01 <- seq(min(grid_sort_d$abs_dh), max(grid_sort_d$abs_dh), by = 0.1)
op <- par(mfrow = c(3,1))
plot(sfun_d, xval = tt001, col.hor = "red");
plot(sfun_d, xval = tt005, col.hor = "orange");
plot(sfun_d, xval = tt01, col.hor = "blue");
grid_sort_r = grid[order(grid$rhalflife),]
grid_sort_r = grid[order(grid$rhalflife),]
x = grid_sort_r$rhalflife[2:nrow(grid_sort_d)]
x = grid_sort_r$rhalflife[2:nrow(grid_sort_r)]
y = grid_sort_r$prob
sfun_r  <- stepfun(x, y, f=0)
min(grid_sort_d$abs_dh)
max(grid_sort_d$abs_dh)
View(grid_sort_d)
max(grid_sort_r$rhalflife)
grid_sort_r$rhalflife)
min(grid_sort_r$rhalflife)
grid=gridall
# remove the rows without input in prob
# this row is used when not all runs have been completed but you want plot a figure
grid <- grid  %>%
filter(!is.na(prob))
grid_sort_d <- grid %>%
mutate(prob = ifelse(dhalflife > 0, 1-prob, prob),
abs_dh = abs(dhalflife),) %>%
order(abs_dh)
grid_sort_d <- grid %>%
mutate(prob = ifelse(dhalflife > 0, 1-prob, prob),
abs_dh = abs(dhalflife)) %>%
order(abs_dh)
grid %>%
mutate(prob = ifelse(dhalflife > 0, 1-prob, prob),
abs_dh = abs(dhalflife))
grid_sort_d <- grid %>%
mutate(prob = ifelse(dhalflife > 0, 1-prob, prob),
abs_dh = abs(dhalflife))
grid_sort_d = grid_sort_d[order(grid$abs_dh),]
grid_sort_d = grid_sort_d[order(grid_sort_d$abs_dh),]
grid_sort_d
hist(grid_sort_d$prob)
grid_sort_r <- grid %>%
mutate(prob = ifelse(rhalflife > 1, 1-prob, prob),
rh_ge1 = ifelse(rhalflife > 1, 1/rhalflife, rhalflife))
hist(grid_sort_r$prob)
grid_sort_r = grid[order(grid$rh_ge1),]
x = grid_sort_r$rh_ge1[2:nrow(grid_sort_r)]
y = grid_sort_r$prob
sfun_r  <- stepfun(x, y, f=0)
grid_sort_r$rh_ge1
grid_sort_r = grid[order(grid_sort_r$rh_ge1),]
x = grid_sort_r$rh_ge1[2:nrow(grid_sort_r)]
y = grid_sort_r$prob
sfun_r  <- stepfun(x, y, f=0)
grid_sort_r <- grid %>%
mutate(prob = ifelse(rhalflife > 1, 1-prob, prob),
rh_ge1 = ifelse(rhalflife > 1, 1/rhalflife, rhalflife))
grid_sort_r = grid[order(grid_sort_r$rh_ge1),]
grid_sort_r
grid %>%
mutate(prob = ifelse(rhalflife > 1, 1-prob, prob),
rh_ge1 = ifelse(rhalflife > 1, 1/rhalflife, rhalflife))
grid_sort_r <- grid %>%
mutate(prob = ifelse(rhalflife > 1, 1-prob, prob),
rh_ge1 = ifelse(rhalflife > 1, 1/rhalflife, rhalflife))
grid_sort_r
grid_sort_r = grid[order(grid_sort_r$rh_ge1),]
grid_sort_r
grid_sort_r = grid_sort_r[order(grid_sort_r$rh_ge1),]
grid_sort_r <- grid %>%
mutate(prob = ifelse(rhalflife > 1, 1-prob, prob),
rh_ge1 = ifelse(rhalflife > 1, 1/rhalflife, rhalflife))
grid_sort_r = grid_sort_r[order(grid_sort_r$rh_ge1),]
x = grid_sort_r$rh_ge1[2:nrow(grid_sort_r)]
y = grid_sort_r$prob
sfun_r  <- stepfun(x, y, f=0)
max(grid_sort_r$rh_ge1)
min(grid_sort_r$rh_ge1)
min(grid_sort_r$rh_ge1)
r
grid_sort_r <- grid %>%
mutate(prob = ifelse(rhalflife < 1, 1-prob, prob),
rh_ge1 = ifelse(rhalflife < 1, 1/rhalflife, rhalflife))
grid_sort_r = grid_sort_r[order(grid_sort_r$rh_ge1),]
hist(grid_sort_r$prob)
x = grid_sort_r$rh_ge1[2:nrow(grid_sort_r)]
y = grid_sort_r$prob
sfun_r  <- stepfun(x, y, f=0)
max(grid_sort_r$rh_ge1)
min(grid_sort_r$rh_ge1)
grid_sort_r <- grid %>%
mutate(prob = ifelse(rhalflife < 1, 1-prob, prob),
h_times_gt = ifelse(rhalflife < 1, 1/rhalflife-1, rhalflife-1))
grid_sort_r = grid_sort_r[order(grid_sort_r$rh_ge1),]
grid_sort_r <- grid %>%
mutate(prob = ifelse(rhalflife < 1, 1-prob, prob),
rh_ge1 = ifelse(rhalflife < 1, 1/rhalflife-1, rhalflife-1))
grid_sort_r = grid_sort_r[order(grid_sort_r$rh_ge1),]
x = grid_sort_r$rh_ge1[2:nrow(grid_sort_r)]
y = grid_sort_r$prob
sfun_r  <- stepfun(x, y, f=0)
max(grid_sort_r$rh_ge1)
min(grid_sort_r$rh_ge1)
hist(grid_sort_r$prob)
grid_sort_r <- grid %>%
mutate(prob = ifelse(rhalflife > 1, 1-prob, prob),
rh_ge1 = ifelse(rhalflife > 1, 1/rhalflife-1, rhalflife-1))
hist(grid_sort_r$prob)
max(grid_sort_r$rh_ge1)
grid_sort_r <- grid %>%
mutate(prob = ifelse(rhalflife > 1, 1-prob, prob),
h_times_gt = ifelse(rhalflife < 1, 1/rhalflife-1, rhalflife-1))
grid_sort_r = grid_sort_r[order(grid_sort_r$h_times_gt),]
hist(grid_sort_r$prob)
max(grid_sort_r$h_times_gt)
min(grid_sort_r$h_times_gt)
length(seq(min(grid_sort_r$h_times_gt), max(grid_sort_r$h_times_gt), by = 0.01))
length(seq(min(grid_sort_r$h_times_gt), max(grid_sort_r$h_times_gt), by = 1))
length(seq(min(grid_sort_r$h_times_gt), max(grid_sort_r$h_times_gt), by = 0.5))
length(seq(min(grid_sort_r$h_times_gt), max(grid_sort_r$h_times_gt), by = 0.2))
length(seq(min(grid_sort_r$h_times_gt), max(grid_sort_r$h_times_gt), by = 0.1))
x = grid_sort_r$rh_ge1[2:nrow(grid_sort_r)]
y = grid_sort_r$prob
sfun_r  <- stepfun(x, y, f=0)
x = grid_sort_r$h_times_gt[2:nrow(grid_sort_r)]
y = grid_sort_r$prob
sfun_r  <- stepfun(x, y, f=0)
tt05 <- seq(min(grid_sort_r$h_times_gt), max(grid_sort_r$h_times_gt), by = 0.5)
tt02 <- seq(min(grid_sort_r$h_times_gt), max(grid_sort_r$h_times_gt), by = 0.2)
tt01 <- seq(min(grid_sort_r$h_times_gt), max(grid_sort_r$h_times_gt), by = 0.1)
tt05
tt01
op <- par(mfrow = c(3,1))
plot(sfun_d, xval = tt01, col.hor = "red");
plot(sfun_d, xval = tt02, col.hor = "orange");
plot(sfun_d, xval = tt05, col.hor = "blue");
tt00 <- seq(min(grid_sort_r$h_times_gt), max(grid_sort_r$h_times_gt), by = 0)
tt00 <- seq(min(grid_sort_r$h_times_gt), max(grid_sort_r$h_times_gt), by = 0.01)
tt00
plot(sfun_r, xval = tt01, col.hor = "red");
plot(sfun_r, xval = tt02, col.hor = "orange");
plot(sfun_r, xval = tt05, col.hor = "blue");
length(tt001)
op <- par(mfrow = c(3,2))
plot(sfun_r, xval = tt_r1, col.hor = "red");
tt_r1 <- seq(min(grid_sort_r$h_times_gt), max(grid_sort_r$h_times_gt), by = 0.1)
tt_r2 <- seq(min(grid_sort_r$h_times_gt), max(grid_sort_r$h_times_gt), by = 0.2)
tt_r3 <- seq(min(grid_sort_r$h_times_gt), max(grid_sort_r$h_times_gt), by = 0.5)
tt_d1 <- seq(min(grid_sort_d$abs_dh), max(grid_sort_d$abs_dh), by = 0.01)
tt_d2 <- seq(min(grid_sort_d$abs_dh), max(grid_sort_d$abs_dh), by = 0.05)
tt_d3 <- seq(min(grid_sort_d$abs_dh), max(grid_sort_d$abs_dh), by = 0.1)
op <- par(mfrow = c(3,2))
plot(sfun_r, xval = tt_r1, col.hor = "red");
plot(sfun_r, xval = tt_r2, col.hor = "orange");
op <- par(mfrow = c(3,2))
plot(sfun_r, xval = tt_r1, col.hor = "red");
plot(sfun_d, xval = tt_d1, col.hor = "red");
plot(sfun_r, xval = tt_r2, col.hor = "orange");
plot(sfun_d, xval = tt_d2, col.hor = "orange");
plot(sfun_r, xval = tt_r3, col.hor = "blue");
plot(sfun_d, xval = tt_d3, col.hor = "blue")
op <- par(mfrow = c(3,2))
plot(sfun_r, xval = tt_r1, col.hor = "red", main="", xlab="", ylab="");
plot(sfun_d, xval = tt_d1, col.hor = "red", main="", xlab="", ylab="");
plot(sfun_r, xval = tt_r2, col.hor = "orange", main="", xlab="", ylab="P(halflife_i > halflife_j)");
plot(sfun_d, xval = tt_d2, col.hor = "orange", main="", xlab="", ylab="");
plot(sfun_r, xval = tt_r3, col.hor = "blue", main="", xlab="", ylab="");
plot(sfun_d, xval = tt_d3, col.hor = "blue", main="", xlab="", ylab="")
op <- par(mfrow = c(3,2))
plot(sfun_r, xval = tt_r1, col.hor = "red", main="", xlab="", ylab="");
plot(sfun_d, xval = tt_d1, col.hor = "red", main="", xlab="", ylab="");
plot(sfun_r, xval = tt_r2, col.hor = "orange", main="", xlab="", ylab="P(halflife_i > halflife_j); h_i > h_j");
plot(sfun_d, xval = tt_d2, col.hor = "orange", main="", xlab="", ylab="");
plot(sfun_r, xval = tt_r3, col.hor = "blue", main="", xlab="", ylab="n times h_i greater than h_j");
plot(sfun_d, xval = tt_d3, col.hor = "blue", main="", xlab="", ylab="h_i - h_j")
op <- par(mfrow = c(3,2))
plot(sfun_r, xval = tt_r1, col.hor = "red", main="", xlab="", ylab="");
plot(sfun_d, xval = tt_d1, col.hor = "red", main="", xlab="", ylab="");
plot(sfun_r, xval = tt_r2, col.hor = "orange", main="", xlab="", ylab="P(halflife_i > halflife_j); h_i > h_j");
plot(sfun_d, xval = tt_d2, col.hor = "orange", main="", xlab="", ylab="");
plot(sfun_r, xval = tt_r3, col.hor = "blue", main="", xlab="n times h_i greater than h_j", ylab="");
plot(sfun_d, xval = tt_d3, col.hor = "blue", main="", xlab="h_i - h_j", ylab="")
op <- par(mfrow = c(3,2))
plot(sfun_r, xval = tt_r1, col.hor = "red", main="small steps", xlab="", ylab="");
plot(sfun_d, xval = tt_d1, col.hor = "red", main="", xlab="", ylab="");
plot(sfun_r, xval = tt_r2, col.hor = "orange", main="medium steps", xlab="", ylab="P(halflife_i > halflife_j); h_i > h_j");
plot(sfun_d, xval = tt_d2, col.hor = "orange", main="", xlab="", ylab="");
plot(sfun_r, xval = tt_r3, col.hor = "blue", main="large steps", xlab="n times h_i greater than h_j", ylab="");
plot(sfun_d, xval = tt_d3, col.hor = "blue", main="", xlab="h_i - h_j", ylab="")
ggplot(grid_sort_d, aes(x=abs_dh, y=prob)) +
geom_point(aes(x = abs_dh, y=prob), color="grey", alpha=0.5) +
theme_bw() +
labs(x = "halflife1/halflife2", y = "P(halflife1 > halflife2)") +
geom_hline(mapping = aes(yintercept = upper), data=thresholds, linetype = "dashed", color = "brown") +
ylim(c(0, 1)) +
facet_grid(rows = vars(stv), col = vars(theta)) +
ggtitle("Power of alpha")
ggplot(grid_sort_d, aes(x=abs_dh, y=prob)) +
geom_point(aes(x = abs_dh, y=prob), color="grey", alpha=0.5) +
theme_bw() +
labs(x = "abs_dh", y = "P(halflife1 > halflife2)") +
geom_hline(mapping = aes(yintercept = upper), data=thresholds, linetype = "dashed", color = "brown") +
ylim(c(0, 1)) +
facet_grid(rows = vars(stv), col = vars(theta)) +
ggtitle("Power of alpha")
ggplot(grid_sort_r, aes(x=h_times_gt, y=prob)) +
geom_point(aes(x = h_times_gt, y=prob), color="grey", alpha=0.5) +
theme_bw() +
labs(x = "h_times_gt", y = "P(halflife1 > halflife2)") +
geom_hline(mapping = aes(yintercept = upper), data=thresholds, linetype = "dashed", color = "brown") +
ylim(c(0, 1)) +
facet_grid(rows = vars(stv), col = vars(theta)) +
ggtitle("Power of alpha")
p1b <- ggplot(grid_sort_d, aes(x=abs_dh, y=prob)) +
geom_point(aes(x = abs_dh, y=prob), color="grey", alpha=0.5) +
theme_bw() +
labs(x = "abs_dh", y = "P(halflife1 > halflife2)") +
geom_hline(mapping = aes(yintercept = upper), data=thresholds, linetype = "dashed", color = "brown") +
ylim(c(0, 1)) +
facet_grid(rows = vars(stv), col = vars(theta)) +
ggtitle("Power of alpha")
dir_out="figures/2_simulation/power_alpha/"
filename <- paste0(dir_out, "power_alpha_abs_dh.pdf")
ggsave(filename, p1b, width = 100, height = 100, units = "mm")
p1c <- ggplot(grid_sort_r, aes(x=h_times_gt, y=prob)) +
geom_point(aes(x = h_times_gt, y=prob), color="grey", alpha=0.5) +
theme_bw() +
labs(x = "h_times_gt", y = "P(halflife1 > halflife2)") +
geom_hline(mapping = aes(yintercept = upper), data=thresholds, linetype = "dashed", color = "brown") +
ylim(c(0, 1)) +
facet_grid(rows = vars(stv), col = vars(theta)) +
ggtitle("Power of alpha")
filename <- paste0(dir_out, "power_alpha_h_times_gt.pdf")
ggsave(filename, p1c, width = 100, height = 100, units = "mm")
ggsave(filename, p1c, width = 200, height = 200, units = "mm")
ggsave(filename, p1b, width = 200, height = 200, units = "mm")
ggsave(filename, p1b, width = 120, height = 120, units = "mm")
ggsave(filename, p1c, width = 120, height = 120, units = "mm")
p1b <- ggplot(grid_sort_d, aes(x=abs_dh, y=prob)) +
geom_point(aes(x = abs_dh, y=prob), color="grey", alpha=0.5) +
theme_bw() +
labs(x = "abs_dh", y = "P(halflife1 > halflife2)") +
geom_hline(mapping = aes(yintercept = upper), data=thresholds, linetype = "dashed", color = "darkgreen") +
geom_hline(mapping = aes(yintercept = lower), data=thresholds, linetype = "dashed", color = "brown") +
ylim(c(0, 1)) +
facet_grid(rows = vars(stv), col = vars(theta)) +
ggtitle("Power of alpha")
filename <- paste0(dir_out, "power_alpha_abs_dh.pdf")
ggsave(filename, p1b, width = 120, height = 120, units = "mm")
p1c <- ggplot(grid_sort_r, aes(x=h_times_gt, y=prob)) +
geom_point(aes(x = h_times_gt, y=prob), color="grey", alpha=0.5) +
theme_bw() +
labs(x = "h_times_gt", y = "P(halflife1 > halflife2)") +
geom_hline(mapping = aes(yintercept = upper), data=thresholds, linetype = "dashed", color = "darkgreen") +
geom_hline(mapping = aes(yintercept = lower), data=thresholds, linetype = "dashed", color = "brown") +
ylim(c(0, 1)) +
facet_grid(rows = vars(stv), col = vars(theta)) +
ggtitle("Power of alpha")
filename <- paste0(dir_out, "power_alpha_h_times_gt.pdf")
ggsave(filename, p1c, width = 120, height = 120, units = "mm")
hist(grid_sort_d$grid_sort_d)
hist(grid_sort_d$abs_dh)
grid_sort_d <- grid %>%
mutate(prob = ifelse(dhalflife > 0, 1-prob, prob),
abs_dh = abs(dhalflife))
grid_sort_d = grid_sort_d[order(grid_sort_d$abs_dh),]
p1b <- ggplot(grid_sort_d, aes(x=abs_dh, y=prob)) +
geom_point(aes(x = abs_dh, y=prob), color="grey", alpha=0.5) +
theme_bw() +
labs(x = "abs_dh", y = "P(halflife1 > halflife2)") +
geom_hline(mapping = aes(yintercept = upper), data=thresholds, linetype = "dashed", color = "darkgreen") +
geom_hline(mapping = aes(yintercept = lower), data=thresholds, linetype = "dashed", color = "brown") +
ylim(c(0, 1)) +
facet_grid(rows = vars(stv), col = vars(theta)) +
ggtitle("Power of alpha")
p1b
filename <- paste0(dir_out, "power_alpha_abs_dh.pdf")
ggsave(filename, p1b, width = 120, height = 120, units = "mm")
