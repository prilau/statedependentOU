desc_node <- edges[edge_index, 2]
mu_at_nodes[desc_node] <- y
}
cont_list <- list()
for (i in 1:length(tree$tip.label)){
tip <- tree$tip.label[i]
cont_list[[tip]] <- mu_at_nodes[i]
}
return(list(alpha, halflife, sigma2, stv, rho, theta, cont_list))
}
sim_sd <- simulateContinuous(history, c(halflife=T, stv=T, theta=T), num_state)
sim_sx <- simulateContinuous(history, c(halflife=F, stv=F, theta=F), num_state)
i=1
j=i*2-1
k=i*2
par_values[j,1] <- unname(sim_sd[[1]][1])
par_values[j,1]
par_values[j,m] <- unname(sim_sd[[1]][m])
par_values[j,m] <- unname(sim_sd[[1]][m])}
for (header in headers){
par_values[[header]] = 0
}
sim_sd <- simulateContinuous(history, c(halflife=T, stv=T, theta=T), num_state)
sim_sx <- simulateContinuous(history, c(halflife=F, stv=F, theta=F), num_state)
j=i*2-1
k=i*2
for (m in 1:num_state){
par_values[j,0*num_state+m] <- unname(sim_sd[[1]][m])
par_values[j,1*num_state+m] <- unname(sim_sd[[2]][m])
par_values[j,2*num_state+m] <- unname(sim_sd[[3]][m])
par_values[j,3*num_state+m] <- unname(sim_sd[[4]][m])
par_values[j,4*num_state+m] <- unname(sim_sd[[5]][m])
par_values[j,5*num_state+m] <- unname(sim_sd[[6]][m])
par_values[k,0*num_state+m] <- unname(sim_sx[[1]][m])
par_values[k,1*num_state+m] <- unname(sim_sx[[2]][m])
par_values[k,2*num_state+m] <- unname(sim_sx[[3]][m])
par_values[k,3*num_state+m] <- unname(sim_sx[[4]][m])
par_values[k,4*num_state+m] <- unname(sim_sx[[5]][m])
par_values[k,5*num_state+m] <- unname(sim_sx[[6]][m])
}
par_values$sim[j] = par_values$sim[k] = i
par_values$state[j] <- "sd"
par_values$state[k] <- "sx"
par_values
createParTable <- function(num_state){
pars = c("alpha", "halflife", "sigma2", "stv", "rho", "theta")
headers <- c()
for (par in pars){
for (i in 1:num_state){
headers <- append(headers, paste0(c(par, i), collapse = "_"))
}
}
headers <- append(headers, c("sim", "state"))
par_values <- tibble()
for (header in headers){
par_values[[header]] = 0
}
return(par_values)
}
enterParTable <- function(par_table, sim_sd, sim_sx, num_state, sim){
j=sim*2-1
k=sim*2
for (m in 1:num_state){
par_values[j,0*num_state+m] <- unname(sim_sd[[1]][m])
par_values[j,1*num_state+m] <- unname(sim_sd[[2]][m])
par_values[j,2*num_state+m] <- unname(sim_sd[[3]][m])
par_values[j,3*num_state+m] <- unname(sim_sd[[4]][m])
par_values[j,4*num_state+m] <- unname(sim_sd[[5]][m])
par_values[j,5*num_state+m] <- unname(sim_sd[[6]][m])
par_values[k,0*num_state+m] <- unname(sim_sx[[1]][m])
par_values[k,1*num_state+m] <- unname(sim_sx[[2]][m])
par_values[k,2*num_state+m] <- unname(sim_sx[[3]][m])
par_values[k,3*num_state+m] <- unname(sim_sx[[4]][m])
par_values[k,4*num_state+m] <- unname(sim_sx[[5]][m])
par_values[k,5*num_state+m] <- unname(sim_sx[[6]][m])
}
par_values$sim[j] = par_values$sim[k] = i
par_values$state[j] <- "sd"
par_values$state[k] <- "sx"
return(par_values)
}
library(TESS)
library(phytools)
source("scripts/readWriteCharacterData.R")
# 3 STATES
cat("simulating discrete characters.\n")
# simulation parameters
num_sim       = 200
tree <- read.tree("data/2_simulation/mammal_diet_perMY_n500.tre")
tree_length = sum(tree$edge.length)
# specify rates so that the expected number of changes is 200
this_rate = 100 / tree_length
# specify the Mk2 rate matrix
Q = matrix(0.5, 3, 3)
diag(Q) = -1
rownames(Q) = colnames(Q) = 1:3 - 1
# simulate the discrete characters
# track the number of rejected simulations based on proportional
# representation
colors = c("1"="#44aa99", "2"="#ddcc77", "2"="#882255")
for(i in 1:num_sim) {
#this_row = grid[i,]
#this_model   = this_row[[1]]
#this_tree       = this_row[[2]]
# read the tree
#this_dir = paste0("data/2_simulation/", this_model, "/t", this_tree)
#tree = read.tree(paste0(this_dir, "/tree.tre"))
# get the rate
#this_rate = rates[as.character(this_model)]
#this_rate = rates
# simulate the character
history = sim.history(tree, this_rate * Q, nsim=1, message=FALSE)
# make sure at least 20% of the tips are in either state
while (!(mean(history$states == "1") > 0.10 & mean(history$states == "2") > 0.10 & mean(history$states == "3") > 0.10) ) {
history = sim.history(tree, rate * Q, nsim=1, message=FALSE)
#num_rejections[as.character(num_tips)] = num_rejections[as.character(num_tips)] + 1
}
#num_simulations[as.character(num_tips)] = num_simulations[as.character(num_tips)] + 1
# make state-0 and state-1 trees
# the branch length of state-i trees is the proportional
# amount of time each branch spends in state i
maps = history$mapped.edge[,c("1","2","3")]
#state_0_tree = tree
#state_0_tree$edge.length = maps[,1] / tree$edge.length
#
#state_1_tree = tree
#state_1_tree$edge.length = maps[,2] / tree$edge.length
#
#state_2_tree = tree
#state_2_tree$edge.length = maps[,3] / tree$edge.length
#
## save these trees
this_sub_dir = paste0("../sdOU_local/thesis/2_simulation/triState/sim_", i)
if ( !dir.exists(this_sub_dir) ) {
dir.create(this_sub_dir, recursive=TRUE, showWarnings=FALSE)
}
#write.tree(state_0_tree, file=paste0(this_sub_dir, "/state0.tre"))
#write.tree(state_1_tree, file=paste0(this_sub_dir, "/state1.tre"))
#write.tree(state_2_tree, file=paste0(this_sub_dir, "/state2.tre"))
# save the discrete trait as a nexus file
writeCharacterData(t(t(history$states)), file=paste0(this_sub_dir, "/discrete.nex"), type="Standard")
# save the character history
save(history, file=paste0(this_sub_dir, "/history.Rda"))
# write a pdf
pdf(paste0(this_sub_dir, "/history.pdf"))
plot(history, col=colors)
dev.off()
# increment the progress bar
#setTxtProgressBar(bar, i / nrow(grid))
}
for(i in 1:num_sim) {
#this_row = grid[i,]
#this_model   = this_row[[1]]
#this_tree       = this_row[[2]]
# read the tree
#this_dir = paste0("data/2_simulation/", this_model, "/t", this_tree)
#tree = read.tree(paste0(this_dir, "/tree.tre"))
# get the rate
#this_rate = rates[as.character(this_model)]
#this_rate = rates
# simulate the character
history = sim.history(tree, this_rate * Q, nsim=1, message=FALSE)
# make sure at least 20% of the tips are in either state
while (!(mean(history$states == "1") > 0.10 & mean(history$states == "2") > 0.10 & mean(history$states == "3") > 0.10) ) {
history = sim.history(tree, this_rate * Q, nsim=1, message=FALSE)
#num_rejections[as.character(num_tips)] = num_rejections[as.character(num_tips)] + 1
}
#num_simulations[as.character(num_tips)] = num_simulations[as.character(num_tips)] + 1
# make state-0 and state-1 trees
# the branch length of state-i trees is the proportional
# amount of time each branch spends in state i
maps = history$mapped.edge[,c("1","2","3")]
#state_0_tree = tree
#state_0_tree$edge.length = maps[,1] / tree$edge.length
#
#state_1_tree = tree
#state_1_tree$edge.length = maps[,2] / tree$edge.length
#
#state_2_tree = tree
#state_2_tree$edge.length = maps[,3] / tree$edge.length
#
## save these trees
this_sub_dir = paste0("../sdOU_local/thesis/2_simulation/triState/sim_", i)
if ( !dir.exists(this_sub_dir) ) {
dir.create(this_sub_dir, recursive=TRUE, showWarnings=FALSE)
}
#write.tree(state_0_tree, file=paste0(this_sub_dir, "/state0.tre"))
#write.tree(state_1_tree, file=paste0(this_sub_dir, "/state1.tre"))
#write.tree(state_2_tree, file=paste0(this_sub_dir, "/state2.tre"))
# save the discrete trait as a nexus file
writeCharacterData(t(t(history$states)), file=paste0(this_sub_dir, "/discrete.nex"), type="Standard")
# save the character history
save(history, file=paste0(this_sub_dir, "/history.Rda"))
# write a pdf
pdf(paste0(this_sub_dir, "/history.pdf"))
plot(history, col=colors)
dev.off()
# increment the progress bar
#setTxtProgressBar(bar, i / nrow(grid))
}
num_sim
i
tree <- read.tree("data/2_simulation/mammal_diet_perMY_n500.tre")
tree_length = sum(tree$edge.length)
#mean_tree_lengths = sapply(tree_lengths, mean)
# specify rates so that the expected number of changes is 200
this_rate = 100 / tree_length
#names(rates) = models
# specify the Mk2 rate matrix
Q = matrix(0.5, 3, 3)
diag(Q) = -1
rownames(Q) = colnames(Q) = 1:3 - 1
# simulate the discrete characters
# track the number of rejected simulations based on proportional
# representation
colors = c("1"="#44aa99", "2"="#ddcc77", "3"="#882255")
bar = txtProgressBar(style=3, width=40)
for(i in 1:num_sim) {
#this_row = grid[i,]
#this_model   = this_row[[1]]
#this_tree       = this_row[[2]]
# read the tree
#this_dir = paste0("data/2_simulation/", this_model, "/t", this_tree)
#tree = read.tree(paste0(this_dir, "/tree.tre"))
# get the rate
#this_rate = rates[as.character(this_model)]
#this_rate = rates
# simulate the character
history = sim.history(tree, this_rate * Q, nsim=1, message=FALSE)
# make sure at least 20% of the tips are in either state
while (!(mean(history$states == "1") > 0.10 & mean(history$states == "2") > 0.10 & mean(history$states == "3") > 0.10) ) {
history = sim.history(tree, this_rate * Q, nsim=1, message=FALSE)
#num_rejections[as.character(num_tips)] = num_rejections[as.character(num_tips)] + 1
}
#num_simulations[as.character(num_tips)] = num_simulations[as.character(num_tips)] + 1
# make state-0 and state-1 trees
# the branch length of state-i trees is the proportional
# amount of time each branch spends in state i
maps = history$mapped.edge[,c("1","2","3")]
#state_0_tree = tree
#state_0_tree$edge.length = maps[,1] / tree$edge.length
#
#state_1_tree = tree
#state_1_tree$edge.length = maps[,2] / tree$edge.length
#
#state_2_tree = tree
#state_2_tree$edge.length = maps[,3] / tree$edge.length
#
## save these trees
this_sub_dir = paste0("../sdOU_local/thesis/2_simulation/triState/sim_", i)
if ( !dir.exists(this_sub_dir) ) {
dir.create(this_sub_dir, recursive=TRUE, showWarnings=FALSE)
}
# save the discrete trait as a nexus file
writeCharacterData(t(t(history$states)), file=paste0(this_sub_dir, "/discrete.nex"), type="Standard")
# save the character history
save(history, file=paste0(this_sub_dir, "/history.Rda"))
# write a pdf
pdf(paste0(this_sub_dir, "/history.pdf"))
plot(history, col=colors)
dev.off()
# increment the progress bar
#setTxtProgressBar(bar, i / nrow(grid))
}
i
# simulation parameters
num_sim       = 200
tree <- read.tree("data/2_simulation/mammal_diet_perMY_n500.tre")
tree_length = sum(tree$edge.length)
# specify rates so that the expected number of changes is 200
this_rate = 100 / tree_length
# specify the Mk2 rate matrix
Q = matrix(0.5, 3, 3)
diag(Q) = -1
rownames(Q) = colnames(Q) = 1:3 - 1
# simulate the discrete characters
# track the number of rejected simulations based on proportional
# representation
colors = c("1"="#44aa99", "2"="#ddcc77", "3"="#882255")
bar = txtProgressBar(style=3, width=40)
for(i in 1:num_sim) {
# simulate the character
history = sim.history(tree, this_rate * Q, nsim=1, message=FALSE)
# make sure at least 10% of the tips are in either state
while (!(mean(history$states == "1") > 0.10 & mean(history$states == "2") > 0.10 & mean(history$states == "3") > 0.10) ) {
history = sim.history(tree, this_rate * Q, nsim=1, message=FALSE)
}
maps = history$mapped.edge[,c("1","2","3")]
this_sub_dir = paste0("../sdOU_local/thesis/2_simulation/triState/sim_", i)
if ( !dir.exists(this_sub_dir) ) {
dir.create(this_sub_dir, recursive=TRUE, showWarnings=FALSE)
}
# save the discrete trait as a nexus file
writeCharacterData(t(t(history$states)), file=paste0(this_sub_dir, "/discrete.nex"), type="Standard")
# save the character history
save(history, file=paste0(this_sub_dir, "/history.Rda"))
# write a pdf
pdf(paste0(this_sub_dir, "/history.pdf"))
plot(history, col=colors)
dev.off()
# increment the progress bar
setTxtProgressBar(bar, i / num_sim)
}
# simulate the character
history = sim.history(tree, this_rate * Q, nsim=1, message=FALSE)
history
# make sure at least 10% of the tips are in either state
while (!(mean(history$states == "1") > 0.10 & mean(history$states == "2") > 0.10 & mean(history$states == "3") > 0.10) ) {
history = sim.history(tree, this_rate * Q, nsim=1, message=FALSE)
}
mean(history$states == "1")
mean(history$states == "2")
mean(history$states == "3")
rownames(Q) = colnames(Q) = 1:3
# simulate the discrete characters
# track the number of rejected simulations based on proportional
# representation
colors = c("1"="#44aa99", "2"="#ddcc77", "3"="#882255")
bar = txtProgressBar(style=3, width=40)
for(i in 1:num_sim) {
# simulate the character
history = sim.history(tree, this_rate * Q, nsim=1, message=FALSE)
# make sure at least 10% of the tips are in either state
while (!(mean(history$states == "1") > 0.10 & mean(history$states == "2") > 0.10 & mean(history$states == "3") > 0.10) ) {
history = sim.history(tree, this_rate * Q, nsim=1, message=FALSE)
}
maps = history$mapped.edge[,c("1","2","3")]
this_sub_dir = paste0("../sdOU_local/thesis/2_simulation/triState/sim_", i)
if ( !dir.exists(this_sub_dir) ) {
dir.create(this_sub_dir, recursive=TRUE, showWarnings=FALSE)
}
# save the discrete trait as a nexus file
writeCharacterData(t(t(history$states)), file=paste0(this_sub_dir, "/discrete.nex"), type="Standard")
# save the character history
save(history, file=paste0(this_sub_dir, "/history.Rda"))
# write a pdf
pdf(paste0(this_sub_dir, "/history.pdf"))
plot(history, col=colors)
dev.off()
# increment the progress bar
setTxtProgressBar(bar, i / num_sim)
}
setwd("../sdOU_local/thesis/2_simulation/triState/")
setwd("../..")
setwd("2_simulation/")
dir_in = "data/triState/"
dir_out = "data/triState/"
for (i in 1:num_sim){
file_in <- paste0(dir_in, "sim_",
i, "/history.Rda")
load(file_in)
sim_sd <- simulateContinuous(history, c(halflife=T, stv=T, theta=T), num_state)
sim_sx <- simulateContinuous(history, c(halflife=F, stv=F, theta=F), num_state)
enterParTable(par_table, sim_sd, sim_sx, num_state, sim=i)
this_dir <- paste0(dir_out, "sim_", i)
write.nexus.data(sim_sd[[7]], file = paste0(this_dir, "/continuous_sd.nex"),
format="Continuous")
write.nexus.data(sim_stateless[[7]], file = paste0(this_dir, "/continuous_stateless.nex"),
format="Continuous")
}
num_sim = 5
num_state = 3
dir_in = "data/triState/"
dir_out = "data/triState/"
for (i in 1:num_sim){
file_in <- paste0(dir_in, "sim_",
i, "/history.Rda")
load(file_in)
sim_sd <- simulateContinuous(history, c(halflife=T, stv=T, theta=T), num_state)
sim_sx <- simulateContinuous(history, c(halflife=F, stv=F, theta=F), num_state)
enterParTable(par_table, sim_sd, sim_sx, num_state, sim=i)
this_dir <- paste0(dir_out, "sim_", i)
write.nexus.data(sim_sd[[7]], file = paste0(this_dir, "/continuous_sd.nex"),
format="Continuous")
write.nexus.data(sim_stateless[[7]], file = paste0(this_dir, "/continuous_stateless.nex"),
format="Continuous")
}
file_in <- paste0(dir_in, "sim_",
i, "/history.Rda")
file_in
load(file_in)
sim_sd <- simulateContinuous(history, c(halflife=T, stv=T, theta=T), num_state)
sim_sx <- simulateContinuous(history, c(halflife=F, stv=F, theta=F), num_state)
halflife <-  drawHalflife(state_dependent = T, num_state, root_age)
stv <-  drawStv(state_dependent = T, num_state)
theta <-  drawTheta(state_dependent = T, num_state)
alpha <- log(2) / halflife
alpha
drawTheta <- function(state_dependent, num_state){
if(state_dependent == T){
theta <- c(rnorm(n=num_state, 0, 4))
} else {
theta <- rep(runif(n=1, -10, 10), 3)
}
names(theta) = c(1:(num_state))
return(theta)
}
drawStv <- function(state_dependent, num_state){
if(state_dependent == T){
stv <- rlnorm(n=num_state, meanlog=log(12.39783716), sdlog=0.587405)
} else {
stv <- rep(rlnorm(n=1, meanlog=log(12.39783716), sdlog=0.587405), 3)
}
names(stv) = c(1:(num_state))
return(stv)
}
drawHalflife <- function(state_dependent, num_state, root_age){
if(state_dependent == T){
halflife <- runif(n=num_state, 0.1*root_age, root_age)
} else {
#halflife <- rep(rlnorm(n=1, meanlog=4.349757, sdlog=1.044495), 3)
halflife <- rep(runif(n=1, 0.1*root_age, root_age), 3)
}
names(halflife) = c(1:(num_state))
return(halflife)
}
sim_sd <- simulateContinuous(history, c(halflife=T, stv=T, theta=T), num_state)
for (i in 1:num_sim){
file_in <- paste0(dir_in, "sim_",
i, "/history.Rda")
load(file_in)
sim_sd <- simulateContinuous(history, c(halflife=T, stv=T, theta=T), num_state)
sim_sx <- simulateContinuous(history, c(halflife=F, stv=F, theta=F), num_state)
enterParTable(par_table, sim_sd, sim_sx, num_state, sim=i)
this_dir <- paste0(dir_out, "sim_", i)
write.nexus.data(sim_sd[[7]], file = paste0(this_dir, "/continuous_sd.nex"),
format="Continuous")
write.nexus.data(sim_stateless[[7]], file = paste0(this_dir, "/continuous_stateless.nex"),
format="Continuous")
}
for (i in 1:num_sim){
file_in <- paste0(dir_in, "sim_",
i, "/history.Rda")
load(file_in)
sim_sd <- simulateContinuous(history, c(halflife=T, stv=T, theta=T), num_state)
sim_sx <- simulateContinuous(history, c(halflife=F, stv=F, theta=F), num_state)
enterParTable(par_table, sim_sd, sim_sx, num_state, sim=i)
this_dir <- paste0(dir_out, "sim_", i)
write.nexus.data(sim_sd[[7]], file = paste0(this_dir, "/continuous_sd.nex"),
format="Continuous")
write.nexus.data(sim_sx[[7]], file = paste0(this_dir, "/continuous_sx.nex"),
format="Continuous")
}
i
m
par_values[j,0*num_state+m] <- unname(sim_sd[[1]][m])
par_values[j,1*num_state+m] <- unname(sim_sd[[2]][m])
par_values[j,2*num_state+m] <- unname(sim_sd[[3]][m])
par_values[j,3*num_state+m] <- unname(sim_sd[[4]][m])
par_values[j,4*num_state+m] <- unname(sim_sd[[5]][m])
par_values[j,5*num_state+m] <- unname(sim_sd[[6]][m])
par_values[k,0*num_state+m] <- unname(sim_sx[[1]][m])
par_values[k,1*num_state+m] <- unname(sim_sx[[2]][m])
par_values[k,2*num_state+m] <- unname(sim_sx[[3]][m])
par_values[k,3*num_state+m] <- unname(sim_sx[[4]][m])
par_values[k,4*num_state+m] <- unname(sim_sx[[5]][m])
par_values[k,5*num_state+m] <- unname(sim_sx[[6]][m])
par_values$sim[j] = par_values$sim[k] = i
par_values$state[j] <- "sd"
par_values$state[k] <- "sx"
num_sim = 5
num_state = 3
dir_in = "data/triState/"
dir_out = "data/triState/"
for (i in 1:num_sim){
file_in <- paste0(dir_in, "sim_",
i, "/history.Rda")
load(file_in)
sim_sd <- simulateContinuous(history, c(halflife=T, stv=T, theta=T), num_state)
sim_sx <- simulateContinuous(history, c(halflife=F, stv=F, theta=F), num_state)
par_values <- enterParTable(par_table, sim_sd, sim_sx, num_state, sim=i)
this_dir <- paste0(dir_out, "sim_", i)
write.nexus.data(sim_sd[[7]], file = paste0(this_dir, "/continuous_sd.nex"),
format="Continuous")
write.nexus.data(sim_sx[[7]], file = paste0(this_dir, "/continuous_sx.nex"),
format="Continuous")
}
save(par_values, file="data/triState/pars.Rda")
write.csv(par_values, file="data/triState/pars.csv", sep=",")
write.csv(par_values, file="data/triState/pars.csv")
num_sim = 200
num_state = 3
dir_in = "data/triState/"
setwd("../../../statedependentOU/")
for (i in 1:num_sim){
file_in <- paste0(dir_in, "sim_",
i, "/history.Rda")
load(file_in)
sim_sd <- simulateContinuous(history, c(halflife=T, stv=T, theta=T), num_state)
sim_sx <- simulateContinuous(history, c(halflife=F, stv=F, theta=F), num_state)
par_values <- enterParTable(par_table, sim_sd, sim_sx, num_state, sim=i)
this_dir <- paste0(dir_out, "sim_", i)
write.nexus.data(sim_sd[[7]], file = paste0(this_dir, "/continuous_sd.nex"),
format="Continuous")
write.nexus.data(sim_sx[[7]], file = paste0(this_dir, "/continuous_sx.nex"),
format="Continuous")
}
dir_in = "data/2_simulation/triState/"
dir_out = "data/2_simulation/triState/"
for (i in 1:num_sim){
file_in <- paste0(dir_in, "sim_",
i, "/history.Rda")
load(file_in)
sim_sd <- simulateContinuous(history, c(halflife=T, stv=T, theta=T), num_state)
sim_sx <- simulateContinuous(history, c(halflife=F, stv=F, theta=F), num_state)
par_values <- enterParTable(par_table, sim_sd, sim_sx, num_state, sim=i)
this_dir <- paste0(dir_out, "sim_", i)
write.nexus.data(sim_sd[[7]], file = paste0(this_dir, "/continuous_sd.nex"),
format="Continuous")
write.nexus.data(sim_sx[[7]], file = paste0(this_dir, "/continuous_sx.nex"),
format="Continuous")
}
