state <- names(sub_edges[j])
state
mu <- y * exp(-alpha[[state]] * sub_edges[[j]]) + theta[[state]] * (1 - exp(-alpha[[state]] * sub_edges[[j]]))
mu
y
alpha[[state]]
theta[[state]]
v <- sigma2[[state]] / (2 * alpha[[state]]) * (1 - exp(-2 * alpha[[state]] * sub_edges[[j]]))
y <- rnorm(n=1, mu, sqrt(v))
y
mu
y <- expected_mu[parent_node]
state <- names(sub_edges[j])
mu <- y * exp(-alpha[[state]] * sub_edges[[j]]) + theta[[state]] * (1 - exp(-alpha[[state]] * sub_edges[[j]]))
mu
mu <- y * exp(-alpha[[state]] * sub_edges[[j]]) + theta[[state]] * (1 - exp(-alpha[[state]] * sub_edges[[j]]))
mu
j=1
y <- expected_mu[parent_node]
state <- names(sub_edges[j])
mu <- y * exp(-alpha[[state]] * sub_edges[[j]]) + theta[[state]] * (1 - exp(-alpha[[state]] * sub_edges[[j]]))
mu
v <- sigma2[[state]] / (2 * alpha[[state]]) * (1 - exp(-2 * alpha[[state]] * sub_edges[[j]]))
y <- rnorm(n=1, mu, sqrt(v))
y
j=2
state <- names(sub_edges[j])
mu <- y * exp(-alpha[[state]] * sub_edges[[j]]) + theta[[state]] * (1 - exp(-alpha[[state]] * sub_edges[[j]]))
mu
v <- sigma2[[state]] / (2 * alpha[[state]]) * (1 - exp(-2 * alpha[[state]] * sub_edges[[j]]))
y <- rnorm(n=1, mu, sqrt(v))
y
plot(tree)
simulateContinuous = function(tree, halflife, theta, sigma2) {
## Re-parameterization
alpha <- log(2) / halflife
#sigma2 <- stationaryvar * 2 * alpha
preorder <- rev(postorder(tree))
edges <- tree$edge
root_node <- length(tree$tip.label) + 1
state = tree$node.states[root_node]
expected_mu <- rep(0, length(tree$node.states))
expected_mu[root_node] <- theta[[state]]
for (edge_index in preorder){
sub_edges <- tree$maps[[edge_index]]
parent_node <- edges[edge_index, 1]
y <- expected_mu[parent_node]
for (j in 1:length(sub_edges)) {
state <- names(sub_edges[j])
mu <- y * exp(-alpha[[state]] * sub_edges[[j]]) + theta[[state]] * (1 - exp(-alpha[[state]] * sub_edges[[j]]))
v <- sigma2[[state]] / (2 * alpha[[state]]) * (1 - exp(-2 * alpha[[state]] * sub_edges[[j]]))
y <- rnorm(n=1, mu, sqrt(v))
}
desc_node <- edges[edge_index, 2]
expected_mu[desc_node] <- y
}
cont_list <- list()
for (i in 1:length(tree$tip.label)){
tip <- tree$tip.label[i]
cont_list[[tip]] <- expected_mu[tip]
}
return(cont_list)
}
sd_combination   = c("xxx", "xxt", "xsx", "axx", "asx", "axt", "xst", "ast")
reps       = 80
grid = expand.grid(combination=sd_combination, tree=1:reps,
stringsAsFactors=FALSE)
bar = txtProgressBar(style=3, width=40)
for(i in 1:nrow(grid)) {
this_row = grid[i,]
this_combo    = this_row[[1]]
this_tree        = this_row[[2]]
# read the history
this_dir = paste0("data/2_simulation/2a_state_dependency/",this_combo, "/t", this_tree)
load(paste0(this_dir, "/history.Rda"))
if (isTRUE(grepl("a", this_combo))){
halflife <- sd_halflife
} else {
halflife <- stateless_halflife
}
if (isTRUE(grepl("s", this_combo))){
sigma2 <- sd_sigma2
} else {
sigma2 <- stateless_sigma2
}
if (isTRUE(grepl("t", this_combo))){
theta <- sd_theta
} else {
theta <- stateless_theta
}
cont_states <- simulateContinuous(tree = history,
halflife, theta, sigma2)
write.nexus.data(cont_states,
file = paste0(this_dir, "/continuous.nex"),
format="Continuous")
setTxtProgressBar(bar, i / nrow(grid))
}
tree$tip.label[11]
simulateContinuous = function(tree, halflife, theta, sigma2) {
## Re-parameterization
alpha <- log(2) / halflife
#sigma2 <- stationaryvar * 2 * alpha
preorder <- rev(postorder(tree))
edges <- tree$edge
root_node <- length(tree$tip.label) + 1
state = tree$node.states[root_node]
expected_mu <- rep(0, length(tree$node.states))
expected_mu[root_node] <- theta[[state]]
for (edge_index in preorder){
sub_edges <- tree$maps[[edge_index]]
parent_node <- edges[edge_index, 1]
y <- expected_mu[parent_node]
for (j in 1:length(sub_edges)) {
state <- names(sub_edges[j])
mu <- y * exp(-alpha[[state]] * sub_edges[[j]]) + theta[[state]] * (1 - exp(-alpha[[state]] * sub_edges[[j]]))
v <- sigma2[[state]] / (2 * alpha[[state]]) * (1 - exp(-2 * alpha[[state]] * sub_edges[[j]]))
y <- rnorm(n=1, mu, sqrt(v))
}
desc_node <- edges[edge_index, 2]
expected_mu[desc_node] <- y
}
cont_list <- list()
for (i in 1:length(tree$tip.label)){
tip <- tree$tip.label[i]
cont_list[[tip]] <- expected_mu[i]
}
return(cont_list)
}
for(i in 1:nrow(grid)) {
this_row = grid[i,]
this_combo    = this_row[[1]]
this_tree        = this_row[[2]]
# read the history
this_dir = paste0("data/2_simulation/2a_state_dependency/",this_combo, "/t", this_tree)
load(paste0(this_dir, "/history.Rda"))
if (isTRUE(grepl("a", this_combo))){
halflife <- sd_halflife
} else {
halflife <- stateless_halflife
}
if (isTRUE(grepl("s", this_combo))){
sigma2 <- sd_sigma2
} else {
sigma2 <- stateless_sigma2
}
if (isTRUE(grepl("t", this_combo))){
theta <- sd_theta
} else {
theta <- stateless_theta
}
cont_states <- simulateContinuous(tree = history,
halflife, theta, sigma2)
write.nexus.data(cont_states,
file = paste0(this_dir, "/continuous.nex"),
format="Continuous")
setTxtProgressBar(bar, i / nrow(grid))
}
simulateContinuous = function(tree, halflife, theta, sigma2, rootState="theta") {
## Re-parameterization
alpha <- log(2) / halflife
#sigma2 <- stationaryvar * 2 * alpha
preorder <- rev(postorder(tree))
edges <- tree$edge
root_node <- length(tree$tip.label) + 1
state = tree$node.states[root_node]
mu_at_nodes <- rep(0, length(tree$node.states))
if (rootState == "theta"){
mu_at_nodes[root_node] <- theta[[state]]
} else if (rootState == "stV") {
mu_at_nodes[root_node] <- rnorm(1, mean = theta[[state]],
sd = sqrt(sigma2[[state]]/(2*alpha[[state]])))
} else if (rootState == "random"){
mu_at_nodes[root_node] <- runif(1, min = min(theta)/2, max = max(theta)*2)
}
for (edge_index in preorder){
sub_edges <- tree$maps[[edge_index]]
parent_node <- edges[edge_index, 1]
y <- mu_at_nodes[parent_node]
for (j in 1:length(sub_edges)) {
state <- names(sub_edges[j])
mu <- y * exp(-alpha[[state]] * sub_edges[[j]]) + theta[[state]] * (1 - exp(-alpha[[state]] * sub_edges[[j]]))
v <- sigma2[[state]] / (2 * alpha[[state]]) * (1 - exp(-2 * alpha[[state]] * sub_edges[[j]]))
y <- rnorm(n=1, mu, sqrt(v))
}
desc_node <- edges[edge_index, 2]
mu_at_nodes[desc_node] <- y
}
cont_list <- list()
for (i in 1:length(tree$tip.label)){
tip <- tree$tip.label[i]
cont_list[[tip]] <- mu_at_nodes[i]
}
return(cont_list)
}
for(i in 1:nrow(grid)) {
this_row = grid[i,]
this_combo    = this_row[[1]]
this_tree        = this_row[[2]]
# read the history
this_dir = paste0("data/2_simulation/2a_state_dependency/",this_combo, "/t", this_tree)
load(paste0(this_dir, "/history.Rda"))
if (isTRUE(grepl("a", this_combo))){
halflife <- sd_halflife
} else {
halflife <- stateless_halflife
}
if (isTRUE(grepl("s", this_combo))){
sigma2 <- sd_sigma2
} else {
sigma2 <- stateless_sigma2
}
if (isTRUE(grepl("t", this_combo))){
theta <- sd_theta
} else {
theta <- stateless_theta
}
cont_states <- simulateContinuous(tree = history,
halflife, theta, sigma2, rootState = "theta")
write.nexus.data(cont_states,
file = paste0(this_dir, "/continuous.nex"),
format="Continuous")
setTxtProgressBar(bar, i / nrow(grid))
}
plot("~/Downloads/Burns_and_Bloom_phylogenetic_tree.nexus")
read.simmap("~/Downloads/Burns_and_Bloom_phylogenetic_tree.nexus")
read.simmap("~/Downloads/Burns_and_Bloom_phylogenetic_tree.nexus", format = "phylip")
read.tree("~/Downloads/Burns_and_Bloom_phylogenetic_tree.nexus", )
read.tree("~/Downloads/Burns_and_Bloom_phylogenetic_tree.nexus")
read.tree("~/Downloads/Burns_and_Bloom_phylogenetic_tree.nexus")
plot("~/Downloads/Burns_and_Bloom_phylogenetic_tree.nexus")
plot("~/Downloads/Burns_and_Bloom_phylogenetic_tree.nexus")
read.tree("~/Downloads/Burns_and_Bloom_phylogenetic_tree.nexus")
read.tree("~/Downloads/Burns_and_Bloom_phylogenetic_tree.nexus")
plot("~/Downloads/Burns_and_Bloom_phylogenetic_tree.nexus")
plot("~/Downloads/Burns_and_Bloom_phylogenetic_tree.nexus")
?tess.sim.taxa
# simulate the tree
tree = ladderize(tess.sim.taxa(1, 500, 10, 1, 0.5)[[1]])
tree
plot(tree)
# simulate the tree
tree = ladderize(tess.sim.taxa(n=1, nTaxa=500, max=10, lambda=1, mu=0.5,
massExtinctionTimes=c(3, 8),
massExtinctionSurvivalProbabilities=c(0.3, 0.1),
samplingProbability=0.5)[[1]])
tree
plot(tree)
l <- Vectorize(function(x) { if (x > 0.5 || x < 0.3) { return (1) } else { return (2) } })
e <- Vectorize(function(x) { if (x > 0.5 || x < 0.3) { return (0.95) } else { return (0.5) } })
tess.sim.taxa.age(n=1,l,e,nTaxa=10,age=1,MRCA=TRUE)
tree <- tess.sim.taxa.age(n=1,l,e,nTaxa=10,age=1,MRCA=TRUE)
plot(tree)
tree
plot(trees)
plot(tree[[1]])
tess.sim.taxa.age(n=1,2.0,1.0,nTaxa=10,age=1,MRCA=TRUE)
plot(tess.sim.taxa.age(n=1,2.0,1.0,nTaxa=10,age=1,MRCA=TRUE)[[1]])
l <- Vectorize(function(x) { if (x > 0.5 || x < 0.3) { return (1) } else { return (2) } })
e <- Vectorize(function(x) { if (x > 0.5 || x < 0.3) { return (0.95) } else { return (0.5) } })
plot(tess.sim.age(n=1,age=1,l,e,MRCA=TRUE)[[1]])
library(RevGadgets)
library(grid)
library(ggplot2)
library(tidyverse)
library(tikzDevice)
plots_ou <- list()
ou <- readTrace(path = "output/state_less_OU/state_less_OU_run_2.log", burnin = 0.05)
ou[[1]] <- ou[[1]] %>%
mutate(stv = sigma2 / (2 * alpha))
sdou2 <-  readTrace(path = "output/state_less_OU/state_dependent_OU_run_2.log", burnin = 0.05)
sdou2[[1]] <- sdou2[[1]] %>%
mutate(stv = sigma2 / (2 * alpha))
ou[[1]]$sigma2_sdou <- sdou2[[1]]$sigma2
ou[[1]]$theta_sdou <- sdou2[[1]]$theta
ou[[1]]$alpha_sdou <- sdou2[[1]]$alpha
ou[[1]]$stv_sdou <- sdou2[[1]]$stv
plots_ou <- list()
colors_ou <- c("theta_sdou" = "#663333", "theta" = "#FFCCCC")
plots_ou[[1]] <- plotTrace(trace = ou, color = colors_ou,
vars = c("theta", "theta_sdou"))[[1]] +
theme(panel.grid = element_blank(),
legend.position = "none") +
ggtitle("Optimum (theta)")
colors_ou <- c("stv_sdou" = "#663333", "stv" = "#FFCCCC")
plots_ou[[2]] <- plotTrace(trace = ou, color = colors_ou,
vars = c("stv", "stv_sdou"))[[1]] +
theme(panel.grid = element_blank(),
legend.position = "none") +
ggtitle("Stationary variance")
colors_ou <- c("sigma2_sdou" = "#663333", "sigma2" = "#FFCCCC")
plots_ou[[3]] <- plotTrace(trace = ou, color = colors_ou,
vars = c("sigma2", "sigma2_sdou"))[[1]] +
theme(panel.grid = element_blank(),
legend.position = "none") +
ggtitle("Diffusion rate (sigma2)")
colors_ou <- c("alpha_sdou" = "#663333", "alpha" = "#FFCCCC")
plots_ou[[4]] <- plotTrace(trace = ou, color = colors_ou,
vars = c("alpha", "alpha_sdou"))[[1]] +
theme(panel.grid = element_blank(),
legend.position = "none") +
ggtitle("Attraction rate (alpha)")
pdf("stateless_ou.pdf", width=5, height=6)
grid.newpage()
grid.draw( # draw the following matrix of plots
pdf("stateless_ou.pdf", width=5, height=6)
qwf
pdf("stateless_ou.pdf", width=5, height=6)
grid.newpage()
grid.draw( # draw the following matrix of plots
cbind(
rbind( # bind together the columns
ggplotGrob(plots_ou[[1]]),
ggplotGrob(plots_ou[[2]]),
),
rbind(
ggplotGrob(plots_ou[[3]]),
ggplotGrob(plots_ou[[4]])
)
)
)
rbind(
ggplotGrob(plots_ou[[3]]),
ggplotGrob(plots_ou[[4]])
)
cbind(
rbind( # bind together the columns
ggplotGrob(plots_ou[[1]]),
ggplotGrob(plots_ou[[2]]),
),
rbind(
ggplotGrob(plots_ou[[3]]),
ggplotGrob(plots_ou[[4]])
)
)
?cbind
?grid.draw
pdf("stateless_ou.pdf", width=20, height=16)
par(mfrow = c(2, 2))
plots_ou[[1]]
plots_ou[[2]]
plots_ou[[3]]
plots_ou[[4]]
dev.off()
pdf("stateless_ou.pdf")
par(mfrow = c(2, 2))
plots_ou[[1]]
plots_ou[[2]]
plots_ou[[3]]
plots_ou[[4]]
dev.off()
sdbm <- readTrace(path = "output/state_dependent_BM/state_dependent_BM_run_1.log", burnin = 0.05)
sdbm2020 <- readTrace(path = "output/state_dependent_BM/state_dependent_BM_MayMoore_run_1.log", burnin = 0.05)
sdou <-  readTrace(path = "output/state_dependent_BM/state_dependent_OU_run_1.log", burnin = 0.05)
sdbm2020[[1]]$`sigma2_sdou_0` <- sdou[[1]]$`sigma2s[1]`
sdbm2020[[1]]$`sigma2_sdou_1` <- sdou[[1]]$`sigma2s[2]`
sdbm2020[[1]]$`sigma2_sdbm_0` <- sdbm[[1]]$`sigma2s[1]`
sdbm2020[[1]]$`sigma2_sdbm_1` <- sdbm[[1]]$`sigma2s[2]`
colors_sdbm0 <- c("sigma2_sdbm_0" = "#abc3c9", "sigma2_sdou_0" = "#382119", "sigma2s[1]" = "#ccbe9f")
colors_sdbm1 <- c("sigma2_sdbm_1" = "#abc3c9", "sigma2_sdou_1" = "#382119", "sigma2s[2]" = "#ccbe9f")
plots_sdbm0 <- plotTrace(trace = sdbm2020,
color = colors_sdbm0,
vars = c("sigma2_sdbm_0", "sigma2s[1]", "sigma2_sdou_0"))[[1]] +
ggtitle("Diffusion rate (sigma2) at state 0") +
theme(panel.grid = element_blank(),
#axis.text = element_text(size = 16),
#legend.text = element_text(size = 16),
#legend.title = element_text(size = 16),
legend.position = "none",
#legend.position.inside = c(0.9, 0.9),
#legend.justification = c("right", "top"),
#legend.box.just = "right",
#legend.margin = margin(4, 4, 4, 4),
#axis.title.x = element_text(size = 10),
#axis.text.y = element_text(size = 8)
#axis.title.y = element_text(size = 10)
) +
xlim(0,0.10)
plots_sdbm1 <- plotTrace(trace = sdbm2020,
color = colors_sdbm1,
vars = c("sigma2_sdbm_1", "sigma2s[2]", "sigma2_sdou_1"))[[1]] +
ggtitle("Diffusion rate (sigma2) at state 1") +
theme(panel.grid = element_blank(),
#axis.text = element_text(size = 16),
#legend.text = element_text(size = 16),
#legend.title = element_text(size = 16),
legend.position = "none",
#legend.position.inside = c(0.9, 0.9),
#legend.justification = c("right", "top"),
#legend.box.just = "right",
#legend.margin = margin(4, 4, 4, 4),
#axis.title.x = element_text(size = 10),
#axis.text.y = element_text(size = 8)
#axis.title.y = element_text(size = 10)
) +
xlim(0,0.10)
plots_sdbm1
plots_sdbm1 <- plotTrace(trace = sdbm2020,
color = colors_sdbm1,
vars = c("sigma2_sdbm_1", "sigma2s[2]", "sigma2_sdou_1"))[[1]] +
ggtitle("Diffusion rate (sigma2) at state 1") +
theme(panel.grid = element_blank(),
#axis.text = element_text(size = 16),
#legend.text = element_text(size = 16),
#legend.title = element_text(size = 16),
legend.position = "none",
#legend.position.inside = c(0.9, 0.9),
#legend.justification = c("right", "top"),
#legend.box.just = "right",
#legend.margin = margin(4, 4, 4, 4),
#axis.title.x = element_text(size = 10),
#axis.text.y = element_text(size = 8)
#axis.title.y = element_text(size = 10)
)
plots_sdbm1
plots_sdbm0
plots_sdbm0 <- plotTrace(trace = sdbm2020,
color = colors_sdbm0,
vars = c("sigma2_sdbm_0", "sigma2s[1]", "sigma2_sdou_0"))[[1]] +
ggtitle("Diffusion rate (sigma2) at state 0") +
theme(panel.grid = element_blank(),
#axis.text = element_text(size = 16),
#legend.text = element_text(size = 16),
#legend.title = element_text(size = 16),
legend.position = "none",
#legend.position.inside = c(0.9, 0.9),
#legend.justification = c("right", "top"),
#legend.box.just = "right",
#legend.margin = margin(4, 4, 4, 4),
#axis.title.x = element_text(size = 10),
#axis.text.y = element_text(size = 8)
#axis.title.y = element_text(size = 10)
)
plots_sdbm0
plots_sdbm1
pdf("figures/sdbm_0.pdf", width=5, height=6)
plots_sdbm0
dev.off()
pdf("figures/sdbm_1.pdf", width=5, height=6)
plots_sdbm1
dev.off()
View(plots_sdbm1)
summary(plots_sdbm0)
View(plots_sdbm0)
plots_sdbm1 <- plotTrace(trace = sdbm2020,
color = colors_sdbm1,
vars = c("sigma2_sdbm_1", "sigma2s[2]", "sigma2_sdou_1"))[[1]] +
ggtitle("Diffusion rate (sigma2) at state 1") +
theme(panel.grid = element_blank(),
#axis.text = element_text(size = 16),
#legend.text = element_text(size = 16),
#legend.title = element_text(size = 16),
legend.position = "none",
#legend.position.inside = c(0.9, 0.9),
#legend.justification = c("right", "top"),
#legend.box.just = "right",
#legend.margin = margin(4, 4, 4, 4),
#axis.title.x = element_text(size = 10),
#axis.text.y = element_text(size = 8)
#axis.title.y = element_text(size = 10)
) +
scale_linetype_manual(values = c("sigma2_sdbm_1" = "dotted",
"sigma2s[2]" = "dashed",
"sigma2_sdou_1" = "dotdash"))
plots_sdbm1
plots_sdbm1 <- plotTrace(trace = sdbm2020,
color = colors_sdbm1,
vars = c("sigma2_sdbm_1", "sigma2s[2]", "sigma2_sdou_1"))[[1]] +
ggtitle("Diffusion rate (sigma2) at state 1") +
theme(panel.grid = element_blank(),
#axis.text = element_text(size = 16),
#legend.text = element_text(size = 16),
#legend.title = element_text(size = 16),
legend.position = "none",
#legend.position.inside = c(0.9, 0.9),
#legend.justification = c("right", "top"),
#legend.box.just = "right",
#legend.margin = margin(4, 4, 4, 4),
#axis.title.x = element_text(size = 10),
#axis.text.y = element_text(size = 8)
#axis.title.y = element_text(size = 10)
)
linetypes_sdbm1 <- c("sigma2_sdbm_1" = "dotted",
"sigma2s[2]" = "dashed",
"sigma2_sdou_1" = "dotdash")
?plotTrace
plots_sdbm1 + scale_linetype_manual(values=linetypes_sdbm1)
plots_sdbm1
plots_sdbm1$data$Variable
bm <- readTrace(path = "output/state_less_BM/state_less_BM_run_1.log", burnin = 0.05)
sdbm_2 <- readTrace(path = "output/state_less_BM/state_dependent_BM_run_1.log", burnin = 0.05)
sdou_3 <-  readTrace(path = "output/state_less_BM/state_dependent_OU_run_1.log", burnin = 0.05)
bm[[1]]$`sigma2_sdbm` <- sdbm_2[[1]]$`sigma2s[1]`
bm[[1]]$`sigma2_sdou` <- sdou_3[[1]]$`sigma2s[1]`
View(bm)
colors_bm <- c("sigma2_sdbm" = "#abc3c9", "sigma2_sdou" = "#382119", "sigma2s" = "#e0dcd3")
plots_bm <- plotTrace(trace = bm,
color = colors_bm,
vars = c("sigma2s", "sigma2_sdbm", "sigma2_sdou"))[[1]] +
ggtitle("Diffusion rate (sigma2)") +
theme(panel.grid = element_blank(),
legend.position = "none"
)
plots_bm <- plotTrace(trace = bm,
color = colors_bm,
vars = c("sigma2", "sigma2_sdbm", "sigma2_sdou"))[[1]] +
ggtitle("Diffusion rate (sigma2)") +
theme(panel.grid = element_blank(),
legend.position = "none"
)
pdf("figures/stateless_bm.pdf", width=5, height=6)
plots_bm
dev.off()
