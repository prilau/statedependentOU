} else {
nodes <- nodesAlongLineage(tree, mrca_node, tip)
nodes <- head(nodes, n = -1)
edges <- which(tree$edge[,2] %in% nodes) # from root to mcra_node
subedge_lengths <- rev(unlist(lapply(edges, function(i) tree$maps[[i]]))) # from mcra_node to root
subedge_lengths <- tibble(time_span = subedge_lengths,
alpha = alpha[names(subedge_lengths)])
cov_loss_rate = subedge_lengths %>%
mutate(sum1 = -1 * alpha * time_span) %>%
reframe(sum_final = sum(sum1))
}
return(cov_loss_rate)
}
vcv.pairwise <- function(tree, alpha, sigma2, tip1, tip2){
mrca_node <- ape::mrca(tree)[tip1, tip2]
cov_accum = cov.accum(tree, mrca_node, alpha, sigma2)
cov_loss1 = cov.loss(tree, mrca_node, alpha, tip1)
cov_loss2 = cov.loss(tree, mrca_node, alpha, tip2)
cov = cov_accum * exp(cov_loss1 + cov_loss2)
return(unlist(unname(cov)))
}
vcv.matrix <- function(tree, alpha, sigma2){
ntip <- length(tree$tip.label)
V <- matrix(nrow = ntip, ncol = ntip)
j = ntip
while (j != 0){
for (i in 1:ntip){
V[i,j] <- vcv.pairwise(tree, alpha, sigma2, i, j)
V[j,i] <- V[i,j]
}
j = j-1
}
colnames(V) <- tree$tip.label
rownames(V) <- tree$tip.label
return(V)
}
sd_logL_vcv <- function(tree, continuousChar, alpha, sigma2, theta){
alpha = alpha[sort(names(alpha))]
sigma2 = sigma2[sort(names(sigma2))]
theta = theta[sort(names(theta))]
theta = as.matrix(theta, nrow = 3)
ntip <- length(tree$tip.label)
V = vcv.matrix(tree, alpha, sigma2)
W = weight.matrix(tree, alpha)
C = chol(V) # upper triangular matrix
L = t(C) # lower triangular matrix
log_det_V = 0
for (i in 1:ntip){
log_det_V = log_det_V + log(L[i,i])
}
log_det_V = log_det_V * 2.0 # equals to julia implementation to 12 sig. fig.
y = NULL
for (species in tree$tip.label){
y[species] = as.numeric(continuousChar[species])
}
# inverse of L
r = solve(L) %*% y - solve(L) %*% W %*% theta # what does de-correlated residuals mean?
# res = - (n/2) * log(2*pi) - 0.5 * log_det_V - 0.5 * dot(r, r)
#     = exp(-n/2)^(2*pi) * exp(-0.5)^det_V * exp(-0.5)^dot(r, r) ?
res = 0.0
res = res - (ntip/2) * log(2*pi)
res = res - 0.5 * log_det_V
res = res - 0.5 * dot(r, r) # is it dot product? what is dot product of r?
return(res)
}
# From slouch
data("artiodactyla")
data("neocortex")
neocortex <- neocortex[match(artiodactyla$tip.label, neocortex$species), ]
# Example
tree <- artiodactyla
brain <- neocortex$brain_mass_g_log_mean
names(brain) <- tree$tip.label
# Example
diet <- as.character(neocortex$diet)
names(diet) <- neocortex$species
discrete_states <- unique(diet)
set.seed(123)
tree <- make.simmap(artiodactyla, diet)
plot(tree)
#alpha = c(rep(rgamma(n=1, shape=1, rate=10), 3))
alpha = rgamma(n=3, shape=1, rate=10)
names(alpha) = discrete_states
#sigma2 = c(rep(rgamma(n=1, shape=2, rate=10), 3))
sigma2 = rgamma(n=3, shape=2, rate=10)
names(sigma2) = discrete_states
#theta = c(rep(rnorm(1, mean = 0, sd = 3), 3))
theta = rnorm(3, mean = 0, sd = 3)
names(theta) = discrete_states
likelihood_difference = c()
bar = txtProgressBar(style=3, width=40)
for (i in 1:100){
alpha = rgamma(n=3, shape=1, rate=10)
sigma2 = rgamma(n=3, shape=2, rate=10)
theta = rnorm(3, mean = 0, sd = 3)
names(alpha) = discrete_states
names(sigma2) = discrete_states
names(theta) = discrete_states
l2 = sd_logL_pruning(tree, brain, alpha, sigma2, theta)
l1 = sd_logL_vcv(tree, brain, alpha, sigma2, theta)
likelihood_difference[i] = abs(l1 - l2)
setTxtProgressBar(bar, i / 100)
}
hist(log(likelihood_difference), breaks = 20)
ggplot(as.data.frame(likelihood_difference)) +
geom_point(aes(x = 1:50, y = likelihood_difference))
ggplot(as.data.frame(likelihood_difference)) +
geom_point(aes(x = 1:100, y = log(likelihood_difference)))
ggplot(as.data.frame(likelihood_difference)) +
geom_histogram(aes(y = log(likelihood_difference)))
ggplot(as.data.frame(likelihood_difference)) +
geom_histogram(aes(log(likelihood_difference)))
ggplot(as.data.frame(likelihood_difference)) +
geom_histogram(aes(likelihood_difference))
ggplot(as.data.frame(likelihood_difference)) +
geom_boxplot(aes(likelihood_difference))
save(plt, "Desktop/likelihood_difference_box.pdf")
plt <- ggplot(as.data.frame(likelihood_difference)) +
geom_boxplot(aes(likelihood_difference))
save(plt, "Desktop/likelihood_difference_box.pdf")
ggsave(plt, "Desktop/likelihood_difference_box.pdf")
?ggsave
ggplot(as.data.frame(likelihood_difference)) +
geom_boxplot(aes(likelihood_difference))
ggsave("Desktop/likelihood_difference_box.pdf")
ggplot(as.data.frame(likelihood_difference)) +
geom_histogram(aes(likelihood_difference))
ggsave("Desktop/likelihood_difference_box.pdf")
library(phytools)
read.simmap("Desktop/statedependentOU/test_simmap_write.txt")
read.simmap("Desktop/statedependentOU/test_simmap_write.txt", format = "phylip")
remotes::install_github("thej022214/OUwie")
library(OUwie)
data(tworegime)
# simulate an OUM model
Q <- matrix(c(-1,1,1,-1), 2, 2)
root.freqs <- c(1, 0)
alpha <- c(2, 2)
sigma.sq <- c(1,1)
theta0 <- 5
theta <- c(5, 10)
simulated_data <- hOUwie.sim(tree, Q, root.freqs, alpha, sigma.sq, theta0, theta)
plot(simulated_data$simmap)
hOUwie.fixed(simmaps=simulated_data$simmap,
data=simulated_data$data,
rate.cat=1,
discrete_model="SYM",
continuous_model"OUMVA",
getOUParamStructure(model="OUMVA",nObsState = 2, rate.cat = 1)
hOUwie.fixed(simmaps=simulated_data$simmap,
data=simulated_data$data,
rate.cat=1,
discrete_model="SYM",
continuous_model=getOUParamStructure(model="OUMVA",nObsState = 2, rate.cat = 1),
root.p              = 5)
simulated_data$simmap
getOUParamStructure(model="OUMVA",nObsState = 2, rate.cat = 1)
hOUwie.fixed(simmaps=simulated_data$simmap,
data=simulated_data$data,
rate.cat=1,
discrete_model=matrix(c(-1,1,1,-1), 2, 2),
continuous_model=getOUParamStructure(model="OUMVA",nObsState = 2, rate.cat = 1),
root.p              = 5)
tree <- simulated_data$simmap
data <- simulated_data$data
hOUwie.fixed(simmaps=tree,
data=data,
rate.cat=1,
discrete_model=matrix(c(-1,1,1,-1), 2, 2),
continuous_model=getOUParamStructure(model="OUMVA",nObsState = 2, rate.cat = 1),
root.p              = 5)
read.simmap()
phytools::read.simmap()
library(slouch)
load(artiodactyl)
load(artiodactyla)
load("artiodactyla")
data("artiodactyla")
library(ape)
library(phytools)
write.tree(artiodactyla, "Desktop/statedependentOU/data/1_validation/artiodactyla/artiodactyla.tree")
library(ape)
t <- read.tree("Desktop/statedependentOU/data/3_empirical/mammal_2022.tree")
t <- read.tree("Desktop/statedependentOU/data/3_empirical/mammal_2019.trees")[1]
t <- read.simmap("Desktop/statedependentOU/data/3_empirical/mammal_2022.tree", format="phylip")
library(phytools)
t <- read.simmap("Desktop/statedependentOU/data/3_empirical/mammal_2022.tree", format="phylip")
library(phytools)
?make.simmap
library(phytools)
read.simmap("Desktop/statedependentOU/output/3_empirical/mammal_diet/02_state-dependentBM.tre")
tree <- read.simmap("Desktop/statedependentOU/output/3_empirical/mammal_diet/02_state-dependentBM.tre", format = "phylip")
library(ape)
library(phytools)
library(geiger)
library(TESS)
library(tidyverse)
drawHalflife <- function(state_dependent=T){
if(state_dependent == T){
halflife <- rlnorm(n=3, meanlog=4.349757, sdlog=1.044495)
names(halflife) = sample(c("0", "1", "2"))
} else {
halflife <- rep(rlnorm(n=1, meanlog=4.349757, sdlog=1.044495), 3)
names(halflife) = c("0", "1", "2")
}
return(halflife)
}
drawStv <- function(state_dependent=T){
if(state_dependent == T){
stv <- rlnorm(n=3, meanlog=log(12.39783716), sdlog=0.587405)
names(stv) = sample(c("0", "1", "2"))
} else {
stv <- rep(rlnorm(n=1, meanlog=log(12.39783716), sdlog=0.587405), 3)
names(stv) = c("0", "1", "2")
}
return(stv)
}
drawTheta <- function(state_dependent=T){
if(state_dependent == T){
theta <- c(runif(n=3, -10, 10))
} else {
theta <- rep(runif(n=1, -10, 10), 3)
}
names(theta) = c("0", "1", "2")
return(theta)
}
simulateContinuous = function(tree, stateDependencies=c(halflife=T, stv=T, theta=T)) {
## Re-parameterization
#alpha <- log(2) / halflife
#sigma2 <- stationaryvar * 2 * alpha
if (isTRUE(stateDependencies["halflife"])){
halflife <-  drawHalflife(state_dependent = T)
} else {
halflife <-  drawHalflife(state_dependent = F)
}
if (isTRUE(stateDependencies["stv"])){
stv <-  drawStv(state_dependent = T)
} else {
stv <-  drawStv(state_dependent = F)
}
if (isTRUE(stateDependencies["theta"])){
theta <-  drawTheta(state_dependent = T)
} else {
theta <-  drawTheta(state_dependent = F)
}
alpha <- log(2) / halflife
sigma2 <- 2 * alpha * stv
preorder <- rev(postorder(tree))
edges <- tree$edge
root_node <- length(tree$tip.label) + 1
state = tree$node.states[root_node]
mu_at_nodes <- rep(0, length(tree$node.states))
mu_at_nodes[root_node] <- theta[[state]]
#draw root state
#alpha_root <- drawAlpha(state_dependent = stateDependencies[1])[[state]]
#sigma2_root <- drawAlpha(state_dependent = stateDependencies[2])[[state]]
#theta_root <- drawTheta(state_dependent = stateDependencies[3])[[state]]
#mu_at_nodes[root_node] <- drawRootState(alpha_root, sigma2_root, theta_root)
#if (rootState == "optimum"){
#  mu_at_nodes[root_node] <- theta[[state]]
#} else if (rootState == "equilibrium") {
#  mu_at_nodes[root_node] <- rnorm(1, mean = theta[[state]],
#                                  sd = sqrt(sigma2[[state]]/(2*alpha[[state]])))
#} else if (rootState == "parameter"){
#  mu_at_nodes[root_node] <- runif(1, min = min(theta)/2, max = max(theta)*2)
#}
for (edge_index in preorder){
sub_edges <- tree$maps[[edge_index]]
parent_node <- edges[edge_index, 1]
y <- mu_at_nodes[parent_node]
for (j in 1:length(sub_edges)) {
#alpha <- drawAlpha(state_dependent = stateDependencies[1])
#sigma2 <- drawAlpha(state_dependent = stateDependencies[2])
#theta <- drawAlpha(state_dependent = stateDependencies[3])
state <- names(sub_edges[j])
mu <- y * exp(-alpha[[state]] * sub_edges[[j]]) + theta[[state]] * (1 - exp(-alpha[[state]] * sub_edges[[j]]))
v <- sigma2[[state]] / (2 * alpha[[state]]) * (1 - exp(-2 * alpha[[state]] * sub_edges[[j]]))
y <- rnorm(n=1, mu, sqrt(v))
}
desc_node <- edges[edge_index, 2]
mu_at_nodes[desc_node] <- y
}
cont_list <- list()
for (i in 1:length(tree$tip.label)){
tip <- tree$tip.label[i]
cont_list[[tip]] <- mu_at_nodes[i]
}
return(list(cont_list, alpha, sigma2, theta))
}
pars_3state_sd <- tibble(alpha_0 = 0,  alpha_1 = 0, alpha_2 = 0,
sigma2_0 = 0, sigma2_1 = 0, sigma2_2 = 0,
theta_0 = 0,  theta_1 = 0, theta_2 = 0)
#pars_3state_stateless <- tibble(alpha_0 = 0,  alpha_1 = 0,
#                         sigma2_0 = 0, sigma2_1 = 0,
#                         theta_0 = 0,  theta_1 = 0)
#sim = vector("list", length = 50)
for (i in 1:5){
filename <- paste0("data/2_simulation/convergence/sim_",
i+3, "/history.Rda")
load(filename)
#sim_sd <- simulateContinuous(history, c(halflife=T, stv=T, theta=T))
sim_stateless <- simulateContinuous(history, c(halflife=F, stv=F, theta=F))
#pars_3state_sd[i,1] <- unname(sim_sd[[2]][which(names(sim_sd[[2]]) == "0")])
#pars_3state_sd[i,2] <- unname(sim_sd[[2]][which(names(sim_sd[[2]]) == "1")])
#pars_3state_sd[i,3] <- unname(sim_sd[[2]][which(names(sim_sd[[2]]) == "2")])
#pars_3state_sd[i,4] <- unname(sim_sd[[3]][which(names(sim_sd[[3]]) == "0")])
#pars_3state_sd[i,5] <- unname(sim_sd[[3]][which(names(sim_sd[[3]]) == "1")])
#pars_3state_sd[i,6] <- unname(sim_sd[[3]][which(names(sim_sd[[3]]) == "2")])
#pars_3state_sd[i,7] <- unname(sim_sd[[4]][which(names(sim_sd[[4]]) == "0")])
#pars_3state_sd[i,8] <- unname(sim_sd[[4]][which(names(sim_sd[[4]]) == "1")])
#pars_3state_sd[i,9] <- unname(sim_sd[[4]][which(names(sim_sd[[4]]) == "2")])
pars_3state_stateless[i,1] <- unname(sim_stateless[[2]][which(names(sim_stateless[[2]]) == "0")])
pars_3state_stateless[i,2] <- unname(sim_stateless[[2]][which(names(sim_stateless[[2]]) == "1")])
pars_3state_stateless[i,3] <- unname(sim_stateless[[2]][which(names(sim_stateless[[2]]) == "2")])
pars_3state_stateless[i,4] <- unname(sim_stateless[[3]][which(names(sim_stateless[[3]]) == "0")])
pars_3state_stateless[i,5] <- unname(sim_stateless[[3]][which(names(sim_stateless[[3]]) == "1")])
pars_3state_stateless[i,6] <- unname(sim_stateless[[3]][which(names(sim_stateless[[3]]) == "2")])
pars_3state_stateless[i,7] <- unname(sim_stateless[[4]][which(names(sim_stateless[[4]]) == "0")])
pars_3state_stateless[i,8] <- unname(sim_stateless[[4]][which(names(sim_stateless[[4]]) == "1")])
pars_3state_stateless[i,9] <- unname(sim_stateless[[4]][which(names(sim_stateless[[4]]) == "2")])
this_dir <- paste0("data/2_simulation/convergence/sim_", i+3)
#write.nexus.data(sim_sd[[1]], file = paste0(this_dir, "/continuous_sd.nex"),
#                 format="Continuous")
write.nexus.data(sim_stateless[[1]], file = paste0(this_dir, "/continuous_stateless.nex"),
format="Continuous")
}
setwd("Desktop/statedependentOU/")
#pars_3state_stateless <- tibble(alpha_0 = 0,  alpha_1 = 0,
#                         sigma2_0 = 0, sigma2_1 = 0,
#                         theta_0 = 0,  theta_1 = 0)
#sim = vector("list", length = 50)
for (i in 1:5){
filename <- paste0("data/2_simulation/convergence/sim_",
i+3, "/history.Rda")
load(filename)
#sim_sd <- simulateContinuous(history, c(halflife=T, stv=T, theta=T))
sim_stateless <- simulateContinuous(history, c(halflife=F, stv=F, theta=F))
#pars_3state_sd[i,1] <- unname(sim_sd[[2]][which(names(sim_sd[[2]]) == "0")])
#pars_3state_sd[i,2] <- unname(sim_sd[[2]][which(names(sim_sd[[2]]) == "1")])
#pars_3state_sd[i,3] <- unname(sim_sd[[2]][which(names(sim_sd[[2]]) == "2")])
#pars_3state_sd[i,4] <- unname(sim_sd[[3]][which(names(sim_sd[[3]]) == "0")])
#pars_3state_sd[i,5] <- unname(sim_sd[[3]][which(names(sim_sd[[3]]) == "1")])
#pars_3state_sd[i,6] <- unname(sim_sd[[3]][which(names(sim_sd[[3]]) == "2")])
#pars_3state_sd[i,7] <- unname(sim_sd[[4]][which(names(sim_sd[[4]]) == "0")])
#pars_3state_sd[i,8] <- unname(sim_sd[[4]][which(names(sim_sd[[4]]) == "1")])
#pars_3state_sd[i,9] <- unname(sim_sd[[4]][which(names(sim_sd[[4]]) == "2")])
pars_3state_stateless[i,1] <- unname(sim_stateless[[2]][which(names(sim_stateless[[2]]) == "0")])
pars_3state_stateless[i,2] <- unname(sim_stateless[[2]][which(names(sim_stateless[[2]]) == "1")])
pars_3state_stateless[i,3] <- unname(sim_stateless[[2]][which(names(sim_stateless[[2]]) == "2")])
pars_3state_stateless[i,4] <- unname(sim_stateless[[3]][which(names(sim_stateless[[3]]) == "0")])
pars_3state_stateless[i,5] <- unname(sim_stateless[[3]][which(names(sim_stateless[[3]]) == "1")])
pars_3state_stateless[i,6] <- unname(sim_stateless[[3]][which(names(sim_stateless[[3]]) == "2")])
pars_3state_stateless[i,7] <- unname(sim_stateless[[4]][which(names(sim_stateless[[4]]) == "0")])
pars_3state_stateless[i,8] <- unname(sim_stateless[[4]][which(names(sim_stateless[[4]]) == "1")])
pars_3state_stateless[i,9] <- unname(sim_stateless[[4]][which(names(sim_stateless[[4]]) == "2")])
this_dir <- paste0("data/2_simulation/convergence/sim_", i+3)
#write.nexus.data(sim_sd[[1]], file = paste0(this_dir, "/continuous_sd.nex"),
#                 format="Continuous")
write.nexus.data(sim_stateless[[1]], file = paste0(this_dir, "/continuous_stateless.nex"),
format="Continuous")
}
#pars_3state_sd <- tibble(alpha_0 = 0,  alpha_1 = 0, alpha_2 = 0,
#                  sigma2_0 = 0, sigma2_1 = 0, sigma2_2 = 0,
#                  theta_0 = 0,  theta_1 = 0, theta_2 = 0)
pars_3state_stateless <- tibble(alpha_0 = 0,  alpha_1 = 0,
sigma2_0 = 0, sigma2_1 = 0,
theta_0 = 0,  theta_1 = 0)
#sim = vector("list", length = 50)
for (i in 1:5){
filename <- paste0("data/2_simulation/convergence/sim_",
i+3, "/history.Rda")
load(filename)
#sim_sd <- simulateContinuous(history, c(halflife=T, stv=T, theta=T))
sim_stateless <- simulateContinuous(history, c(halflife=F, stv=F, theta=F))
#pars_3state_sd[i,1] <- unname(sim_sd[[2]][which(names(sim_sd[[2]]) == "0")])
#pars_3state_sd[i,2] <- unname(sim_sd[[2]][which(names(sim_sd[[2]]) == "1")])
#pars_3state_sd[i,3] <- unname(sim_sd[[2]][which(names(sim_sd[[2]]) == "2")])
#pars_3state_sd[i,4] <- unname(sim_sd[[3]][which(names(sim_sd[[3]]) == "0")])
#pars_3state_sd[i,5] <- unname(sim_sd[[3]][which(names(sim_sd[[3]]) == "1")])
#pars_3state_sd[i,6] <- unname(sim_sd[[3]][which(names(sim_sd[[3]]) == "2")])
#pars_3state_sd[i,7] <- unname(sim_sd[[4]][which(names(sim_sd[[4]]) == "0")])
#pars_3state_sd[i,8] <- unname(sim_sd[[4]][which(names(sim_sd[[4]]) == "1")])
#pars_3state_sd[i,9] <- unname(sim_sd[[4]][which(names(sim_sd[[4]]) == "2")])
pars_3state_stateless[i,1] <- unname(sim_stateless[[2]][which(names(sim_stateless[[2]]) == "0")])
pars_3state_stateless[i,2] <- unname(sim_stateless[[2]][which(names(sim_stateless[[2]]) == "1")])
pars_3state_stateless[i,3] <- unname(sim_stateless[[2]][which(names(sim_stateless[[2]]) == "2")])
pars_3state_stateless[i,4] <- unname(sim_stateless[[3]][which(names(sim_stateless[[3]]) == "0")])
pars_3state_stateless[i,5] <- unname(sim_stateless[[3]][which(names(sim_stateless[[3]]) == "1")])
pars_3state_stateless[i,6] <- unname(sim_stateless[[3]][which(names(sim_stateless[[3]]) == "2")])
pars_3state_stateless[i,7] <- unname(sim_stateless[[4]][which(names(sim_stateless[[4]]) == "0")])
pars_3state_stateless[i,8] <- unname(sim_stateless[[4]][which(names(sim_stateless[[4]]) == "1")])
pars_3state_stateless[i,9] <- unname(sim_stateless[[4]][which(names(sim_stateless[[4]]) == "2")])
this_dir <- paste0("data/2_simulation/convergence/sim_", i+3)
#write.nexus.data(sim_sd[[1]], file = paste0(this_dir, "/continuous_sd.nex"),
#                 format="Continuous")
write.nexus.data(sim_stateless[[1]], file = paste0(this_dir, "/continuous_stateless.nex"),
format="Continuous")
}
View(pars_3state_stateless)
View(pars_3state_sd)
View(pars_3state_stateless)
#pars_3state_sd <- tibble(alpha_0 = 0,  alpha_1 = 0, alpha_2 = 0,
#                  sigma2_0 = 0, sigma2_1 = 0, sigma2_2 = 0,
#                  theta_0 = 0,  theta_1 = 0, theta_2 = 0)
pars_3state_stateless <- tibble(alpha_0 = 0,  alpha_1 = 0, alpha_2 = 0,
sigma2_0 = 0, sigma2_1 = 0, sigma2_2 = 0,
theta_0 = 0,  theta_1 = 0, theta_2 = 0)
#sim = vector("list", length = 50)
for (i in 1:5){
filename <- paste0("data/2_simulation/convergence/sim_",
i+3, "/history.Rda")
load(filename)
#sim_sd <- simulateContinuous(history, c(halflife=T, stv=T, theta=T))
sim_stateless <- simulateContinuous(history, c(halflife=F, stv=F, theta=F))
#pars_3state_sd[i,1] <- unname(sim_sd[[2]][which(names(sim_sd[[2]]) == "0")])
#pars_3state_sd[i,2] <- unname(sim_sd[[2]][which(names(sim_sd[[2]]) == "1")])
#pars_3state_sd[i,3] <- unname(sim_sd[[2]][which(names(sim_sd[[2]]) == "2")])
#pars_3state_sd[i,4] <- unname(sim_sd[[3]][which(names(sim_sd[[3]]) == "0")])
#pars_3state_sd[i,5] <- unname(sim_sd[[3]][which(names(sim_sd[[3]]) == "1")])
#pars_3state_sd[i,6] <- unname(sim_sd[[3]][which(names(sim_sd[[3]]) == "2")])
#pars_3state_sd[i,7] <- unname(sim_sd[[4]][which(names(sim_sd[[4]]) == "0")])
#pars_3state_sd[i,8] <- unname(sim_sd[[4]][which(names(sim_sd[[4]]) == "1")])
#pars_3state_sd[i,9] <- unname(sim_sd[[4]][which(names(sim_sd[[4]]) == "2")])
pars_3state_stateless[i,1] <- unname(sim_stateless[[2]][which(names(sim_stateless[[2]]) == "0")])
pars_3state_stateless[i,2] <- unname(sim_stateless[[2]][which(names(sim_stateless[[2]]) == "1")])
pars_3state_stateless[i,3] <- unname(sim_stateless[[2]][which(names(sim_stateless[[2]]) == "2")])
pars_3state_stateless[i,4] <- unname(sim_stateless[[3]][which(names(sim_stateless[[3]]) == "0")])
pars_3state_stateless[i,5] <- unname(sim_stateless[[3]][which(names(sim_stateless[[3]]) == "1")])
pars_3state_stateless[i,6] <- unname(sim_stateless[[3]][which(names(sim_stateless[[3]]) == "2")])
pars_3state_stateless[i,7] <- unname(sim_stateless[[4]][which(names(sim_stateless[[4]]) == "0")])
pars_3state_stateless[i,8] <- unname(sim_stateless[[4]][which(names(sim_stateless[[4]]) == "1")])
pars_3state_stateless[i,9] <- unname(sim_stateless[[4]][which(names(sim_stateless[[4]]) == "2")])
this_dir <- paste0("data/2_simulation/convergence/sim_", i+3)
#write.nexus.data(sim_sd[[1]], file = paste0(this_dir, "/continuous_sd.nex"),
#                 format="Continuous")
write.nexus.data(sim_stateless[[1]], file = paste0(this_dir, "/continuous_stateless.nex"),
format="Continuous")
}
#sim = vector("list", length = 50)
for (i in 1:5){
filename <- paste0("data/2_simulation/convergence/sim_",
i+3, "/history.Rda")
load(filename)
#sim_sd <- simulateContinuous(history, c(halflife=T, stv=T, theta=T))
sim_stateless <- simulateContinuous(history, c(halflife=F, stv=F, theta=F))
#pars_3state_sd[i,1] <- unname(sim_sd[[2]][which(names(sim_sd[[2]]) == "0")])
#pars_3state_sd[i,2] <- unname(sim_sd[[2]][which(names(sim_sd[[2]]) == "1")])
#pars_3state_sd[i,3] <- unname(sim_sd[[2]][which(names(sim_sd[[2]]) == "2")])
#pars_3state_sd[i,4] <- unname(sim_sd[[3]][which(names(sim_sd[[3]]) == "0")])
#pars_3state_sd[i,5] <- unname(sim_sd[[3]][which(names(sim_sd[[3]]) == "1")])
#pars_3state_sd[i,6] <- unname(sim_sd[[3]][which(names(sim_sd[[3]]) == "2")])
#pars_3state_sd[i,7] <- unname(sim_sd[[4]][which(names(sim_sd[[4]]) == "0")])
#pars_3state_sd[i,8] <- unname(sim_sd[[4]][which(names(sim_sd[[4]]) == "1")])
#pars_3state_sd[i,9] <- unname(sim_sd[[4]][which(names(sim_sd[[4]]) == "2")])
pars_3state_stateless[i,1] <- unname(sim_stateless[[2]][which(names(sim_stateless[[2]]) == "0")])
pars_3state_stateless[i,2] <- unname(sim_stateless[[2]][which(names(sim_stateless[[2]]) == "1")])
pars_3state_stateless[i,3] <- unname(sim_stateless[[2]][which(names(sim_stateless[[2]]) == "2")])
pars_3state_stateless[i,4] <- unname(sim_stateless[[3]][which(names(sim_stateless[[3]]) == "0")])
pars_3state_stateless[i,5] <- unname(sim_stateless[[3]][which(names(sim_stateless[[3]]) == "1")])
pars_3state_stateless[i,6] <- unname(sim_stateless[[3]][which(names(sim_stateless[[3]]) == "2")])
pars_3state_stateless[i,7] <- unname(sim_stateless[[4]][which(names(sim_stateless[[4]]) == "0")])
pars_3state_stateless[i,8] <- unname(sim_stateless[[4]][which(names(sim_stateless[[4]]) == "1")])
pars_3state_stateless[i,9] <- unname(sim_stateless[[4]][which(names(sim_stateless[[4]]) == "2")])
this_dir <- paste0("data/2_simulation/convergence/sim_", i+3)
#write.nexus.data(sim_sd[[1]], file = paste0(this_dir, "/continuous_sd.nex"),
#                 format="Continuous")
write.nexus.data(sim_stateless[[1]], file = paste0(this_dir, "/continuous_stateless.nex"),
format="Continuous")
}
root_age <- max(node.depth.edgelength(history))
#pars_3state_sd <- pars_3state_sd %>%
#  mutate(halflife_0 = log(2) / alpha_0,
#         halflife_1 = log(2) / alpha_1,
#         halflife_2 = log(2) / alpha_2,
#         stv_0 = sigma2_0 / (2 * alpha_0),
#         stv_1 = sigma2_1 / (2 * alpha_1),
#         stv_2 = sigma2_2 / (2 * alpha_2),
#         rho_0 = 1 - ( 1 - exp( -2 * alpha_0 * root_age ) ) / ( 2 * alpha_0 * root_age ),
#         rho_1 = 1 - ( 1 - exp( -2 * alpha_1 * root_age ) ) / ( 2 * alpha_1 * root_age ),
#         rho_2 = 1 - ( 1 - exp( -2 * alpha_2 * root_age ) ) / ( 2 * alpha_2 * root_age ))
pars_3state_stateless <- pars_stateless %>%
mutate(halflife_0 = log(2) / alpha_0,
halflife_1 = log(2) / alpha_1,
halflife_2 = log(2) / alpha_2,
stv_0 = sigma2_0 / (2 * alpha_0),
stv_1 = sigma2_1 / (2 * alpha_1),
stv_2 = sigma2_2 / (2 * alpha_2),
rho_0 = 1 - ( 1 - exp( -2 * alpha_0 * root_age ) ) / ( 2 * alpha_0 * root_age ),
rho_1 = 1 - ( 1 - exp( -2 * alpha_1 * root_age ) ) / ( 2 * alpha_1 * root_age ),
rho_2 = 1 - ( 1 - exp( -2 * alpha_2 * root_age ) ) / ( 2 * alpha_2 * root_age ))
#pars_3state_sd <- pars_3state_sd %>%
#  mutate(halflife_0 = log(2) / alpha_0,
#         halflife_1 = log(2) / alpha_1,
#         halflife_2 = log(2) / alpha_2,
#         stv_0 = sigma2_0 / (2 * alpha_0),
#         stv_1 = sigma2_1 / (2 * alpha_1),
#         stv_2 = sigma2_2 / (2 * alpha_2),
#         rho_0 = 1 - ( 1 - exp( -2 * alpha_0 * root_age ) ) / ( 2 * alpha_0 * root_age ),
#         rho_1 = 1 - ( 1 - exp( -2 * alpha_1 * root_age ) ) / ( 2 * alpha_1 * root_age ),
#         rho_2 = 1 - ( 1 - exp( -2 * alpha_2 * root_age ) ) / ( 2 * alpha_2 * root_age ))
pars_3state_stateless <- pars_3state_stateless %>%
mutate(halflife_0 = log(2) / alpha_0,
halflife_1 = log(2) / alpha_1,
halflife_2 = log(2) / alpha_2,
stv_0 = sigma2_0 / (2 * alpha_0),
stv_1 = sigma2_1 / (2 * alpha_1),
stv_2 = sigma2_2 / (2 * alpha_2),
rho_0 = 1 - ( 1 - exp( -2 * alpha_0 * root_age ) ) / ( 2 * alpha_0 * root_age ),
rho_1 = 1 - ( 1 - exp( -2 * alpha_1 * root_age ) ) / ( 2 * alpha_1 * root_age ),
rho_2 = 1 - ( 1 - exp( -2 * alpha_2 * root_age ) ) / ( 2 * alpha_2 * root_age ))
#save(pars_3state_sd, file="data/2_simulation/convergence/pars_3state_sd.Rda")
save(pars_3state_stateless, file="data/2_simulation/convergence/pars_3state_stateless.Rda")
