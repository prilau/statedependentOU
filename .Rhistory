}
cont_states_ver6 <- obtainContinuousStates_ver6(tree = tree, alphaRoot = 1,
alphaAlt = 1, thetaRoot = 50,
thetaAlt = 20, sigmaRoot = 2,
sigmaAlt = 2, initialState = 50)
cont_states_ver6
obtainContinuousStates_ver6 = function(tree, alphaRoot, alphaAlt, thetaRoot,
thetaAlt, sigmaRoot, sigmaAlt,
initialState = thetaRoot, dt = 0.002,
currentNode = NULL, contStates = list()) {
cont_states <- contStates
## obtain root state
rootState <- obtainRootState(tree)
##if it is at root node right now
if (is.null(currentNode[i]) == TRUE) {
currentNode <- Descendants(basal_node(tree), tree)
}
xt0 <- initialState
for (i in 1: length(currentNode)) {
edge <- which.edge(tree, currentNode[i])
edgeLength <- history$maps[[edge]]
for (j in 1:length(edgeLength)) {
subEdgeLength <- edgeLength[[j]]
dt_length = subEdgeLength %/% dt
dt_remainder = subEdgeLength %% dt
if (rootState == as.integer(names(edgeLength[j]))) {
for (k in 1:dt_length) {
xt1 <- xt0 + alphaRoot * (thetaRoot - xt0) * dt + sigmaRoot * sqrt(dt) * rnorm(1)
xt0 <- xt1
}
xt1 <- xt0 + alphaRoot * (thetaRoot - xt0) * dt_remainder + sigmaRoot * sqrt(dt_remainder) * rnorm(1)
xt0 <- xt1
}
else {
for (k in 1:dt_length) {
xt1 <- xt0 + alphaAlt * (thetaAlt - xt0) * dt + sigmaAlt * sqrt(dt) * rnorm(1)
xt0 <- xt1
}
xt1 <- xt0 + alphaAlt * (thetaAlt - xt0) * dt_remainder + sigmaAlt * sqrt(dt_remainder) * rnorm(1)
xt0 <- xt1
}
initial_state <- xt1
if (isTRUE(length(tips(tree, currentNode[i])) == 1)) {
cont_states[[tips(tree, currentNode[i])]] <- initial_state
}
else {
next_nodes <- Descendants(currentNode[i], tree)
return(obtainContinuousStates_ver6(tree = tree, alphaRoot = alphaRoot,
alphaAlt = alphaAlt, thetaRoot = thetaRoot,
thetaAlt = thetaAlt, sigmaRoot = sigmaRoot,
sigmaAlt = sigmaAlt,
initialState = initial_state, dt = 0.002,
currentNode = next_nodes,
contStates = cont_states))
cont_states[[tips(tree, currentNode[i])]] <- initial_state
}
}
}
return(cont_states)
}
cont_states_ver6 <- obtainContinuousStates_ver6(tree = tree, alphaRoot = 1,
alphaAlt = 1, thetaRoot = 50,
thetaAlt = 20, sigmaRoot = 2,
sigmaAlt = 2, initialState = 50)
cont_states_ver6
library(TESS)
# simulate the tree
num_tips = 50
tree = ladderize(tess.sim.taxa(1, num_tips, 10, 1, 0.5)[[1]])
# rescale the tree
tree$edge.length = tree$edge.length / max(branching.times(tree))
max(tree$edge.length)
sum(tree$edge.length)
max(branching.times(tree)
)
tree_lengths <- sapply(tree, function(tree) sum(tree$edge.length))
tree$edge.length
tree_lengths <- sum(tree$edge.length)
# specify rates so that the expected number of changes is 5
rates = 5 / tree_lengths
names(rates) = num_tips
# specify the Mk2 rate matrix
Q = matrix(1, 2, 2)
diag(Q) = -1
rownames(Q) = colnames(Q) = 1:2 - 1
# simulate the discrete characters
# track the number of rejected simulations based on proportional
# representation
colors = c("0"="blue","1"="red")
num_rejections = numeric(length(num_tips))
num_simulations = numeric(length(num_tips))
names(num_rejections) = names(num_simulations) = num_tips
this_rate = rates[as.character(num_tips)]
history = sim.history(tree, this_rate * Q, nsim=1, message=FALSE)
while (! (mean(history$states == "0") > 0.2 & (mean(history$states == "1") > 0.2) ) ) {
history = sim.history(tree, this_rate * Q, nsim=1, message=FALSE)
num_rejections[as.character(num_tips)] = num_rejections[as.character(num_tips)] + 1
}
num_simulations[as.character(num_tips)] = num_simulations[as.character(num_tips)] + 1
maps = history$mapped.edge[,c("0","1")]
View(history)
ï¼Ÿladderize
?ladderize
library(ape)
library(nodiv)
library(phytools)
library(geiger)
library(TESS)
# simulate the tree
num_tips = 50
tree = ladderize(tess.sim.taxa(1, num_tips, 10, 1, 0.5)[[1]])
# rescale the tree
tree$edge.length = tree$edge.length / max(branching.times(tree))
tree$edge
postorder(tree)
basal_node(tree)
Descendants(51, tree)
which.edge(tree, 52)
which.edge(tree, 50)
rev(postorder(tree))
tree$edge
tree_lengths <- sum(tree$edge.length)
# specify rates so that the expected number of changes is 5
rates = 5 / tree_lengths
names(rates) = num_tips
# specify the Mk2 rate matrix
Q = matrix(1, 2, 2)
diag(Q) = -1
rownames(Q) = colnames(Q) = 1:2 - 1
# simulate the discrete characters
# track the number of rejected simulations based on proportional
# representation
colors = c("0"="blue","1"="red")
num_rejections = numeric(length(num_tips))
num_simulations = numeric(length(num_tips))
names(num_rejections) = names(num_simulations) = num_tips
this_rate = rates[as.character(num_tips)]
history = sim.history(tree, this_rate * Q, nsim=1, message=FALSE)
while (! (mean(history$states == "0") > 0.2 & (mean(history$states == "1") > 0.2) ) ) {
history = sim.history(tree, this_rate * Q, nsim=1, message=FALSE)
num_rejections[as.character(num_tips)] = num_rejections[as.character(num_tips)] + 1
}
num_simulations[as.character(num_tips)] = num_simulations[as.character(num_tips)] + 1
maps = history$mapped.edge[,c("0","1")]
rev(postorder(tree))[1]
setwd("~/Desktop/ASSIM/lab_hoehna/statedependentOU/")
source("scripts/readWriteCharacterData.R")
pdf("n50History.pdf")
plot(history, col=colors)
dev.off()
edge1d <- rev(postorder(tree))[1]
rootState <- names(history$maps[[edge1d]][1])
rootState <- as.integer(rootState)
rev(postorder(tree))
tree$edge
tree$edge[98 ,1]
basal_node(tree)
tree$edge[branch_order[1], 1]
tree$edge[rev(postorder(tree))[1], 1]
node_values <- list()
branch_order <- rev(postorder(tree))
corr_nodes <- tree$edge
node0 <- corr_nodes[branch_order[1], 1]
typeof(node0)
node_values[[as.character(node0)]] <- 10
node_values[[node0]] <- 20
parent_node <- corr_nodes[branch_order[1], 1]
node_values[[as.character(parent_node)]]
history$maps[[98]]
View(history)
typeof(history$maps[[98]])
sum(tree_lengths)
sum(tree$edges)
sum(tree$edge.length)
max(branching.times(tree)
)
tiplabels(tree)
tips(tree, 95)
View(node_values)
branch_order
corr_nodes[95]
corr_nodes[[95]]
corr_nodes[95, 1]
corr_nodes[95, 2]
corr_nodes
tips(tree, 2)
tips(tree, 60)
length(corr_nodes)
length(corr_nodes[1])
length(corr_nodes[1,])
length(corr_nodes[,1])
# simulate the tree
num_tips = 50
tree = ladderize(tess.sim.taxa(1, num_tips, 10, 1, 0.5)[[1]])
sum(tree$edge.length)
max(branching.tims(tree))
max(branching.times(tree))
# rescale the tree
tree$edge.length = tree$edge.length / max(branching.times(tree))
sum(tree$edge.length)
max(branching.times(tree))
tree_lengths <- sum(tree$edge.length)
# specify rates so that the expected number of changes is 5
rates = 10 / tree_lengths
names(rates) = num_tips
# specify the Mk2 rate matrix
Q = matrix(1, 2, 2)
diag(Q) = -1
rownames(Q) = colnames(Q) = 1:2 - 1
# simulate the discrete characters
# track the number of rejected simulations based on proportional
# representation
colors = c("0"="blue","1"="red")
num_rejections = numeric(length(num_tips))
num_simulations = numeric(length(num_tips))
names(num_rejections) = names(num_simulations) = num_tips
this_rate = rates[as.character(num_tips)]
history = sim.history(tree, this_rate * Q, nsim=1, message=FALSE)
while (! (mean(history$states == "0") > 0.2 & (mean(history$states == "1") > 0.2) ) ) {
history = sim.history(tree, this_rate * Q, nsim=1, message=FALSE)
num_rejections[as.character(num_tips)] = num_rejections[as.character(num_tips)] + 1
}
num_simulations[as.character(num_tips)] = num_simulations[as.character(num_tips)] + 1
maps = history$mapped.edge[,c("0","1")]
pdf("data/n50History.pdf")
plot(history, col=colors)
dev.off()
# obtain root state
obtainRootState = function(tree) {
edge1d <- rev(postorder(tree))[1]
rootState <- names(history$maps[[edge1d]][1])
rootState <- as.integer(rootState)
return(rootState)
}
obtainContinuousStates_ver7 = function(tree, history, alphaRoot, alphaAlt,
thetaRoot, thetaAlt, sigmaRoot, sigmaAlt,
initialValue = thetaRoot, dt = 0.002) {
cont_states <- list()
## obtain root state
root_state <- obtainRootState(tree)
branch_order <- rev(postorder(tree))
corr_nodes <- tree$edge
node0 <- corr_nodes[branch_order[1], 1]
node_values <- list()
node_values[[as.character(node0)]] <- initialValue
for (i in 1:length(branch_order)) {
sub_edges <- history$maps[[branch_order[i]]]
parent_node <- corr_nodes[branch_order[i], 1]
xt0 <- node_values[[as.character(parent_node)]]
for (j in 1:length(sub_edges)) {
dt_length = sub_edges[j] %/% dt
dt_remainder = sub_edges[j] %% dt
if (root_state == as.integer(names(sub_edges[j]))) {
for (k in 1:dt_length) {
xt1 <- xt0 + alphaRoot * (thetaRoot - xt0) * dt + sigmaRoot * sqrt(dt) * rnorm(1)
xt0 <- xt1
}
xt1 <- xt0 + alphaRoot * (thetaRoot - xt0) * dt_remainder + sigmaRoot * sqrt(dt_remainder) * rnorm(1)
xt0 <- xt1
}
else {
for (k in 1:dt_length) {
xt1 <- xt0 + alphaAlt * (thetaAlt - xt0) * dt + sigmaAlt * sqrt(dt) * rnorm(1)
xt0 <- xt1
}
xt1 <- xt0 + alphaAlt * (thetaAlt - xt0) * dt_remainder + sigmaAlt * sqrt(dt_remainder) * rnorm(1)
xt0 <- xt1
}
}
desc_node <- corr_nodes[branch_order[i], 2]
node_values[[as.character(desc_node)]] <- xt0
}
for (i in 1:length(corr_nodes[,2])) {
if (!(corr_nodes[i,2] %in% corr_nodes[,1])) {
tip_label <- tips(tree, corr_nodes[i,2])
cont_states[[tip_label]] <- node_values[[as.character(corr_nodes[i,2])]]
}
}
return(cont_states)
}
cont_states_ver7 <- obtainContinuousStates_ver7(tree = tree, history = history,
alphaRoot = 1, alphaAlt = 1,
thetaRoot = 50, thetaAlt = 20,
sigmaRoot = 2, sigmaAlt = 2,
initialValue = 50, dt = 0.002)
View(cont_states_ver7)
obtainContinuousStates_ver7(tree = tree, history = history,
alphaRoot = 1, alphaAlt = 1,
thetaRoot = 50, thetaAlt = 20,
sigmaRoot = 2, sigmaAlt = 2,
initialValue = 50, dt = 0.002)
corr_nodes[branch_order[1], 2]
names(corr_nodes[branch_order[1], 2])
obtainContinuousStates_ver7 = function(tree, history, alphaRoot, alphaAlt,
thetaRoot, thetaAlt, sigmaRoot, sigmaAlt,
initialValue = thetaRoot, dt = 0.002) {
cont_states <- list()
## obtain root state
root_state <- obtainRootState(tree)
branch_order <- rev(postorder(tree))
corr_nodes <- tree$edge
node0 <- corr_nodes[branch_order[1], 1]
node_values <- list()
node_values[[as.character(node0)]] <- initialValue
for (i in 1:length(branch_order)) {
sub_edges <- history$maps[[branch_order[i]]]
parent_node <- corr_nodes[branch_order[i], 1]
xt0 <- node_values[[as.character(parent_node)]]
for (j in 1:length(sub_edges)) {
dt_length = sub_edges[j] %/% dt
dt_remainder = sub_edges[j] %% dt
if (root_state == as.integer(names(sub_edges[j]))) {
for (k in 1:dt_length) {
xt1 <- xt0 + alphaRoot * (thetaRoot - xt0) * dt + sigmaRoot * sqrt(dt) * rnorm(1)
xt0 <- xt1
}
xt1 <- xt0 + alphaRoot * (thetaRoot - xt0) * dt_remainder + sigmaRoot * sqrt(dt_remainder) * rnorm(1)
xt0 <- xt1
}
else {
for (k in 1:dt_length) {
xt1 <- xt0 + alphaAlt * (thetaAlt - xt0) * dt + sigmaAlt * sqrt(dt) * rnorm(1)
xt0 <- xt1
}
xt1 <- xt0 + alphaAlt * (thetaAlt - xt0) * dt_remainder + sigmaAlt * sqrt(dt_remainder) * rnorm(1)
xt0 <- xt1
}
}
desc_node <- corr_nodes[branch_order[i], 2]
node_values[[as.character(desc_node)]] <- xt0
}
for (i in 1:length(corr_nodes[,2])) {
if (!(corr_nodes[i,2] %in% corr_nodes[,1])) {
tip_label <- tips(tree, corr_nodes[i,2])
cont_states[[tip_label]] <- node_values[[as.character(corr_nodes[i,2])]]
}
}
print(node_values)
return(cont_states)
}
obtainContinuousStates_ver7(tree = tree, history = history,
alphaRoot = 1, alphaAlt = 1,
thetaRoot = 50, thetaAlt = 20,
sigmaRoot = 2, sigmaAlt = 2,
initialValue = 50, dt = 0.002)
print(xt0)
obtainContinuousStates_ver7 = function(tree, history, alphaRoot, alphaAlt,
thetaRoot, thetaAlt, sigmaRoot, sigmaAlt,
initialValue = thetaRoot, dt = 0.002) {
cont_states <- list()
## obtain root state
root_state <- obtainRootState(tree)
branch_order <- rev(postorder(tree))
corr_nodes <- tree$edge
node0 <- corr_nodes[branch_order[1], 1]
node_values <- list()
node_values[[as.character(node0)]] <- initialValue
for (i in 1:length(branch_order)) {
sub_edges <- history$maps[[branch_order[i]]]
parent_node <- corr_nodes[branch_order[i], 1]
xt0 <- node_values[[as.character(parent_node)]]
for (j in 1:length(sub_edges)) {
dt_length = sub_edges[j] %/% dt
dt_remainder = sub_edges[j] %% dt
if (root_state == as.integer(names(sub_edges[j]))) {
for (k in 1:dt_length) {
xt1 <- xt0 + alphaRoot * (thetaRoot - xt0) * dt + sigmaRoot * sqrt(dt) * rnorm(1)
xt0 <- xt1
}
xt1 <- xt0 + alphaRoot * (thetaRoot - xt0) * dt_remainder + sigmaRoot * sqrt(dt_remainder) * rnorm(1)
xt0 <- xt1
}
else {
for (k in 1:dt_length) {
xt1 <- xt0 + alphaAlt * (thetaAlt - xt0) * dt + sigmaAlt * sqrt(dt) * rnorm(1)
xt0 <- xt1
}
xt1 <- xt0 + alphaAlt * (thetaAlt - xt0) * dt_remainder + sigmaAlt * sqrt(dt_remainder) * rnorm(1)
xt0 <- xt1
}
}
desc_node <- corr_nodes[branch_order[i], 2]
node_values[[as.character(desc_node)]] <- xt0
}
for (i in 1:length(corr_nodes[,2])) {
if (!(corr_nodes[i,2] %in% corr_nodes[,1])) {
tip_label <- tips(tree, corr_nodes[i,2])
cont_states[[tip_label]] <- node_values[[as.character(corr_nodes[i,2])]]
}
}
print(xt0)
return(cont_states)
}
obtainContinuousStates_ver7(tree = tree, history = history,
alphaRoot = 1, alphaAlt = 1,
thetaRoot = 50, thetaAlt = 20,
sigmaRoot = 2, sigmaAlt = 2,
initialValue = 50, dt = 0.002)
obtainContinuousStates_ver7 = function(tree, history, alphaRoot, alphaAlt,
thetaRoot, thetaAlt, sigmaRoot, sigmaAlt,
initialValue = thetaRoot, dt = 0.002) {
cont_states <- list()
## obtain root state
root_state <- obtainRootState(tree)
branch_order <- rev(postorder(tree))
corr_nodes <- tree$edge
node0 <- corr_nodes[branch_order[1], 1]
node_values <- list()
node_values[[as.character(node0)]] <- initialValue
for (i in 1:length(branch_order)) {
sub_edges <- history$maps[[branch_order[i]]]
parent_node <- corr_nodes[branch_order[i], 1]
xt0 <- node_values[[as.character(parent_node)]]
print(xt0)
for (j in 1:length(sub_edges)) {
dt_length = sub_edges[j] %/% dt
dt_remainder = sub_edges[j] %% dt
if (root_state == as.integer(names(sub_edges[j]))) {
for (k in 1:dt_length) {
xt1 <- xt0 + alphaRoot * (thetaRoot - xt0) * dt + sigmaRoot * sqrt(dt) * rnorm(1)
xt0 <- xt1
}
xt1 <- xt0 + alphaRoot * (thetaRoot - xt0) * dt_remainder + sigmaRoot * sqrt(dt_remainder) * rnorm(1)
xt0 <- xt1
}
else {
for (k in 1:dt_length) {
xt1 <- xt0 + alphaAlt * (thetaAlt - xt0) * dt + sigmaAlt * sqrt(dt) * rnorm(1)
xt0 <- xt1
}
xt1 <- xt0 + alphaAlt * (thetaAlt - xt0) * dt_remainder + sigmaAlt * sqrt(dt_remainder) * rnorm(1)
xt0 <- xt1
}
}
desc_node <- corr_nodes[branch_order[i], 2]
node_values[[as.character(desc_node)]] <- xt0
}
for (i in 1:length(corr_nodes[,2])) {
if (!(corr_nodes[i,2] %in% corr_nodes[,1])) {
tip_label <- tips(tree, corr_nodes[i,2])
cont_states[[tip_label]] <- node_values[[as.character(corr_nodes[i,2])]]
}
}
#return(cont_states)
}
obtainContinuousStates_ver7(tree = tree, history = history,
alphaRoot = 1, alphaAlt = 1,
thetaRoot = 50, thetaAlt = 20,
sigmaRoot = 2, sigmaAlt = 2,
initialValue = 50, dt = 0.002)
obtainContinuousStates_ver7 = function(tree, history, alphaRoot, alphaAlt,
thetaRoot, thetaAlt, sigmaRoot, sigmaAlt,
initialValue = thetaRoot, dt = 0.002) {
cont_states <- list()
## obtain root state
root_state <- obtainRootState(tree)
branch_order <- rev(postorder(tree))
corr_nodes <- tree$edge
node0 <- corr_nodes[branch_order[1], 1]
node_values <- list()
node_values[[as.character(node0)]] <- initialValue
for (i in 1:length(branch_order)) {
sub_edges <- history$maps[[branch_order[i]]]
parent_node <- corr_nodes[branch_order[i], 1]
xt0 <- node_values[[as.character(parent_node)]]
for (j in 1:length(sub_edges)) {
dt_length = sub_edges[j] %/% dt
dt_remainder = sub_edges[j] %% dt
if (root_state == as.integer(names(sub_edges[j]))) {
for (k in 1:dt_length) {
xt1 <- xt0 + alphaRoot * (thetaRoot - xt0) * dt + sigmaRoot * sqrt(dt) * rnorm(1)
xt0 <- xt1
}
xt1 <- xt0 + alphaRoot * (thetaRoot - xt0) * dt_remainder + sigmaRoot * sqrt(dt_remainder) * rnorm(1)
xt0 <- xt1
}
else {
for (k in 1:dt_length) {
xt1 <- xt0 + alphaAlt * (thetaAlt - xt0) * dt + sigmaAlt * sqrt(dt) * rnorm(1)
xt0 <- xt1
}
xt1 <- xt0 + alphaAlt * (thetaAlt - xt0) * dt_remainder + sigmaAlt * sqrt(dt_remainder) * rnorm(1)
xt0 <- xt1
}
}
desc_node <- corr_nodes[branch_order[i], 2]
node_values[[as.character(desc_node)]] <- xt0
}
for (i in 1:length(corr_nodes[,2])) {
if (!(corr_nodes[i,2] %in% corr_nodes[,1])) {
tip_label <- tips(tree, corr_nodes[i,2])
cont_states[[tip_label]] <- unname(node_values[[as.character(corr_nodes[i,2])]])
}
}
return(cont_states)
}
obtainContinuousStates_ver7(tree = tree, history = history,
alphaRoot = 1, alphaAlt = 1,
thetaRoot = 50, thetaAlt = 20,
sigmaRoot = 2, sigmaAlt = 2,
initialValue = 50, dt = 0.002)
cont_states_ver7 <- obtainContinuousStates_ver7(tree = tree, history = history,
alphaRoot = 2, alphaAlt = 2,
thetaRoot = 50, thetaAlt = 20,
sigmaRoot = 5, sigmaAlt = 5,
initialValue = 35, dt = 0.002)
View(cont_states_ver7)
var(unlist(cont_states_ver7))
write.nexus.data(cont_states_ver7, file = "data/n50_simulationContinuous.nex", format = "continuous")
write.tree(tree, file=paste0("data/n50_simulation.tre"))
View(history)
writeCharacterData(t(t(history$states)), file=paste0("data/n50_simulationDiscrete.nex"), type="Standard")
