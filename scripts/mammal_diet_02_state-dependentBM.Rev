################################################################################
#
# RevBayes Example: Bayesian inference of rates of evolution under a
#                   state-dependent Brownian-motion model
#
#
# authors: Sebastian Hoehna
#
################################################################################

#######################
# Reading in the Data #
#######################

### Select the character to analyze
characterCont <- 1
characterDisc <- 1

### Read in the tree
T <- readTrees("data/3_empirical/mammal_diet.tre")[1]
ntips <- T.ntips()
nbranches <- 2 * ntips - 2

### Read in the continuous-character data
cont <- readContinuousCharacterData("data/3_empirical/mammal_diet_Continuous.nex")
cont.excludeAll()
cont.includeCharacter(characterCont)

disc <- readDiscreteCharacterData("data/3_empirical/mammal_diet_Discrete.nex")
num_disc_states <- disc.getStateDescriptions().size()
disc.excludeAll()
disc.includeCharacter(characterDisc)


# Create some vector for the moves and monitors of this analysis
moves    = VectorMoves()
monitors = VectorMonitors()

##########################
# Specify the tree model #
##########################

tree <- T
root_age <- tree.rootAge()

########################################
# Specify the discrete-character model #
########################################

# make the Q matrix
rate_12 ~ dnLognormal(0,1)
rate_13 ~ dnLognormal(0,1)
rate_21 ~ dnLognormal(0,1)
rate_23 ~ dnLognormal(0,1)
rate_31 ~ dnLognormal(0,1)
rate_32 ~ dnLognormal(0,1)
rates <- [rate_12, rate_13, rate_21, rate_23, rate_31, rate_32]

Q <- fnFreeK(rates, rescaled=TRUE)


# make the transition rate parameter
lambda ~ dnLoguniform(1e-5, 2)
moves.append( mvScale(lambda, weight=1.0) )

# make the data-augmented CTCM model
X ~ dnPhyloCTMCDASiteIID(tree, Q, branchRates=lambda, type="Standard", nSites=1)
X.clamp(disc)

# include proposals for the discrete character history
moves.append( mvCharacterHistory(ctmc=X, qmap_site=Q, graph="node",   proposal="rejection", weight=20.0) )
moves.append( mvCharacterHistory(ctmc=X, qmap_site=Q, graph="branch", proposal="rejection", weight=20.0) )



# keep track of the number of transitions
for (i in 1:nbranches) {
    num_changes[i] := sum(X.numCharacterChanges(i))
}
total_num_changes := sum(num_changes)

char_hist := X.characterHistories()


##########################
# Specify the rate model #
##########################

for (i in 1:num_disc_states) {
    theta[i] ~ dnUniform(-8, 12)
    moves.append(mvSlide(theta[i], weight = 1.0) )
    sigma2[i] ~ dnLoguniform(1e-5, 10)
    moves.append(mvScale(sigma2[i], weight = 1.0) )
    alpha[i] <- 0.0
}



##########################
# Specify the OU process #
##########################

Y ~ dnPhyloOUSD(char_hist, theta=theta, rootTreatment="optimum", alpha=alpha, sigma=sigma2^0.5)
Y.clamp(cont)

#############
# The Model #
#############

mymodel = model(Y)

### set up the monitors that will output parameter values to file and screen
monitors.append( mnModel(filename="output/3_empirical/mammal_diet/02_state-dependentBM.log", printgen=10) )
monitors.append( mnScreen(printgen=1000, theta) )
monitors.append( mnStochasticCharacterMap(ctmc=X,
                                          filename="output/3_empirical/mammal_diet/02_state-dependentBM_charHist.log",
                                          printgen=10,
                                          include_simmap=true) )

################
# The Analysis #
################

### workspace mcmc ###
mymcmc = mcmc(mymodel, monitors, moves, nruns=1, combine="none")


### run the MCMC ###
mymcmc.burnin(generations=200, tuningInterval=100)
mymcmc.run(generations=1000)

#anc_trace = readAncestralStateTrace("output/3_empirical/mammal_diet/02_state-dependentBM_ancTrace.txt")
#stoc_trace = readStochasticVariableTrace(file="output/3_empirical/mammal_diet/02_state-dependentBM_stocTrace.txt",
                                         burnin=0.1) 
#anc_tree = ancestralStateTree(tree=tree, ancestral_state_trace_vector=anc_states, include_start_states=false, file="output/3_empirical/mammal_diet/02_state-dependentBM.tree", summary_statistic="MAP", site=1)



anc_tree = characterMapTree(tree=tree,
                            ancestral_state_trace_vector=anc_trace,
                            tree_trace=anc_trace,
                            reconstruction="joint",
                            burnin=0.1)

writeNexus( anc_tree, filename="output/3_empirical/mammal_diet/02_state-dependentBM.tree" )




## quit ##
q()


~/Applications/beast/bin/applauncher ClusterTreeSetAnalyser -trees data/speedemon/hi_only.trees -out data/speedemon/hi_only.txt -epsilon 1e-4 -burnin 10 

