################################################################################
#
# RevBayes Example: Testing hidden rates for state-dependent OU model
#
# authors: Priscilla Lau
#
################################################################################

#######################
# Reading in the Data #
#######################

### Select the character to analyze
characterDisc <- 1
characterCont <- 1

### Read in the tree
T <- readTrees("data/3_empirical/dummy_r6.tre")[1]
ntips <- T.ntips()
nbranches <- 2 * ntips - 2

disc <- readDiscreteCharacterData("data/3_empirical/dummy_r6_hidden_Discrete.nex")
num_disc_states <- disc.getStateDescriptions().size()

num_hidden_states <- 2
disc_exp <- disc.expandCharacters( num_hidden_states )
disc_exp.excludeAll()
disc_exp.includeCharacter(characterDisc)

cont <- readContinuousCharacterData("data/3_empirical/dummy_r6_Continuous.nex")
cont.excludeAll()
cont.includeCharacter(characterCont)

# Create some vector for the moves and monitors of this analysis
moves    = VectorMoves()
monitors = VectorMonitors()
avmvn_move = mvAVMVN(weight=10, waitBeforeLearning=500, waitBeforeUsing=1000)

##########################
# Specify the tree model #
##########################

tree <- T
root_age <- tree.rootAge()

########################################
# Specify the discrete-character model #
########################################

# make the Q matrix
for (i in 1:4) {
  for (j in 1:4) {
    rates[i][j] <- 0.0
  }
}

switch_hidden_01 ~ dnLognormal(0,1)
switch_hidden_10 ~ dnLognormal(0,1)
moves.append( mvScale( switch_hidden_01, weight=1 ) )
moves.append( mvScale( switch_hidden_10, weight=1 ) )

rates[1][2] ~ dnLognormal(0,1)     # 0S->1S
moves.append( mvScale( rates[1][2], weight=2 ) )
rates[1][3] := switch_hidden_01 # 0S->0F
rates[2][1] ~ dnLognormal(0,1)     # 1S->0S
moves.append( mvScale( rates[2][1], weight=2 ) )
rates[2][4] := switch_hidden_01 # 1S->1F
rates[3][1] := switch_hidden_10 # 0F->0S
rates[3][4] ~ dnLognormal(0,1)     # 0F->1F
moves.append( mvScale( rates[3][4], weight=2 ) )
rates[4][2] := switch_hidden_10 # 1F->1S
rates[4][3] ~ dnLognormal(0,1)     # 1F->0F
moves.append( mvScale( rates[4][3], weight=2 ) )

Q := fnFreeK(rates, rescaled=TRUE)

lambda ~ dnLognormal(ln(0.01), 0.4)
moves.append( mvScale(lambda, weight=1.0) )
avmvn_move.addVariable(lambda)

# make the data-augmented CTCM model
X ~ dnPhyloCTMCDASiteIID(tree, Q, branchRates=lambda, type="NaturalNumbers", nSites=1)
X.clamp(disc_exp)

# include proposals for the discrete character history
moves.append( mvCharacterHistory(ctmc=X, qmap_site=Q, graph="node",   proposal="rejection", weight=400.0) )
moves.append( mvCharacterHistory(ctmc=X, qmap_site=Q, graph="branch", proposal="rejection", weight=400.0) )

# keep track of the number of transitions
for(i in 1:nbranches) {
    num_changes[i] := sum(X.numCharacterChanges(i))
}
total_num_changes := sum(num_changes)

char_hist := X.characterHistories()



##############################
# continuous character model #
##############################

# set up OU parameters
for (i in 1:num_disc_states) {
  for (j in 1:num_hidden_states) {
    theta[i][j] <- 0.0
    halflife[i][j] <- 0.0
    alpha[i][j] <- 0.0
    stv[i][j] <- 0.0
    sigma2[i][j] <- 0.0
  }
}


theta[1][1] ~ dnSoftBoundUniformNormal(-5, 5, 1, 0.95)
moves.append(mvSlide(theta[1][1], weight = 1.0) )
avmvn_move.addVariable(theta[1][1])

theta[2][1] ~ dnNormal(theta[1][1], 4)
moves.append(mvSlide(theta[2][1], weight = 1.0) )
avmvn_move.addVariable(theta[2][1])

theta_gain[1] ~ dnLognormal(0, ln(3))
moves.append(mvSlide(theta_gain[1], weight = 1.0) )
avmvn_move.addVariable(theta_gain[1])

theta_gain[2] ~ dnLognormal(0, ln(3))
moves.append(mvSlide(theta_gain[2], weight = 1.0) )
avmvn_move.addVariable(theta_gain[2])

theta[2][2] := theta[2][1] + theta_gain[1]
theta[1][2] := theta[1][1] + theta_gain[2]

halflife[1][1] ~ dnLognormal(3.4, 1.044495)
moves.append(mvScale(halflife[1][1], weight = 1.0) )
avmvn_move.addVariable(halflife[1][1])
alpha[1][1] := abs(ln(2)/halflife[1][1])

halflife[2][1] ~ dnLognormal(ln(halflife[1][1]), 1.044495)
moves.append(mvScale(halflife[2][1], weight = 1.0) )
avmvn_move.addVariable(halflife[2][1])
alpha[2][1] := abs(ln(2)/halflife[2][1])

halflife[1][2] := halflife[1][1]
halflife[2][2] := halflife[2][1]
alpha[1][2] := alpha[1][1]
alpha[2][2] := alpha[2][1]

stv[1][1] ~ ~ dnLognormal(ln(stv[1][1]), 0.587405)
moves.append(mvScale(stv[1][1], weight = 1.0) )
avmvn_move.addVariable(stv[1][1])
sigma2[1][1] := stv[1][1] * 2 * alpha[1][1]

stv[2][1] ~ dnLognormal(ln(13), 0.587405)
moves.append(mvScale(stv[2][1], weight = 1.0) )
avmvn_move.addVariable(stv[2][1])
sigma2[2][1] := stv[2][1] * 2 * alpha[2][1]

stv[1][2] := stv[1][1]
stv[2][2] := stv[2][1]
sigma2[1][2] := sigma2[1][1]
sigma2[2][2] := sigma2[2][1]


##########################
# Specify the OU process #
##########################

Y ~ dnPhyloOUSD(char_hist, theta=theta, rootTreatment="optimum", alpha=alpha, sigma=sigma2^0.5)
Y.clamp(cont)

#############
# The Model #
#############

mymodel = model(Y)

monitors.append( mnModel(filename="output/3_empirical/sdOU_hiddenState.log", printgen=10) )
monitors.append( mnScreen(printgen=1000, theta) )
monitors.append( mnFile( char_hist, filename="output/3_empirical/sdOU_hiddenState.trees", printgen=100 ) )




################
# The Analysis #
################

### workspace mcmc ###
mymcmc = mcmc(mymodel, monitors, moves, nruns=1, combine="none")


### run the MCMC ###
mymcmc.burnin(generations=1000, tuningInterval=100)
mymcmc.run(generations= 10000, tuningInterval=200)

## quit ##
q()
