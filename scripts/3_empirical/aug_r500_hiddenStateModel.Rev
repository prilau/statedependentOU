################################################################################
#
# RevBayes Example: Testing hidden rates for state-dependent OU model
#
# authors: Priscilla Lau
#
################################################################################

#######################
# Reading in the Data #
#######################

### Select the character to analyze
characterDisc <- 1
characterCont <- 1

### Read in the tree
T <- readTrees("data/3_empirical/mammal_perMY_r500.tre")[1]
ntips <- T.ntips()
nbranches <- 2 * ntips - 2

disc <- readDiscreteCharacterData("data/3_empirical/mammal_diet3_r500_Discrete.nex")

disc.excludeAll()
disc.includeCharacter(characterDisc)
num_disc_states <- disc.getStateDescriptions().size()

num_hidden_states <- 2
disc_exp <- disc.expandCharacters( num_hidden_states )
disc_exp.excludeAll()
disc_exp.includeCharacter(characterDisc)

total_num_states <- num_disc_states * num_hidden_states

# Create some vector for the moves and monitors of this analysis
moves    = VectorMoves()
monitors = VectorMonitors()
avmvn_move = mvAVMVN(weight=10, waitBeforeLearning=500, waitBeforeUsing=1000)

##########################
# Specify the tree model #
##########################

tree <- T
root_age <- tree.rootAge()

########################################
# Specify the discrete-character model #
########################################

# make the Q matrix

for (i in 1:total_num_states) {
  for (j in 1:total_num_states) {
    rates[i][j] <- 0.0
  }
}

rates[1][2] ~ dnExp( root_age / 10 )
rates[1][4] ~ dnExp( root_age / 10 )
rates[1][5] ~ dnExp( root_age / 10 )
rates[2][1] ~ dnExp( root_age / 10 )
rates[2][3] ~ dnExp( root_age / 10 )
rates[2][5] ~ dnExp( root_age / 10 )
rates[3][2] ~ dnExp( root_age / 10 )
rates[3][5] ~ dnExp( root_age / 10 )
rates[3][6] ~ dnExp( root_age / 10 )
rates[4][1] ~ dnExp( root_age / 10 )
rates[5][1] ~ dnExp( root_age / 10 )
rates[5][2] ~ dnExp( root_age / 10 )
rates[5][3] ~ dnExp( root_age / 10 )
rates[6][3] ~ dnExp( root_age / 10 1)

moves.append( mvScale( rates[1][2], weight=1.0 ) )
moves.append( mvScale( rates[1][4], weight=1.0 ) )
moves.append( mvScale( rates[1][5], weight=1.0 ) )
moves.append( mvScale( rates[2][1], weight=1.0 ) )
moves.append( mvScale( rates[2][3], weight=1.0 ) )
moves.append( mvScale( rates[2][5], weight=1.0 ) )
moves.append( mvScale( rates[3][2], weight=1.0 ) )
moves.append( mvScale( rates[3][5], weight=1.0 ) )
moves.append( mvScale( rates[3][6], weight=1.0 ) )
moves.append( mvScale( rates[4][1], weight=1.0 ) )
moves.append( mvScale( rates[5][1], weight=1.0 ) )
moves.append( mvScale( rates[5][2], weight=1.0 ) )
moves.append( mvScale( rates[5][3], weight=1.0 ) )
moves.append( mvScale( rates[6][3], weight=1.0 ) )

avmvn_move.addVariable( rates[1][2] )
avmvn_move.addVariable( rates[1][4] )
avmvn_move.addVariable( rates[1][5] )
avmvn_move.addVariable( rates[2][1] )
avmvn_move.addVariable( rates[2][3] )
avmvn_move.addVariable( rates[2][5] )
avmvn_move.addVariable( rates[3][2] )
avmvn_move.addVariable( rates[3][5] )
avmvn_move.addVariable( rates[3][6] )
avmvn_move.addVariable( rates[4][1] )
avmvn_move.addVariable( rates[5][1] )
avmvn_move.addVariable( rates[5][2] )
avmvn_move.addVariable( rates[5][3] )
avmvn_move.addVariable( rates[6][3] )

Q := fnFreeK(rates, rescaled=TRUE)

lambda ~ dnLognormal(ln(0.01), 0.4) # should check lambda with aug model alone
moves.append( mvScale(lambda, weight=1.0) )
avmvn_move.addVariable(lambda)

X ~ dnPhyloCTMCDASiteIID(tree, Q, branchRates=lambda, type="Standard", nSites=1)
X.clamp(disc)

# include proposals for the discrete character history
moves.append( mvCharacterHistory(ctmc=X, qmap_site=Q, graph="tip",    proposal="rejection", weight=50.0) )
moves.append( mvCharacterHistory(ctmc=X, qmap_site=Q, graph="node",   proposal="rejection", weight=200.0) )
moves.append( mvCharacterHistory(ctmc=X, qmap_site=Q, graph="branch", proposal="rejection", weight=200.0) )

# keep track of the number of transitions
for(i in 1:nbranches) {
    num_changes[i] := sum(X.numCharacterChanges(i))
}
total_num_changes := sum(num_changes)

char_hist := X.characterHistories()


#############
# The Model #
#############

mymodel = model(X)

monitors.append( mnModel(filename="output/3_empirical/aug_r500_hiddenStateModel/run_" + RUN_INDEX + ".log", printgen=10) )
monitors.append( mnScreen(printgen=1000) )
monitors.append( mnFile( char_hist, filename="output/3_empirical/aug_r500_hiddenStateModel/run_" + RUN_INDEX + ".trees", printgen=100 ) )


################
# The Analysis #
################

### workspace mcmc ###
mymcmc = mcmc(mymodel, monitors, moves, nruns=1, combine="none")


### run the MCMC ###
mymcmc.burnin(generations=5000, tuningInterval=100) # comment out after first run
#mymcmc.initializeFromCheckpoint("output/3_empirical/aug_r500_hiddenStateModel/run_" + RUN_INDEX + ".state") #comment this out for the first run
mymcmc.run(generations=5000, tuningInterval=200, checkpointInterval=10, checkpointFile="output/3_empirical/aug_r500_hiddenStateModel/run_" + RUN_INDEX + ".state")

## quit ##
q()