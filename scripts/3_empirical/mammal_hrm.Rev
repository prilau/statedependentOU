################################################################################
#
# RevBayes Example: Testing hidden rates for state-dependent OU model
#
# authors: Priscilla Lau
#
################################################################################

#######################
# Reading in the Data #
#######################

### Select the character to analyze
characterDisc <- 1

### Read in the tree
T <- readTrees("data/3_empirical/mammal_perMY_n2955.tre")[1]
ntips <- T.ntips()
nbranches <- 2 * ntips - 2

disc <- readDiscreteCharacterData("data/3_empirical/mammal_hrm_Discrete.nex")

disc_exp <- disc.expandCharacters( 2 )
disc_exp.excludeAll()
disc_exp.includeCharacter(characterDisc)
num_disc_states <- disc_exp.getStateDescriptions().size()

cont <- readContinuousCharacterData("data/3_empirical/mammal_log_kg_Continuous.nex")
cont.excludeAll()
cont.includeCharacter(characterCont)

# Create some vector for the moves and monitors of this analysis
moves    = VectorMoves()
monitors = VectorMonitors()
avmvn_move = mvAVMVN(weight=10, waitBeforeLearning=500, waitBeforeUsing=1000)

##########################
# Specify the tree model #
##########################

tree <- T
root_age <- tree.rootAge()

########################################
# Specify the discrete-character model #
########################################

# make the Q matrix
for (i in 1:4) {
  for (j in 1:4) {
    rates[i][j] <- 0.0
  }
}

rates[1][2] ~ dnLognormal(0,1)
rates[1][3] ~ dnLognormal(0,1)
rates[2][1] ~ dnLognormal(0,1)
rates[2][4] ~ dnLognormal(0,1)
rates[3][1] ~ dnLognormal(0,1)
rates[3][4] ~ dnLognormal(0,1)
rates[4][2] ~ dnLognormal(0,1)
rates[4][3] ~ dnLognormal(0,1)

moves.append( mvScale(rates[1][2], weight=1.0) )
moves.append( mvScale(rates[1][3], weight=1.0) )
moves.append( mvScale(rates[2][1], weight=1.0) )
moves.append( mvScale(rates[2][4], weight=1.0) )
moves.append( mvScale(rates[3][1], weight=1.0) )
moves.append( mvScale(rates[3][4], weight=1.0) )
moves.append( mvScale(rates[4][2], weight=1.0) )
moves.append( mvScale(rates[4][3], weight=1.0) )

avmvn_move.addVariable(rates[1][2])
avmvn_move.addVariable(rates[1][3])
avmvn_move.addVariable(rates[2][1])
avmvn_move.addVariable(rates[2][4])
avmvn_move.addVariable(rates[3][1])
avmvn_move.addVariable(rates[3][4])
avmvn_move.addVariable(rates[4][2])
avmvn_move.addVariable(rates[4][3])

Q := fnFreeK(rates, rescaled=TRUE)

lambda ~ dnLognormal(ln(0.01), 0.4)
moves.append( mvScale(lambda, weight=1.0) )
avmvn_move.addVariable(lambda)

# make the data-augmented CTCM model
X ~ dnPhyloCTMCDASiteIID(tree, Q, branchRates=lambda, type="NaturalNumbers", nSites=1)
X.clamp(disc_exp)

# include proposals for the discrete character history
moves.append( mvCharacterHistory(ctmc=X, qmap_site=Q, graph="node",   proposal="rejection", weight=400.0) )
moves.append( mvCharacterHistory(ctmc=X, qmap_site=Q, graph="branch", proposal="rejection", weight=400.0) )

# keep track of the number of transitions
for(i in 1:nbranches) {
    num_changes[i] := sum(X.numCharacterChanges(i))
}
total_num_changes := sum(num_changes)

char_hist := X.characterHistories()



##############################
# continuous character model #
##############################
theta[1] ~ dnSoftBoundUniformNormal(-10, 10, 1, 0.95)
moves.append(mvSlide(theta[1], weight = 1.0) )
avmvn_move.addVariable(theta[1])

halflife[1] ~ dnLognormal(4.3613845, 1.044495)
moves.append(mvScale(halflife[1], weight = 1.0) )
avmvn_move.addVariable(halflife[1])
alpha[1] := abs(ln(2)/halflife[1])

stv[1] ~ dnLognormal(ln(12.39783716), 0.587405)
moves.append(mvScale(stv[1], weight = 1.0) )
avmvn_move.addVariable(stv[1])
sigma2[1] := stv[1] * 2 * alpha[1]


for (i in 2:num_disc_states){
  theta[i] ~ dnNormal(theta[i-1], 4)
  moves.append(mvSlide(theta[i], weight = 1.0) )
  avmvn_move.addVariable(theta[i])
  halflife[i] ~ dnLognormal(ln(halflife[i-1]), 1.044495)
  moves.append(mvScale(halflife[i], weight = 1.0) )
  avmvn_move.addVariable(halflife[i])
  alpha[i] := abs(ln(2)/halflife[i])
  stv[i] ~ dnLognormal(ln(stv[i-1]), 0.587405)
  moves.append(mvScale(stv[i], weight = 1.0) )
  avmvn_move.addVariable(stv[i])
  sigma2[i] := stv[i] * 2 * alpha[i]
}



##########################
# Specify the OU process #
##########################

Y ~ dnPhyloOUSD(char_hist, theta=theta, rootTreatment="optimum", alpha=alpha, sigma=sigma2^0.5)
Y.clamp(cont)

#############
# The Model #
#############

mymodel = model(Y)

monitors.append( mnModel(filename="output/3_empirical/sdOU_hrm.log", printgen=10) )
monitors.append( mnScreen(printgen=1000, theta) )
monitors.append( mnFile( char_hist, filename="output/3_empirical/sdOU_hrm.trees", printgen=100 ) )




################
# The Analysis #
################

### workspace mcmc ###
mymcmc = mcmc(mymodel, monitors, moves, nruns=1, combine="none")


### run the MCMC ###
mymcmc.burnin(generations=1000, tuningInterval=100)
mymcmc.run(generations= 10000, tuningInterval=200)

## quit ##
q()
