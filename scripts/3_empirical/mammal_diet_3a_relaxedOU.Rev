################################################################################
#
# RevBayes Example: Bayesian inference of rates of evolution under a
#                   state-dependent Brownian-motion model
#
#
# authors: Sebastian Hoehna
#
################################################################################

#######################
# Reading in the Data #
#######################

### Select the character to analyze
characterCont <- 1

### Read in the tree
T <- readTrees("data/3_empirical/mammal_diet.tre")[1]
ntips <- T.ntips()
nbranches <- 2 * ntips - 2

### Read in the continuous-character data
cont <- readContinuousCharacterData("data/3_empirical/mammal_diet_Continuous.nex")
cont.excludeAll()
cont.includeCharacter(characterCont)


# Create some vector for the moves and monitors of this analysis
moves    = VectorMoves()
monitors = VectorMonitors()

##########################
# Specify the tree model #
##########################

tree <- T
root_age <- tree.rootAge()


##########################
# Specify the rate model #
##########################


root_state ~ dnUniform(-8, 12)
moves.append(mvSlide(root_state, weight = 1.0) )

sigma2 ~ dnLoguniform(1e-5, 10)
moves.append(mvScale(sigma2, weight = 1.0) )

alpha ~ dnExponential( abs(root_age / 2.0 / ln(2.0)) )
moves.append(mvScale(alpha, weight = 1.0) )

halflife := ln(2.0) / alpha
rho := 1 - ( 1 - exp( -2 * alpha * root_age ) ) / ( 2 * alpha * root_age )



expected_number_of_shifts <- 5
shift_probability <- expected_number_of_shifts / nbranches
shift_distribution = dnNormal(0, 0.587)

for (i in nbranches:1) {

    # draw the theta shift from a mixture distribution
    branch_deltas[i] ~ dnReversibleJumpMixture(0, shift_distribution, Probability(1 - shift_probability) )

    # compute the theta for the branch
    if ( tree.isRoot( tree.parent(i) ) ) {
       branch_thetas[i] := root_state + branch_deltas[i]
    } else {
       branch_thetas[i] := branch_thetas[tree.parent(i)] + branch_deltas[i]
    }

    # keep track of whether the branch has a shift
    branch_theta_shift[i] := ifelse( branch_deltas[i] == 0, 0, 1 )

    # use reversible-jump to move between models with and without
    # shifts on the branch
    moves.append( mvRJSwitch(branch_deltas[i], weight=1) )

    # include proposals on the shift (when it is not 1)
    moves.append( mvScale(branch_deltas[i], weight=1) )

}

num_theta_changes := sum( branch_theta_shift )

##########################
# Specify the OU process #
##########################

Y ~ dnPhyloOrnsteinUhlenbeckPruning(tree, alpha=alpha, sigma=sigma2^0.5, theta=branch_thetas, rootStates=root_state)
Y.clamp(cont)

#############
# The Model #
#############

mymodel = model(Y)

### set up the monitors that will output parameter values to file and screen
monitors.append( mnModel(filename="output/3_empirical/mammal_diet/04_relaxedOU.log", printgen=10) )
monitors.append( mnScreen(printgen=1000, alpha) )
monitors.append( mnExtNewick(filename="output/3_empirical/mammal_diet/04_relaxedOU.trees", isNodeParameter=TRUE, printgen=10, separator=TAB, tree=tree, branch_thetas) )

################
# The Analysis #
################

### workspace mcmc ###
mymcmc = mcmc(mymodel, monitors, moves, nruns=1, combine="none")


### run the MCMC ###
mymcmc.burnin(generations=500, tuningInterval=100)
mymcmc.run(generations=5000)

treetrace = readTreeTrace("output/3_empirical/mammal_diet/04_relaxedOU.trees")
map_tree = mapTree(treetrace,"output/3_empirical/mammal_diet/04_relaxedOU_mapped.tree")


## quit ##
q()
