################################################################################
#
# RevBayes Example: Bayesian inference of rates of evolution under a
#                   state-dependent Brownian-motion model
#
#
# authors: Sebastian Hoehna
#
################################################################################

#######################
# Reading in the Data #
#######################

### Select the character to analyze
characterDisc <- 1

### Read in the tree
T <- readTrees("data/3_empirical/mammal_perMY_r500.tre")[1]
ntips <- T.ntips()
nbranches <- 2 * ntips - 2

disc <- readDiscreteCharacterData("data/3_empirical/mammal_diet4_r500_Discrete.nex")
num_disc_states <- disc.getStateDescriptions().size()
disc.excludeAll()
disc.includeCharacter(characterDisc)


# Create some vector for the moves and monitors of this analysis
moves    = VectorMoves()
monitors = VectorMonitors()
avmvn_move = mvAVMVN(weight=10, waitBeforeLearning=500, waitBeforeUsing=1000)

##########################
# Specify the tree model #
##########################

tree <- T
root_age <- tree.rootAge()

########################################
# Specify the discrete-character model #
########################################

# make the Q matrix
rate_pr := tree.treeLength() / 10

rate_12 ~ dnExp( root_age / 10)
rate_21 ~ dnExp( root_age / 10)
rate_13 ~ dnExp( root_age / 10)
rate_31 ~ dnExp( root_age / 10)
rate_14 ~ dnExp( root_age / 10)
rate_41 ~ dnExp( root_age / 10)
rate_23 ~ dnExp( root_age / 10)
rate_32 ~ dnExp( root_age / 10)
rate_24 ~ dnExp( root_age / 10)
rate_42 ~ dnExp( root_age / 10)
rate_34 ~ dnExp( root_age / 10)
rate_43 ~ dnExp( root_age / 10)

moves.append( mvScale(rate_12, weight=1.0) )
moves.append( mvScale(rate_21, weight=1.0) )
moves.append( mvScale(rate_13, weight=1.0) )
moves.append( mvScale(rate_31, weight=1.0) )
moves.append( mvScale(rate_14, weight=1.0) )
moves.append( mvScale(rate_41, weight=1.0) )
moves.append( mvScale(rate_23, weight=1.0) )
moves.append( mvScale(rate_32, weight=1.0) )
moves.append( mvScale(rate_24, weight=1.0) )
moves.append( mvScale(rate_42, weight=1.0) )
moves.append( mvScale(rate_34, weight=1.0) )
moves.append( mvScale(rate_43, weight=1.0) )

avmvn_rate_12 = mvAVMVN(weight=2, waitBeforeLearning=500, waitBeforeUsing=1000)
avmvn_rate_21 = mvAVMVN(weight=2, waitBeforeLearning=500, waitBeforeUsing=1000)
avmvn_rate_13 = mvAVMVN(weight=2, waitBeforeLearning=500, waitBeforeUsing=1000)
avmvn_rate_31 = mvAVMVN(weight=2, waitBeforeLearning=500, waitBeforeUsing=1000)
avmvn_rate_14 = mvAVMVN(weight=2, waitBeforeLearning=500, waitBeforeUsing=1000)
avmvn_rate_41 = mvAVMVN(weight=2, waitBeforeLearning=500, waitBeforeUsing=1000)
avmvn_rate_23 = mvAVMVN(weight=2, waitBeforeLearning=500, waitBeforeUsing=1000)
avmvn_rate_32 = mvAVMVN(weight=2, waitBeforeLearning=500, waitBeforeUsing=1000)
avmvn_rate_24 = mvAVMVN(weight=2, waitBeforeLearning=500, waitBeforeUsing=1000)
avmvn_rate_42 = mvAVMVN(weight=2, waitBeforeLearning=500, waitBeforeUsing=1000)
avmvn_rate_34 = mvAVMVN(weight=2, waitBeforeLearning=500, waitBeforeUsing=1000)
avmvn_rate_43 = mvAVMVN(weight=2, waitBeforeLearning=500, waitBeforeUsing=1000)

avmvn_rate_12.addVariable(rate_12)
avmvn_rate_21.addVariable(rate_21)
avmvn_rate_13.addVariable(rate_13)
avmvn_rate_31.addVariable(rate_31)
avmvn_rate_14.addVariable(rate_14)
avmvn_rate_41.addVariable(rate_41)
avmvn_rate_23.addVariable(rate_23)
avmvn_rate_32.addVariable(rate_32)
avmvn_rate_24.addVariable(rate_24)
avmvn_rate_42.addVariable(rate_42)
avmvn_rate_34.addVariable(rate_34)
avmvn_rate_43.addVariable(rate_43)

moves.append( avmvn_rate_12 )
moves.append( avmvn_rate_21 )
moves.append( avmvn_rate_13 )
moves.append( avmvn_rate_31 )
moves.append( avmvn_rate_14 )
moves.append( avmvn_rate_41 )
moves.append( avmvn_rate_23 )
moves.append( avmvn_rate_32 )
moves.append( avmvn_rate_24 )
moves.append( avmvn_rate_42 )
moves.append( avmvn_rate_34 )
moves.append( avmvn_rate_43 )

Q := fnFreeK([rate_12, rate_13, rate_14, rate_21, rate_23, rate_24, rate_31, rate_32, rate_34, rate_41, rate_42, rate_43], rescaled=FALSE)

rf_prior <- rep(1,num_disc_states)
rf ~ dnDirichlet( rf_prior )
moves.append( mvBetaSimplex( rf, weight=2 ) )
moves.append( mvDirichletSimplex( rf, weight=2 ) )
avmvn_rf = mvAVMVN(weight=2, waitBeforeLearning=500, waitBeforeUsing=1000)
avmvn_rf.addVariable( rf )

# make the CTCM model
X ~ dnPhyloCTMC(tree=tree, Q=Q, rootFrequencies=rf, type="Standard")
X.clamp(disc)



#############
# The Model #
#############

mymodel = model(X)

monitors.append( mnModel(filename="output/3_empirical/ase_r500_4State/trace_run_" + RUN_INDEX + ".log", printgen=10) )
monitors.append( mnScreen(printgen=1000) )
monitors.append( mnJointConditionalAncestralState(tree=tree,
                                                  ctmc=X,
                                                  filename="output/3_empirical/ase_r500_4State/states_run_" + RUN_INDEX + ".log",
                                                  type="Standard",
                                                  printgen=10,
                                                  withTips=true,
                                                  withStartStates=false) )

monitors.append( mnStochasticCharacterMap(ctmc=X,
                                          filename="output/3_empirical/ase_r500_4State/simmap_run_" + RUN_INDEX + ".log",
                                          printgen=10,
                                          include_simmap=true) )




################
# The Analysis #
################

### workspace mcmc ###
mymcmc = mcmc(mymodel, monitors, moves, nruns=1, combine="none")


### run the MCMC ###
mymcmc.burnin(generations=5000, tuningInterval=100)
mymcmc.run(generations= 50000, tuningInterval=200)

anc_states = readAncestralStateTrace("output/3_empirical/ase_r500_4State/states_run_" + RUN_INDEX + ".log")
anc_tree = ancestralStateTree(tree=tree, ancestral_state_trace_vector=anc_states, include_start_states=false, file="output/3_empirical/ase_r500_4State/anc_states_run_" + RUN_INDEX + ".tre", burnin=0.0, summary_statistic="MAP", site=1, nStates=4)
anc_states_stoch_map = readAncestralStateTrace("output/3_empirical/ase_r500_4State/simmap_run_" + RUN_INDEX + ".log")
char_map_tree = characterMapTree(tree=tree,
                 ancestral_state_trace_vector=anc_states_stoch_map,
                 character_file="output/3_empirical/ase_r500_4State/marginal_character_run_" + RUN_INDEX + ".tree",
                 posterior_file="output/3_empirical/ase_r500_4State/marginal_posterior_run_" + RUN_INDEX + ".tree",
                 burnin=0.0,
                 num_time_slices=500)


## quit ##
q()
