################################################################################
#
# RevBayes Example: Bayesian inference of rates of evolution under a
#                   state-dependent Brownian-motion model
#
#
# authors: Sebastian Hoehna
#
################################################################################

#######################
# Reading in the Data #
#######################

### Select the character to analyze
characterDisc <- 1

### Read in the tree
T <- readTrees("data/3_empirical/mammal_perMY_n3500.tre")[1]
ntips <- T.ntips()
nbranches <- 2 * ntips - 2

disc <- readDiscreteCharacterData("data/3_empirical/mammal_diet7_n3500_Discrete.nex")
num_disc_states <- disc.getStateDescriptions().size()
disc.excludeAll()
disc.includeCharacter(characterDisc)


# Create some vector for the moves and monitors of this analysis
moves    = VectorMoves()
monitors = VectorMonitors()
avmvn_rates = mvAVMVN(weight=20, waitBeforeLearning=500, waitBeforeUsing=1000)
avmvn_rf = mvAVMVN(weight=5, waitBeforeLearning=500, waitBeforeUsing=1000)

##########################
# Specify the tree model #
##########################

tree <- T
root_age <- tree.rootAge()

########################################
# Specify the discrete-character model #
########################################

# make the Q matrix

rates := rep(0,42)
rates[2] ~ dnLognormal(0, 0.1)
rates[4] ~ dnLognormal(0, 0.1)
rates[8] ~ dnLognormal(0, 0.1)
rates[11] ~ dnLognormal(0, 0.1)
rates[13] ~ dnLognormal(0, 0.1)
rates[14] ~ dnLognormal(0, 0.1)
rates[18] ~ dnLognormal(0, 0.1)
rates[22] ~ dnLognormal(0, 0.1)
rates[23] ~ dnLognormal(0, 0.1)
rates[25] ~ dnLognormal(0, 0.1)
rates[28] ~ dnLognormal(0, 0.1)
rates[30] ~ dnLognormal(0, 0.1)
rates[32] ~ dnLognormal(0, 0.1)
rates[34] ~ dnLognormal(0, 0.1)
rates[36] ~ dnLognormal(0, 0.1)
rates[39] ~ dnLognormal(0, 0.1)
rates[41] ~ dnLognormal(0, 0.1)
rates[42] ~ dnLognormal(0, 0.1)

moves.append( mvScale(rates[2] , weight=1.0) )
moves.append( mvScale(rates[4] , weight=1.0) )
moves.append( mvScale(rates[8] , weight=1.0) )
moves.append( mvScale(rates[11], weight=1.0) )
moves.append( mvScale(rates[13], weight=1.0) )
moves.append( mvScale(rates[14], weight=1.0) )
moves.append( mvScale(rates[18], weight=1.0) )
moves.append( mvScale(rates[22], weight=1.0) )
moves.append( mvScale(rates[23], weight=1.0) )
moves.append( mvScale(rates[25], weight=1.0) )
moves.append( mvScale(rates[28], weight=1.0) )
moves.append( mvScale(rates[30], weight=1.0) )
moves.append( mvScale(rates[32], weight=1.0) )
moves.append( mvScale(rates[34], weight=1.0) )
moves.append( mvScale(rates[36], weight=1.0) )
moves.append( mvScale(rates[39], weight=1.0) )
moves.append( mvScale(rates[41], weight=1.0) )
moves.append( mvScale(rates[42], weight=1.0) )


avmvn_rates.addVariable( rates[2] )
avmvn_rates.addVariable( rates[4] )
avmvn_rates.addVariable( rates[8] )
avmvn_rates.addVariable( rates[11] )
avmvn_rates.addVariable( rates[13] )
avmvn_rates.addVariable( rates[14] )
avmvn_rates.addVariable( rates[18] )
avmvn_rates.addVariable( rates[22] )
avmvn_rates.addVariable( rates[23] )
avmvn_rates.addVariable( rates[25] )
avmvn_rates.addVariable( rates[28] )
avmvn_rates.addVariable( rates[30] )
avmvn_rates.addVariable( rates[32] )
avmvn_rates.addVariable( rates[34] )
avmvn_rates.addVariable( rates[36] )
avmvn_rates.addVariable( rates[39] )
avmvn_rates.addVariable( rates[41] )
avmvn_rates.addVariable( rates[42] )


moves.append( avmvn_rates )

Q := fnFreeK(rates, rescaled=FALSE)

rf_prior <- rep(1,num_disc_states)
rf ~ dnDirichlet( rf_prior )
moves.append( mvBetaSimplex( rf, weight=2 ) )
moves.append( mvDirichletSimplex( rf, weight=2 ) )
avmvn_rf.addVariable( rf )
moves.append( avmvn_rf )

# make the CTCM model
X ~ dnPhyloCTMC(tree=tree, Q=Q, rootFrequencies=rf, type="Standard")
X.clamp(disc)

#############
# The Model #
#############

mymodel = model(X)

monitors.append( mnModel(filename="output/3_empirical/ase_n3500_7State/trace_run_" + RUN_INDEX + ".log", printgen=10) )
monitors.append( mnScreen(printgen=1000) )
monitors.append( mnJointConditionalAncestralState(tree=tree,
                                                  ctmc=X,
                                                  filename="output/3_empirical/ase_n3500_7State/states_run_" + RUN_INDEX + ".log",
                                                  type="Standard",
                                                  printgen=10,
                                                  withTips=true,
                                                  withStartStates=false) )

monitors.append( mnStochasticCharacterMap(ctmc=X,
                                          filename="output/3_empirical/ase_n3500_7State/simmap_run_" + RUN_INDEX + ".log",
                                          printgen=10,
                                          include_simmap=true) )




################
# The Analysis #
################

### workspace mcmc ###
mymcmc = mcmc(mymodel, monitors, moves, nruns=1, combine="none")


### run the MCMC ###
mymcmc.burnin(generations=5000, tuningInterval=100)
mymcmc.run(generations=50000, tuningInterval=200)

anc_states = readAncestralStateTrace("output/3_empirical/ase_n3500_7State/states_run_" + RUN_INDEX + ".log")
anc_tree = ancestralStateTree(tree=tree, ancestral_state_trace_vector=anc_states, include_start_states=false, file="output/3_empirical/ase_n3500_7State/anc_states_run_" + RUN_INDEX + ".tre", burnin=0.0, summary_statistic="MAP", site=1, nStates=3)
anc_states_stoch_map = readAncestralStateTrace("output/3_empirical/ase_n3500_7State/simmap_run_" + RUN_INDEX + ".log")
char_map_tree = characterMapTree(tree=tree,
                 ancestral_state_trace_vector=anc_states_stoch_map,
                 character_file="output/3_empirical/ase_n3500_7State/marginal_character_run_" + RUN_INDEX + ".tree",
                 posterior_file="output/3_empirical/ase_n3500_7State/marginal_posterior_run_" + RUN_INDEX + ".tree",
                 burnin=0.0,
                 num_time_slices=500)


## quit ##
q()
