################################################################################
#
# RevBayes Example: Testing hidden rates for state-dependent OU model
#
# authors: Priscilla Lau
#
################################################################################

#######################
# Reading in the Data #
#######################

### Select the character to analyze
characterDisc <- 1

### Read in the tree
T <- readTrees("data/3_empirical/mammal_perMY_r500.tre")[1]
ntips <- T.ntips()
nbranches <- 2 * ntips - 2

disc <- readDiscreteCharacterData("data/3_empirical/mammal_diet3_r500_Discrete.nex")

disc.excludeAll()
disc.includeCharacter(characterDisc)
num_disc_states <- disc.getStateDescriptions().size()

# Create some vector for the moves and monitors of this analysis
moves    = VectorMoves()
monitors = VectorMonitors()
avmvn_rates = mvAVMVN(weight=20, waitBeforeLearning=500, waitBeforeUsing=1000)
avmvn_ou = mvAVMVN(weight=20, waitBeforeLearning=500, waitBeforeUsing=1000)

##########################
# Specify the tree model #
##########################

tree <- T
root_age <- tree.rootAge()

########################################
# Specify the discrete-character model #
########################################

# make the Q matrix

rate_12 := 0.00393
rate_21 := 0.0131
rate_13 := 0
rate_31 := 0
rate_23 := 0.00636
rate_32 := 0.00516

rates ~ dnDirichlet([rate_12, rate_13, rate_21, rate_23, rate_31, rate_32]*5000)
moves.append( mvBetaSimplex( rates, weight=2 ) )
moves.append( mvDirichletSimplex( rates, weight=2 ) )
avmvn_rates.addVariable( rates )

Q := fnFreeK(rates, rescaled=TRUE)

lambda ~ dnLoguniform(ln(0.05), 0.4)
moves.append( mvScale(lambda, weight=1.0) )
avmvn_rates.addVariable( lambda )

moves.append( avmvn_rates )

X ~ dnPhyloCTMCDASiteIID(tree, Q, branchRates=lambda, type="Standard", nSites=1)
X.clamp(disc)


# include proposals for the discrete character history
moves.append( mvCharacterHistory(ctmc=X, qmap_site=Q, graph="node",   proposal="rejection", weight=800.0) )
moves.append( mvCharacterHistory(ctmc=X, qmap_site=Q, graph="branch", proposal="rejection", weight=800.0) )

# keep track of the number of transitions
for(i in 1:nbranches) {
    num_changes[i] := sum(X.numCharacterChanges(i))
}
total_num_changes := sum(num_changes)

char_hist := X.characterHistories()


#############
# The Model #
#############

mymodel = model(X)

monitors.append( mnModel(filename="output/3_empirical/aug_r500_3StateOrderedModel/trace_run_" + RUN_INDEX + ".log", printgen=10) )
monitors.append( mnScreen(printgen=1000) )
monitors.append( mnFile( char_hist, filename="output/3_empirical/aug_r500_3StateOrderedModel/augch_run_" + RUN_INDEX + ".trees", printgen=100 ) )


################
# The Analysis #
################

### workspace mcmc ###
mymcmc = mcmc(mymodel, monitors, moves, nruns=1, combine="none")


### run the MCMC ###
mymcmc.burnin(generations=5000, tuningInterval=100) # comment out after first run

#mymcmc.initializeFromCheckpoint("output/3_empirical/aug_r500_3StateOrderedModel/run_" + RUN_INDEX + ".state") #comment this out for the first run
mymcmc.run(generations=25000, tuningInterval=200, checkpointInterval=50, checkpointFile="output/3_empirical/aug_r500_3StateOrderedModel/run_" + RUN_INDEX + ".state")
mymcmc.operatorSummary()

## quit ##
q()