################################################################################
#
# RevBayes Example: Testing hidden rates for state-dependent OU model
#
# authors: Priscilla Lau
#
################################################################################

#######################
# Reading in the Data #
#######################

### Select the character to analyze
characterDisc <- 1
characterCont <- 1

### Read in the tree
T <- readTrees("data/3_empirical/mammal_perMY_r500.tre")[1]
ntips <- T.ntips()
nbranches <- 2 * ntips - 2

disc <- readDiscreteCharacterData("data/3_empirical/mammal_diet3_r500_Discrete.nex")

disc.excludeAll()
disc.includeCharacter(characterDisc)
num_disc_states <- disc.getStateDescriptions().size()

num_hidden_states <- 2
disc_exp <- disc.expandCharacters( num_hidden_states )
disc_exp.excludeAll()
disc_exp.includeCharacter(characterDisc)

total_num_states <- num_disc_states * num_hidden_states

cont <- readContinuousCharacterData("data/3_empirical/mammal_log_kg_r500_Continuous.nex")
cont.excludeAll()
cont.includeCharacter(characterCont)

# Create some vector for the moves and monitors of this analysis
moves    = VectorMoves()
monitors = VectorMonitors()
avmvn_rates = mvAVMVN(weight=25, waitBeforeLearning=500, waitBeforeUsing=1000)
avmvn_ou = mvAVMVN(weight=15, waitBeforeLearning=500, waitBeforeUsing=1000)

##########################
# Specify the tree model #
##########################

tree <- T
root_age <- tree.rootAge()

########################################
# Specify the discrete-character model #
########################################

# make the Q matrix

tol_rate <- 0.00393 + 0.0131 + 0.00636 + 0.00516

rel_12 := 0.00393 / tol_rate
rel_21 := 0.01310 / tol_rate
rel_23 := 0.00636 / tol_rate
rel_32 := 0.00516 / tol_rate
rel_45 := 0.00393 / tol_rate
rel_54 := 0.01310 / tol_rate
rel_56 := 0.00636 / tol_rate
rel_65 := 0.00516 / tol_rate

rel_rates ~ dnDirichlet([rel_12, rel_21, rel_23, rel_32, rel_45, rel_54, rel_56, rel_65]*2500)
moves.append( mvBetaSimplex( rel_rates, weight=2 ) )
moves.append( mvDirichletSimplex( rel_rates, weight=2 ) )
avmvn_rates.addVariable( rel_rates )

rate_12 := rel_rates[1]
rate_21 := rel_rates[2]
rate_23 := rel_rates[3]
rate_22 := rel_rates[4]
rate_45 := rel_rates[5]
rate_54 := rel_rates[6]
rate_56 := rel_rates[7]
rate_65 := rel_rates[8]

lambda ~ dnLognormal(ln(0.05), 0.4)
moves.append( mvScale(lambda, weight=1.0) )
avmvn_rates.addVariable(lambda)

rates := rel_rates * lambda

rate_14 ~ dnLognormal(-5, 1)
rate_41 ~ dnLognormal(-5, 1)
rate_25 ~ dnLognormal(-5, 1)
rate_52 ~ dnLognormal(-5, 1)
rate_36 ~ dnLognormal(-5, 1)
rate_63 ~ dnLognormal(-5, 1)

moves.append( mvScale(rate_14, weight=1.0) )
moves.append( mvScale(rate_41, weight=1.0) )
moves.append( mvScale(rate_25, weight=1.0) )
moves.append( mvScale(rate_52, weight=1.0) )
moves.append( mvScale(rate_36, weight=1.0) )
moves.append( mvScale(rate_63, weight=1.0) )

avmvn_rates.addVariable(rate_14)
avmvn_rates.addVariable(rate_41)
avmvn_rates.addVariable(rate_25)
avmvn_rates.addVariable(rate_52)
avmvn_rates.addVariable(rate_36)
avmvn_rates.addVariable(rate_63)

moves.append( avmvn_rates )

Q := fnFreeK([rates[1], 0,        rate_14, 0,       0,
              rates[2], rates[3], 0,       rate_25, 0,
              0,        rates[4], 0,       0,       rate_36,
              rate_41,  0,        0,       rates[5], 0,
              0,        rate_52,  0,       rates[6], rates[7],
              0,        0,        rate_63, 0,        rates[8]],
             
             rescaled=FALSE)

moves.append( avmvn_rates )

X ~ dnPhyloCTMCDASiteIID(tree, Q, branchRates=1, type="NaturalNumbers", nSites=1)
X.clamp(disc_exp)

# include proposals for the discrete character history
moves.append( mvCharacterHistory(ctmc=X, qmap_site=Q, graph="tip",    proposal="rejection", weight=1000.0) )
moves.append( mvCharacterHistory(ctmc=X, qmap_site=Q, graph="node",   proposal="rejection", weight=2000.0) )
moves.append( mvCharacterHistory(ctmc=X, qmap_site=Q, graph="branch", proposal="rejection", weight=2000.0) )

# keep track of the number of transitions
for(i in 1:nbranches) {
    num_changes[i] := sum(X.numCharacterChanges(i))
}
total_num_changes := sum(num_changes)

char_hist := X.characterHistories()

##############################
# continuous character model #
##############################

# herbivores
theta[1] ~ dnUniform(-10, 15)
moves.append(mvSlide(theta[1], weight = 1.0) )
avmvn_ou.addVariable(theta[1])

halflife[1] ~ dnLognormal(4.16, 1.044495)
moves.append(mvScale(halflife[1], weight = 1.0) )
avmvn_ou.addVariable(halflife[1])
alpha[1] := abs(ln(2)/halflife[1])

stv[1] ~ dnLognormal(ln(10), 0.587405)
moves.append(mvScale(stv[1], weight = 1.0) )
avmvn_ou.addVariable(stv[1])
sigma2[1] := stv[1] * 2 * alpha[1]


# omnivores (hidden state 0)
theta[2] ~ dnNormal(theta[1], 4)
moves.append(mvSlide(theta[2], weight = 1.0) )
avmvn_ou.addVariable(theta[2])

halflife[2] ~ dnLognormal(ln(halflife[1]), 0.587405)
moves.append(mvScale(halflife[2], weight = 1.0) )
avmvn_ou.addVariable(halflife[2])
alpha[2] := abs(ln(2)/halflife[2])

stv[2] ~ dnLognormal(ln(stv[1]), 0.587405)
moves.append(mvScale(stv[2], weight = 1.0) )
avmvn_ou.addVariable(stv[2])
sigma2[2] := stv[2] * 2 * alpha[2]


# carnivores
theta[3] ~ dnNormal(theta[2], 4)
moves.append(mvSlide(theta[3], weight = 1.0) )
avmvn_ou.addVariable(theta[3])

halflife[3] ~ dnLognormal(ln(halflife[2]), 0.587405)
moves.append(mvScale(halflife[3], weight = 1.0) )
avmvn_ou.addVariable(halflife[3])
alpha[3] := abs(ln(2)/halflife[3])

stv[3] ~ dnLognormal(ln(stv[2]), 0.587405)
moves.append(mvScale(stv[3], weight = 1.0) )
avmvn_ou.addVariable(stv[3])
sigma2[3] := stv[3] * 2 * alpha[3]

# herbivores (dummy state)
theta[4]    := theta[1]   
halflife[4] := halflife[1]
alpha[4] := abs(ln(2)/halflife[4])
stv[4]      := stv[1]     
sigma2[4] := stv[4] * 2 * alpha[4]

# omnivores (hidden state 1)
theta[5] ~ dnUniform(-10 , theta[2])
moves.append(mvSlide(theta[5], weight = 1.0) )
avmvn_ou.addVariable(theta[5])

halflife[5] := halflife[2]
#halflife[5] ~ dnLognormal(ln(halflife[2]), 0.587405)
#moves.append(mvScale(halflife[5], weight = 1.0) )
#avmvn_ou.addVariable(halflife[5])
alpha[5] := abs(ln(2)/halflife[5])

stv[5] := stv[2]
#stv[5] ~ dnLognormal(ln(stv[2]), 0.587405)
#moves.append(mvScale(stv[5], weight = 1.0) )
#avmvn_ou.addVariable(stv[5])
sigma2[5] := stv[5] * 2 * alpha[5]

# carnivores (dummy state)
theta[6]    := theta[3]   
halflife[6] := halflife[3]
alpha[6]    := abs(ln(2)/halflife[6])
stv[6]      := stv[3]
sigma2[6]   := stv[6] * 2 * alpha[6]

moves.append( avmvn_ou )

##########################
# Specify the OU process #
##########################

Y ~ dnPhyloOUSD(char_hist, theta=theta, rootTreatment="optimum", alpha=alpha, sigma=sigma2^0.5)
Y.clamp(cont)

#############
# The Model #
#############

mymodel = model(Y)

monitors.append( mnModel(filename="output/3_empirical/sdOU_r500_hiddenStateModel/trace_run_" + RUN_INDEX + ".log", printgen=10) )
monitors.append( mnScreen(printgen=1000) )
monitors.append( mnFile( char_hist, filename="output/3_empirical/sdOU_r500_hiddenStateModel/augch_run_" + RUN_INDEX + ".trees", printgen=100 ) )


################
# The Analysis #
################

### workspace mcmc ###
mymcmc = mcmc(mymodel, monitors, moves, nruns=1, combine="none")


### run the MCMC ###
#mymcmc.burnin(generations=12000, tuningInterval=100) # comment out after first run

#mymcmc.initializeFromCheckpoint("output/3_empirical/sdOU_r500_hiddenStateModel/run_" + RUN_INDEX + ".state") #comment this out for the first run
mymcmc.run(generations=150000, tuningInterval=200, checkpointInterval=50, checkpointFile="output/3_empirical/sdOU_r500_hiddenStateModel/run_" + RUN_INDEX + ".state")
mymcmc.operatorSummary()

## quit ##
q()