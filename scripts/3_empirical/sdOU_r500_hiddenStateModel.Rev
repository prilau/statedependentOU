################################################################################
#
# RevBayes Example: Testing hidden rates for state-dependent OU model
#
# authors: Priscilla Lau
#
################################################################################

#######################
# Reading in the Data #
#######################

### Select the character to analyze
characterDisc <- 1
characterCont <- 1

### Read in the tree
T <- readTrees("data/3_empirical/mammal_perMY_r500.tre")[1]
ntips <- T.ntips()
nbranches <- 2 * ntips - 2

disc <- readDiscreteCharacterData("data/3_empirical/mammal_diet3_r500_Discrete.nex")

disc.excludeAll()
disc.includeCharacter(characterDisc)
num_disc_states <- disc.getStateDescriptions().size()

num_hidden_states <- 2
disc_exp <- disc.expandCharacters( num_hidden_states )
disc_exp.excludeAll()
disc_exp.includeCharacter(characterDisc)

total_num_states <- num_disc_states * num_hidden_states

cont <- readContinuousCharacterData("data/3_empirical/mammal_log_kg_r500_Continuous.nex")
cont.excludeAll()
cont.includeCharacter(characterCont)

# Create some vector for the moves and monitors of this analysis
moves    = VectorMoves()
monitors = VectorMonitors()
avmvn_rates = mvAVMVN(weight=20, waitBeforeLearning=500, waitBeforeUsing=1000)
avmvn_ou = mvAVMVN(weight=10, waitBeforeLearning=500, waitBeforeUsing=1000)

##########################
# Specify the tree model #
##########################

tree <- T
root_age <- tree.rootAge()

########################################
# Specify the discrete-character model #
########################################

# make the Q matrix

for (i in 1:total_num_states) {
  for (j in 1:total_num_states) {
    rates[i][j] <- 0.0
  }
}

rates[1][2] ~ dnExp( root_age / 10 )
rates[1][4] ~ dnExp( root_age / 10 )
rates[2][1] ~ dnExp( root_age / 10 )
rates[2][3] ~ dnExp( root_age / 10 )
rates[2][5] ~ dnExp( root_age / 10 )
rates[3][2] ~ dnExp( root_age / 10 )
rates[3][6] ~ dnExp( root_age / 10 )
rates[4][1] ~ dnExp( root_age / 10 )
rates[4][5] ~ dnExp( root_age / 10 )
rates[5][2] ~ dnExp( root_age / 10 )
rates[5][4] ~ dnExp( root_age / 10 )
rates[5][6] ~ dnExp( root_age / 10 )
rates[6][3] ~ dnExp( root_age / 10 )
rates[6][5] ~ dnExp( root_age / 10 )

moves.append( mvScale( rates[1][2], weight=1.0 ) )
moves.append( mvScale( rates[1][4], weight=1.0 ) )
moves.append( mvScale( rates[2][1], weight=1.0 ) )
moves.append( mvScale( rates[2][3], weight=1.0 ) )
moves.append( mvScale( rates[2][5], weight=1.0 ) )
moves.append( mvScale( rates[3][2], weight=1.0 ) )
moves.append( mvScale( rates[3][6], weight=1.0 ) )
moves.append( mvScale( rates[4][1], weight=1.0 ) )
moves.append( mvScale( rates[4][5], weight=1.0 ) )
moves.append( mvScale( rates[5][2], weight=1.0 ) )
moves.append( mvScale( rates[5][4], weight=1.0 ) )
moves.append( mvScale( rates[5][6], weight=1.0 ) )
moves.append( mvScale( rates[6][3], weight=1.0 ) )
moves.append( mvScale( rates[6][5], weight=1.0 ) )

avmvn_rates.addVariable( rates[1][2] )
avmvn_rates.addVariable( rates[1][4] )
avmvn_rates.addVariable( rates[2][1] )
avmvn_rates.addVariable( rates[2][3] )
avmvn_rates.addVariable( rates[2][5] )
avmvn_rates.addVariable( rates[3][2] )
avmvn_rates.addVariable( rates[3][6] )
avmvn_rates.addVariable( rates[4][1] )
avmvn_rates.addVariable( rates[4][5] )
avmvn_rates.addVariable( rates[5][2] )
avmvn_rates.addVariable( rates[5][4] )
avmvn_rates.addVariable( rates[5][6] )
avmvn_rates.addVariable( rates[6][3] )
avmvn_rates.addVariable( rates[6][5] )

Q := fnFreeK(rates, rescaled=TRUE)

lambda ~ dnLognormal(ln(0.01), 0.4) # should check lambda with aug model alone
moves.append( mvScale(lambda, weight=2.0) )
avmvn_rates.addVariable( lambda )

moves.append( avmvn_rates )

X ~ dnPhyloCTMCDASiteIID(tree, Q, branchRates=lambda, type="NaturalNumbers", nSites=1)
X.clamp(disc_exp)

# include proposals for the discrete character history
moves.append( mvCharacterHistory(ctmc=X, qmap_site=Q, graph="tip",    proposal="rejection", weight=100.0) )
moves.append( mvCharacterHistory(ctmc=X, qmap_site=Q, graph="node",   proposal="rejection", weight=200.0) )
moves.append( mvCharacterHistory(ctmc=X, qmap_site=Q, graph="branch", proposal="rejection", weight=200.0) )

# keep track of the number of transitions
for(i in 1:nbranches) {
    num_changes[i] := sum(X.numCharacterChanges(i))
}
total_num_changes := sum(num_changes)

char_hist := X.characterHistories()

##############################
# continuous character model #
##############################

# herbivores
theta[1] ~ dnSoftBoundUniformNormal(-6.4, 12, 1, 0.95)
moves.append(mvSlide(theta[1], weight = 1.0) )
avmvn_ou.addVariable(theta[1])

halflife[1] ~ dnLognormal(4.3613845, 1.044495)
moves.append(mvScale(halflife[1], weight = 1.0) )
avmvn_ou.addVariable(halflife[1])
alpha[1] := abs(ln(2)/halflife[1])

stv[1] ~ dnLognormal(ln(13), 0.587405)
moves.append(mvScale(stv[1], weight = 1.0) )
avmvn_ou.addVariable(stv[1])
sigma2[1] := stv[1] * 2 * alpha[1]

# herbivores (dummy state)
theta[4]    := theta[1]   
halflife[4] := halflife[1]
alpha[4] := abs(ln(2)/halflife[4])
stv[4]      := stv[1]     
sigma2[4] := stv[4] * 2 * alpha[4]

# omnivores (hidden state 0)
theta[2] ~ dnNormal(theta[1], 4)
moves.append(mvSlide(theta[2], weight = 1.0) )
avmvn_ou.addVariable(theta[2])

halflife[2] ~ dnLognormal(halflife[1], 1.044495)
moves.append(mvScale(halflife[2], weight = 1.0) )
avmvn_ou.addVariable(halflife[2])
alpha[2] := abs(ln(2)/halflife[2])

stv[2] ~ dnLognormal(stv[1], 0.587405)
moves.append(mvScale(stv[2], weight = 1.0) )
avmvn_ou.addVariable(stv[2])
sigma2[2] := stv[2] * 2 * alpha[2]

# omnivores (hidden state 1)
dtheta ~ dnLognormal(1, abs(ln(2)))
moves.append(mvSlide(dtheta, weight = 1.0) )
avmvn_ou.addVariable(dtheta)
theta[5] := theta[2] - dtheta

halflife[5] := halflife[2]
alpha[5] := abs(ln(2)/halflife[5])

stv[5] := stv[2]
sigma2[5] := stv[5] * 2 * alpha[5]


# carnivores
theta[3] ~ dnNormal(theta[2], 4)
moves.append(mvSlide(theta[3], weight = 1.0) )
avmvn_ou.addVariable(theta[3])

halflife[3] ~ dnLognormal(halflife[2], 1.044495)
moves.append(mvScale(halflife[3], weight = 1.0) )
avmvn_ou.addVariable(halflife[3])
alpha[3] := abs(ln(2)/halflife[3])

stv[3] ~ dnLognormal(stv[2], 0.587405)
moves.append(mvScale(stv[3], weight = 1.0) )
avmvn_ou.addVariable(stv[3])
sigma2[3] := stv[3] * 2 * alpha[3]

# carnivores (dummy state)
theta[6]    := theta[3]   
halflife[6] := halflife[3]
alpha[6]    := abs(ln(2)/halflife[6])
stv[6]      := stv[3]
sigma2[6]   := stv[6] * 2 * alpha[6]

moves.append( avmvn_ou )

##########################
# Specify the OU process #
##########################

Y ~ dnPhyloOUSD(char_hist, theta=theta, rootTreatment="optimum", alpha=alpha, sigma=sigma2^0.5)
Y.clamp(cont)

#############
# The Model #
#############

mymodel = model(Y)

monitors.append( mnModel(filename="output/3_empirical/sdOU_r500_hiddenStateModel/trace_run_" + RUN_INDEX + ".log", printgen=10) )
monitors.append( mnScreen(printgen=1000) )
monitors.append( mnFile( char_hist, filename="output/3_empirical/sdOU_r500_hiddenStateModel/augch_run_" + RUN_INDEX + ".trees", printgen=100 ) )


################
# The Analysis #
################

### workspace mcmc ###
mymcmc = mcmc(mymodel, monitors, moves, nruns=1, combine="none")


### run the MCMC ###
mymcmc.burnin(generations=5000, tuningInterval=100) # comment out after first run

#mymcmc.initializeFromCheckpoint("output/3_empirical/sdOU_r500_hiddenStateModel/run_" + RUN_INDEX + ".state") #comment this out for the first run
mymcmc.run(generations=50000, tuningInterval=200, checkpointInterval=50, checkpointFile="output/3_empirical/sdOU_r500_hiddenStateModel/run_" + RUN_INDEX + ".state")
mymcmc.operatorSummary()

## quit ##
q()