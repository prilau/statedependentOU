################################################################################
#
# RevBayes Example: Testing hidden rates for state-dependent OU model
#
# authors: Priscilla Lau
#
################################################################################

#######################
# Reading in the Data #
#######################

### Select the character to analyze
characterDisc <- 1

### Read in the tree
T <- readTrees("data/3_empirical/mammal_perMY_r500.tre")[1]
ntips <- T.ntips()
nbranches <- 2 * ntips - 2

disc <- readDiscreteCharacterData("data/3_empirical/mammal_diet4_r500_Discrete.nex")

disc.excludeAll()
disc.includeCharacter(characterDisc)
num_disc_states <- disc.getStateDescriptions().size()

# Create some vector for the moves and monitors of this analysis
moves    = VectorMoves()
monitors = VectorMonitors()
avmvn_move = mvAVMVN(weight=10, waitBeforeLearning=500, waitBeforeUsing=1000)

##########################
# Specify the tree model #
##########################

tree <- T
root_age <- tree.rootAge()

########################################
# Specify the discrete-character model #
########################################

# make the Q matrix

rate_12 ~ dnExp( root_age / 10)
rate_21 ~ dnExp( root_age / 10)
rate_13 ~ dnExp( root_age / 10)
rate_31 ~ dnExp( root_age / 10)
rate_14 ~ dnExp( root_age / 10)
rate_41 ~ dnExp( root_age / 10)
rate_23 ~ dnExp( root_age / 10)
rate_32 ~ dnExp( root_age / 10)
rate_24 ~ dnExp( root_age / 10)
rate_42 ~ dnExp( root_age / 10)
rate_34 ~ dnExp( root_age / 10)
rate_43 ~ dnExp( root_age / 10)

moves.append( mvScale(rate_12, weight=1.0) )
moves.append( mvScale(rate_21, weight=1.0) )
moves.append( mvScale(rate_13, weight=1.0) )
moves.append( mvScale(rate_31, weight=1.0) )
moves.append( mvScale(rate_14, weight=1.0) )
moves.append( mvScale(rate_41, weight=1.0) )
moves.append( mvScale(rate_23, weight=1.0) )
moves.append( mvScale(rate_32, weight=1.0) )
moves.append( mvScale(rate_24, weight=1.0) )
moves.append( mvScale(rate_42, weight=1.0) )
moves.append( mvScale(rate_34, weight=1.0) )
moves.append( mvScale(rate_43, weight=1.0) )

avmvn_rate_12 = mvAVMVN(weight=2, waitBeforeLearning=500, waitBeforeUsing=1000)
avmvn_rate_21 = mvAVMVN(weight=2, waitBeforeLearning=500, waitBeforeUsing=1000)
avmvn_rate_13 = mvAVMVN(weight=2, waitBeforeLearning=500, waitBeforeUsing=1000)
avmvn_rate_31 = mvAVMVN(weight=2, waitBeforeLearning=500, waitBeforeUsing=1000)
avmvn_rate_14 = mvAVMVN(weight=2, waitBeforeLearning=500, waitBeforeUsing=1000)
avmvn_rate_41 = mvAVMVN(weight=2, waitBeforeLearning=500, waitBeforeUsing=1000)
avmvn_rate_23 = mvAVMVN(weight=2, waitBeforeLearning=500, waitBeforeUsing=1000)
avmvn_rate_32 = mvAVMVN(weight=2, waitBeforeLearning=500, waitBeforeUsing=1000)
avmvn_rate_24 = mvAVMVN(weight=2, waitBeforeLearning=500, waitBeforeUsing=1000)
avmvn_rate_42 = mvAVMVN(weight=2, waitBeforeLearning=500, waitBeforeUsing=1000)
avmvn_rate_34 = mvAVMVN(weight=2, waitBeforeLearning=500, waitBeforeUsing=1000)
avmvn_rate_43 = mvAVMVN(weight=2, waitBeforeLearning=500, waitBeforeUsing=1000)

avmvn_rate_12.addVariable(rate_12)
avmvn_rate_21.addVariable(rate_21)
avmvn_rate_13.addVariable(rate_13)
avmvn_rate_31.addVariable(rate_31)
avmvn_rate_14.addVariable(rate_14)
avmvn_rate_41.addVariable(rate_41)
avmvn_rate_23.addVariable(rate_23)
avmvn_rate_32.addVariable(rate_32)
avmvn_rate_24.addVariable(rate_24)
avmvn_rate_42.addVariable(rate_42)
avmvn_rate_34.addVariable(rate_34)
avmvn_rate_43.addVariable(rate_43)

moves.append( avmvn_rate_12 )
moves.append( avmvn_rate_21 )
moves.append( avmvn_rate_13 )
moves.append( avmvn_rate_31 )
moves.append( avmvn_rate_14 )
moves.append( avmvn_rate_41 )
moves.append( avmvn_rate_23 )
moves.append( avmvn_rate_32 )
moves.append( avmvn_rate_24 )
moves.append( avmvn_rate_42 )
moves.append( avmvn_rate_34 )
moves.append( avmvn_rate_43 )


rates := [rate_12, rate_13, rate_14, rate_21, rate_23, rate_24, rate_31, rate_32, rate_34, rate_41, rate_42, rate_43]
Q := fnFreeK(rates, rescaled=TRUE)

lambda ~ dnLognormal(ln(0.01), 0.4) # should check lambda with aug model alone
moves.append( mvScale(lambda, weight=1.0) )
avmvn_lambda = mvAVMVN(weight=2, waitBeforeLearning=500, waitBeforeUsing=1000)
avmvn_move.addVariable( avmvn_lambda )
moves.append( avmvn_lambda )
X ~ dnPhyloCTMCDASiteIID(tree, Q, branchRates=lambda, type="Standard", nSites=1)
X.clamp(disc)

# include proposals for the discrete character history
moves.append( mvCharacterHistory(ctmc=X, qmap_site=Q, graph="tip",    proposal="rejection", weight=50.0) )
moves.append( mvCharacterHistory(ctmc=X, qmap_site=Q, graph="node",   proposal="rejection", weight=200.0) )
moves.append( mvCharacterHistory(ctmc=X, qmap_site=Q, graph="branch", proposal="rejection", weight=200.0) )

# keep track of the number of transitions
for(i in 1:nbranches) {
    num_changes[i] := sum(X.numCharacterChanges(i))
}
total_num_changes := sum(num_changes)

char_hist := X.characterHistories()


#############
# The Model #
#############

mymodel = model(X)

monitors.append( mnModel(filename="output/3_empirical/aug_r500_4StateModel/run_" + RUN_INDEX + ".log", printgen=10) )
monitors.append( mnScreen(printgen=1000) )
monitors.append( mnFile( char_hist, filename="output/3_empirical/aug_r500_4StateModel/run_" + RUN_INDEX + ".trees", printgen=100 ) )


################
# The Analysis #
################

### workspace mcmc ###
mymcmc = mcmc(mymodel, monitors, moves, nruns=1, combine="none")


### run the MCMC ###
mymcmc.burnin(generations=5000, tuningInterval=100) # comment out after first run

#mymcmc.initializeFromCheckpoint("output/3_empirical/aug_r500_4StateModel/run_" + RUN_INDEX + ".state") #comment this out for the first run
mymcmc.run(generations=15000, tuningInterval=200, checkpointInterval=50, checkpointFile="output/3_empirical/aug_r500_4StateModel/run_" + RUN_INDEX + ".state")
mymcmc.operatorSummary()

## quit ##
q()
