###############################################
# RevBayes Example: Testing alogirithm speed
#
#
# authors: Priscilla Lau
#
################################################

#######################
# Reading in the Data #
#######################

### Read in the tree
num_tips <- ["100", "200", "500", "1000", "5000", "10000", "1e+05"]

alpha[1] <- abs(1.0)
alpha[2] <- abs(0.1)
sigma2[1] <- abs(4.0)
sigma2[2] <- abs(8.0)
theta[1] <- 5.0
theta[2] <- -5.0

it <- 0
k <- 1
for (j in num_tips){
  character <- 1
  cont <- readContinuousCharacterData("data/2_simulation/algorithm_speed/n" + j + "/Continuous.nex")
  cont.excludeAll()
  cont.includeCharacter(character)
  for (i in 1:10) {
    char_hist[i] = readCharacterHistory("data/2_simulation/algorithm_speed/n" + j + "/t" + i + "_simmap.tre")[1]
  }

  Y1 ~ dnPhyloOUSD(char_hist[1], theta=theta, rootTreatment="optimum", alpha=alpha, sigma=sigma2^0.5)
  Y1.clamp(cont)
  Y2 ~ dnPhyloOUSD(char_hist[2], theta=theta, rootTreatment="optimum", alpha=alpha, sigma=sigma2^0.5)
  Y2.clamp(cont)
  Y3 ~ dnPhyloOUSD(char_hist[3], theta=theta, rootTreatment="optimum", alpha=alpha, sigma=sigma2^0.5)
  Y3.clamp(cont)
  Y4 ~ dnPhyloOUSD(char_hist[4], theta=theta, rootTreatment="optimum", alpha=alpha, sigma=sigma2^0.5)
  Y4.clamp(cont)
  Y5 ~ dnPhyloOUSD(char_hist[5], theta=theta, rootTreatment="optimum", alpha=alpha, sigma=sigma2^0.5)
  Y5.clamp(cont)
  Y6 ~ dnPhyloOUSD(char_hist[6], theta=theta, rootTreatment="optimum", alpha=alpha, sigma=sigma2^0.5)
  Y6.clamp(cont)
  Y7 ~ dnPhyloOUSD(char_hist[7], theta=theta, rootTreatment="optimum", alpha=alpha, sigma=sigma2^0.5)
  Y7.clamp(cont)
  Y8 ~ dnPhyloOUSD(char_hist[8], theta=theta, rootTreatment="optimum", alpha=alpha, sigma=sigma2^0.5)
  Y8.clamp(cont)
  Y9 ~ dnPhyloOUSD(char_hist[9], theta=theta, rootTreatment="optimum", alpha=alpha, sigma=sigma2^0.5)
  Y9.clamp(cont)
  Y10 ~ dnPhyloOUSD(char_hist[10], theta=theta, rootTreatment="optimum", alpha=alpha, sigma=sigma2^0.5)
  Y10.clamp(cont)
  
  time[1] <- time("milliseconds")
  p[it+1] <- Y1.lnProbability()
  time[2] <- time("milliseconds")
  p[it+2] <- Y2.lnProbability()
  time[3] <- time("milliseconds")  
  p[it+3] <- Y3.lnProbability()
  time[4] <- time("milliseconds")
  p[it+4] <- Y4.lnProbability()
  time[5] <- time("milliseconds")
  p[it+5] <- Y5.lnProbability()
  time[6] <- time("milliseconds")
  p[it+6] <- Y6.lnProbability()
  time[7] <- time("milliseconds")
  p[it+7] <- Y7.lnProbability()
  time[8] <- time("milliseconds")
  p[it+8] <- Y8.lnProbability()
  time[9] <- time("milliseconds")
  p[it+9] <- Y9.lnProbability()
  time[10] <- time("milliseconds")
  p[it+10] <- Y10.lnProbability()
  time[11] <- time("milliseconds")

  total_time[k] <- time[11] - time[1]
  
  for (i in 1:10) {
    per_rep_time[it+1] <- time[i+1] - time[i]
  }

  it += 10
  k +=1
}

write(total_time, filename="output/2_simulation/algorithm_speed/rb_total_time.txt", separator=",")
write(per_rep_time, filename="output/2_simulation/algorithm_speed/rb_per_rep_time.txt", separator=",")
write(p, filename="output/2_simulation/algorithm_speed/rb_lik.txt", separator=",")


## quit ##
q()




#1alhalflives x scale by tree height