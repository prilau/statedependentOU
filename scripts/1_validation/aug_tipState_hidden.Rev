################################################################################
#
# RevBayes Example: Testing hidden rates for state-dependent OU model
#
# authors: Priscilla Lau
#
################################################################################

#######################
# Reading in the Data #
#######################

### Select the character to analyze
characterDisc <- 1

### Read in the tree
T <- readTrees("data/1_validation/dummy/dummy_r6.tre")[1]
ntips <- T.ntips()
nbranches <- 2 * ntips - 2

disc <- readDiscreteCharacterData("data/1_validation/dummy/dummy_r6_tipState_hidden_Discrete.nex")
num_disc_states <- disc.getStateDescriptions().size()

num_hidden_states <- 2
disc_exp <- disc.expandCharacters( num_hidden_states )
disc_exp.excludeAll()
disc_exp.includeCharacter(characterDisc)

# Create some vector for the moves and monitors of this analysis
moves    = VectorMoves()
monitors = VectorMonitors()

##########################
# Specify the tree model #
##########################

tree <- T
root_age <- tree.rootAge()

########################################
# Specify the discrete-character model #
########################################

# make the Q matrix
for (i in 1:4) {
  for (j in 1:4) {
    rates[i][j] <- 0.0
  }
}

rates[1][2] = 1
rates[1][3] = 1
rates[2][1] = 1
rates[2][4] = 1
rates[3][1] = 1
rates[3][4] = 1
rates[4][2] = 1
rates[4][3] = 1

Q := fnFreeK(rates, rescaled=TRUE)

lambda ~ dnLognormal(ln(1), 0.4)
moves.append( mvScale(lambda, weight=1.0) )

# make the data-augmented CTCM model
X ~ dnPhyloCTMCDASiteIID(tree, Q, branchRates=lambda, type="NaturalNumbers", nSites=1)
X.clamp(disc_exp)

# include proposals for the discrete character history
moves.append( mvCharacterHistory(ctmc=X, qmap_site=Q, graph="tip",    proposal="rejection", weight=10.0) )
moves.append( mvCharacterHistory(ctmc=X, qmap_site=Q, graph="node",   proposal="rejection", weight=10.0) )
moves.append( mvCharacterHistory(ctmc=X, qmap_site=Q, graph="branch", proposal="rejection", weight=10.0) )

# keep track of the number of transitions
for(i in 1:nbranches) {
    num_changes[i] := sum(X.numCharacterChanges(i))
}
total_num_changes := sum(num_changes)

char_hist := X.characterHistories()

#############
# The Model #
#############

mymodel = model(X)

monitors.append( mnFile( char_hist, filename="output/1_validation/aug_tipState_hidden/run_" + RUN_INDEX + ".trees", printgen=10 ) )




################
# The Analysis #
################

### workspace mcmc ###
mymcmc = mcmc(mymodel, monitors, moves, nruns=1, combine="none")


### run the MCMC ###
mymcmc.burnin(generations=1000, tuningInterval=100)
mymcmc.run(generations= 10000, tuningInterval=200)

## quit ##
q()
