################################################################################
#
# RevBayes Validation Test: Ornstein-Uhlenbeck on a fixed tree
#
# Model: Continuous character(s) evolve under Ornstein-Uhlenbeck model.
#
#
# authors: Sebastian Hoehna
#
################################################################################

## Global settings

NUM_VALIDATION_REPLICATES = 1000
NUM_MCMC_ITERATIONS       = 50000


# create the monitor and moves vectors
moves     = VectorMoves()
monitors  = VectorMonitors()
avmvn_ou = mvAVMVN(weight=20, waitBeforeLearning=500, waitBeforeUsing=1000)

#######################
# Reading in the Data #
#######################
characterCont <- 1
characterDisc <- 1

cont <- readContinuousCharacterData("data/1_validation/mammal/mammal_r50_Continuous.nex")
cont.excludeAll()
cont.includeCharacter(characterCont)

disc <- readDiscreteCharacterData("data/1_validation/mammal/mammal_r50_binary_Discrete.nex")
num_disc_states <- disc.getStateDescriptions().size()
disc.excludeAll()
disc.includeCharacter(characterDisc)


# Get some useful variables from the data. We need these later on.
taxa <- cont.taxa()

##############
# Tree model #
##############

charHist <- readCharacterHistory( "data/1_validation/mammal/mammal_r50_simmap.tre" )[1]


#######################
# OU-Model Parameters #
#######################

for (i in 1:num_disc_states){
  theta[i] ~ dnUniform(-10, 15)
  moves.append(mvSlide(theta[i], weight = 1.0) )
  avmvn_ou.addVariable(theta[i])

  alpha[i] ~ dnLognormal(1/(2*ln(2)) , 0.587405)
  moves.append(mvScale(alpha[i], weight = 1.0) )
  avmvn_ou.addVariable(alpha[i])

  sigma2[i] ~ dnLogUniform(1e-10, 1)
  moves.append(mvScale(sigma2[i], weight = 1.0) )
  avmvn_ou.addVariable(sigma2[i])

}

moves.append( avmvn_ou )

###################
# PhyloCTMC Model #
###################

Y ~ dnPhyloOUSD(characterHistory=charHist, alpha=alpha, theta=theta, sigma=sigma2^0.5, rootTreatment="optimum", nSites=1)

# attach the data
Y.clamp(cont)



#############
# THE Model #
#############

# We define our model.
# We can use any node of our model as a handle
mymodel = model(Y)


mymcmc = mcmc(mymodel, monitors, moves)

validation = validationAnalysis( mymcmc, NUM_VALIDATION_REPLICATES, directory="output/1_validation/sdOU_rootState_fixedHistory" )
validation.burnin(generations=0.1*NUM_MCMC_ITERATIONS,tuningInterval=100)
validation.run(generations=NUM_MCMC_ITERATIONS)
validation.summarize(coverageProbability=0.9)
validation.summarize(coverageProbability=0.5)



# you may want to quit RevBayes now
q()