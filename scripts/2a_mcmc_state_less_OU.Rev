################################################################################
#
# RevBayes Example: Bayesian inference of rates of evolution under a
#                   state-dependent Brownian-motion model
#
#
# authors: Sebastian Hoehna
#
################################################################################

#######################
# Reading in the Data #
#######################

### Select the character to analyze
characterCont <- 1

### Read in the tree
T <- readTrees("data/4_empirical/haemulidae_Tree.tre")[1]
ntips <- T.ntips()
nbranches <- 2 * ntips - 2

### Read in the continuous-character data
cont <- readContinuousCharacterData("data/4_empirical/haemulidae_Continuous.nex")
cont.excludeAll()
cont.includeCharacter(characterCont)

# Create some vector for the moves and monitors of this analysis
moves    = VectorMoves()
monitors = VectorMonitors()

##########################
# Specify the tree model #
##########################

tree <- T
root_age <- tree.rootAge()



##########################
# Specify the rate model #
##########################

sigma2 ~ dnLoguniform(1e-3, 1)
theta ~ dnUniform(-10, 10)
alpha ~ dnExponential( abs(root_age / 2.0 / ln(2.0)) )
halflife := ln(2) / alpha

moves.append(mvScale(sigma2, weight = 1.0) )
moves.append(mvScale(alpha, weight = 1.0) )
moves.append(mvSlide(theta, weight = 1.0) )



##########################
# Specify the OU process #
##########################
root_state = 0
Y ~ dnPhyloOrnsteinUhlenbeckREML(tree, sigma=sigma2^0.5, alpha=alpha, theta=theta, rootStates=theta)
Y.clamp(cont)

#############
# The Model #
#############

mymodel = model(Y)

### set up the monitors that will output parameter values to file and screen
monitors.append( mnModel(filename="output/state_less_OU/state_less_OU.log", printgen=10) )
monitors.append( mnScreen(printgen=1000, sigma2) )


################
# The Analysis #
################

### workspace mcmc ###
mymcmc = mcmc(mymodel, monitors, moves, nruns=2, combine="none")


### run the MCMC ###
mymcmc.burnin(generations=5000, tuningInterval=100)
mymcmc.run(generations=100000)



## quit ##
q()
