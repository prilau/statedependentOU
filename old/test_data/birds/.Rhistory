library(cowplot)
library(tidyr)
library(dplyr)
library(knitr)
library(jpeg)
library(patchwork)
library(leaflet)
library(tidyverse)
library(readr)
library(broom)
library(car)
library(Hmisc)
library(ggimage)
library(png)
knitr::opts_chunk$set(echo=T,
eval=T,
message = F,
warning=F,
error = F,
cache = F,
tidy = T,
size="footnotesize",
fig.pos='H',
results='hide',
fig.lp='fig:',
fig.align = 'center',
fig.path='figures/example-',
cache.path = 'cache/example-',
tidy.opts=list(width.cutoff=60)
)
players <- read_csv("mlb-player-stats-Batters.csv")
hit <- read_csv("exit_velocity.csv")
comb <- hit %>% mutate(Player = paste0(first_name, " ", last_name)) %>%
inner_join(players, by = "Player")
colnames(comb)
trim <- comb[, -c(1:4, 7, 9:11, 13:18, 20, 22:23, 25, 30:33, 37, 39:41)] %>%
mutate(p_longhit = (`2B`+`3B`+HR)/H,
SF_1000 = 1000*SF/AB)
trim$pos_group <- ifelse(trim$Pos %in% c("1B", "2B", "3B", "SS"), "IF", trim$Pos)
trim <- trim %>%
select(-c(H, `2B`, `3B`, HR, SF, avg_distance)) %>%
select(4, 1:3, 5:12)
group.colors <- c(IF = "#a98467", OF = "#226f54", C ="#da2c38", DH = "#f4f0bb")
level_order <- c('C', '1B', '2B', '3B', 'SS', 'OF', 'DH')
pic <- readJPEG("baseball.jpg", native = T)
p1 <- trim %>%
group_by(pos_group) %>%
ggplot(aes(y = AVG,
x = factor(Pos, level = level_order),
fill = pos_group)) +
geom_boxplot() +
ylab("Batting average") +
xlab("Position") +
ggtitle("Batting average by position") +
scale_fill_manual(values=group.colors) +
theme(axis.text = element_text(size = 10),
legend.position = "none",
plot.title = element_text(hjust = 0.5)) +
inset_element(pic,
left = 0.8,
bottom = 0.6,
right = 1,
top = 1)
library(ggarrange)
mod.1c <- lm(AVG ~ avg_hit_angle + anglesweetspotpercent + avg_hit_speed, trim)
mod.1b <- lm(AVG ~ avg_hit_angle + anglesweetspotpercent , trim)
mod.1a <- lm(AVG ~ avg_hit_angle, trim)
anova(mod.1a, mod.1b, mod.1c)
mod.2c <- lm(AVG ~ avg_hit_speed + avg_hit_angle + anglesweetspotpercent, trim)
mod.2b <- lm(AVG ~ avg_hit_speed + avg_hit_angle , trim)
mod.2a <- lm(AVG ~ avg_hit_speed, trim)
anova(mod.2a, mod.2b, mod.2c)
mod.3c <- lm(AVG ~ anglesweetspotpercent + avg_hit_speed + avg_hit_angle, trim)
mod.3b <- lm(AVG ~ anglesweetspotpercent + avg_hit_speed , trim)
mod.3a <- lm(AVG ~ anglesweetspotpercent, trim)
anova(mod.3a, mod.3b, mod.3c)
mod <- lm(AVG ~ avg_hit_angle + anglesweetspotpercent,
data = trim )
mod <- lm(AVG ~ avg_hit_angle + anglesweetspotpercent,
data = trim )
#layout(matrix(1:4, 2, 2))
#par(mfrow=c(2,2))
pdf(file = "plot2.pdf", width = 8, height = 6)
plot(mod)
step(mod)
vif(mod)
attr <- sort(c("AVG", "avg_hit_angle", "anglesweetspotpercent", "avg_hit_speed", "SO", "p_longhit", "SF_1000", "AB"))
df <- trim[, attr] %>%
as.matrix() %>%
rcorr(type = "spearman") %>%
tidy()
dummy <- data.frame(column1 = attr,
column2 = attr,
estimate = NA,
p.value = NA)
df2 <- df %>%
dplyr::select(-n) %>%
bind_rows(dummy)
attr_labels <- c("Strikeout", "Sacrifice Fly", "% Long Hit", "Average Exit Velocity", "Average Hit Angle", "Batting Average", "% Sweet Spot", "At-bat")
p <- df2 %>%
ggplot(aes(x = column1,
y = column2)) +
geom_tile(aes(fill = estimate)) +
theme_minimal() +
geom_text(aes(label = round(estimate, digits = 2), family = "mono")) +
theme(axis.title = element_blank(),
panel.background = element_blank(),
axis.text = element_text(size = 10,
colour = "#432818",
family = "mono"),
axis.text.x = element_text(angle = 40, hjust=1),
legend.position = "right",
legend.text = element_text(family = "mono"),
axis.ticks = element_blank()) +
scale_fill_gradient2(low = "#fd9e02",
mid = "white",
high = muted("#75b6c6"),
midpoint = 0,
space = "Lab",
na.value = "transparent",
guide = "colourbar",
aesthetics = "fill",
limits=c(-0.5, 0.5),
name = "") +
scale_x_discrete(labels = attr_labels) +
scale_y_discrete(labels = attr_labels)
library(scales)
mod.1c <- lm(AVG ~ avg_hit_angle + anglesweetspotpercent + avg_hit_speed, trim)
mod.1b <- lm(AVG ~ avg_hit_angle + anglesweetspotpercent , trim)
mod.1a <- lm(AVG ~ avg_hit_angle, trim)
anova(mod.1a, mod.1b, mod.1c)
mod.2c <- lm(AVG ~ avg_hit_speed + avg_hit_angle + anglesweetspotpercent, trim)
mod.2b <- lm(AVG ~ avg_hit_speed + avg_hit_angle , trim)
mod.2a <- lm(AVG ~ avg_hit_speed, trim)
anova(mod.2a, mod.2b, mod.2c)
mod.3c <- lm(AVG ~ anglesweetspotpercent + avg_hit_speed + avg_hit_angle, trim)
mod.3b <- lm(AVG ~ anglesweetspotpercent + avg_hit_speed , trim)
mod.3a <- lm(AVG ~ anglesweetspotpercent, trim)
anova(mod.3a, mod.3b, mod.3c)
mod <- lm(AVG ~ avg_hit_angle + anglesweetspotpercent,
data = trim )
mod <- lm(AVG ~ avg_hit_angle + anglesweetspotpercent,
data = trim )
#layout(matrix(1:4, 2, 2))
#par(mfrow=c(2,2))
pdf(file = "plot2.pdf", width = 8, height = 6)
plot(mod)
step(mod)
vif(mod)
attr <- sort(c("AVG", "avg_hit_angle", "anglesweetspotpercent", "avg_hit_speed", "SO", "p_longhit", "SF_1000", "AB"))
df <- trim[, attr] %>%
as.matrix() %>%
rcorr(type = "spearman") %>%
tidy()
dummy <- data.frame(column1 = attr,
column2 = attr,
estimate = NA,
p.value = NA)
df2 <- df %>%
dplyr::select(-n) %>%
bind_rows(dummy)
attr_labels <- c("Strikeout", "Sacrifice Fly", "% Long Hit", "Average Exit Velocity", "Average Hit Angle", "Batting Average", "% Sweet Spot", "At-bat")
p <- df2 %>%
ggplot(aes(x = column1,
y = column2)) +
geom_tile(aes(fill = estimate)) +
theme_minimal() +
geom_text(aes(label = round(estimate, digits = 2), family = "mono")) +
theme(axis.title = element_blank(),
panel.background = element_blank(),
axis.text = element_text(size = 10,
colour = "#432818",
family = "mono"),
axis.text.x = element_text(angle = 40, hjust=1),
legend.position = "right",
legend.text = element_text(family = "mono"),
axis.ticks = element_blank()) +
scale_fill_gradient2(low = "#fd9e02",
mid = "white",
high = muted("#75b6c6"),
midpoint = 0,
space = "Lab",
na.value = "transparent",
guide = "colourbar",
aesthetics = "fill",
limits=c(-0.5, 0.5),
name = "") +
scale_x_discrete(labels = attr_labels) +
scale_y_discrete(labels = attr_labels)
p
ggsave(filename = "plot2.pdf", device = "pdf",
width = 20, height = 12, units = "cm")
library(patchwork)
mlb <- ((p1/p)) + plot_annotation(tag_levels = "A") + plot_layout(nrow = 2)
ggsave("mlb2.pdf", mlb, device = "pdf")
mlb <- ((p1/p)) + plot_layout(nrow = 2)
ggsave("mlb2.pdf", mlb, device = "pdf")
setwd("Desktop/ASSIM/lab_hoehna/test_data/birds/")
discreteTrait <- read_csv("./bird_brain.csv")
contTrait <- read_csv("./Jess_skel_methods.csv")
library(ape)
library(tidyverse)
discreteTrait <- read_csv("./bird_brain.csv")
contTrait <- read_csv("./Jess_skel_methods.csv")
View(discreteTrait)
discreteTrait <- discreteTrait %>% dplyr::select(2, 4, 5)
contTrait <- contTrait %>%
filter(sex == "M") %>%
mutate(limbRatio = humerus/femur) %>%
drop_na() %>%
dplyr::select(2, 16) %>%
group_by(genus_species) %>%
reframe(meanLimbRatio = mean(limbRatio)) %>%
rename(Species = 'genus_species')
Traits <- discreteTrait %>% inner_join(contTrait) %>%
drop_na()
# Making continuous trait nexus file with R coz RevBayes couldn't read my by-hand version
limbRatio <- list()
for (i in 1:length(Traits$Species)){
limbRatio[[Traits$Species[i]]] <- list(Traits$meanLimbRatio[i])
}
write.nexus.data(limbRatio, "./birdLimbRatio.nex", format = "continuous")
flapper0 <- Traits %>% filter(Flapper == 0)
flapper1 <- Traits %>% filter(Flapper == 1)
hist(flapper1$meanLimbRatio, ylim = c(0, 100), xlim = c(0, 2))
hist(flapper0$meanLimbRatio, add = TRUE, col = "red")
hist(flapper1$meanLimbRatio, ylim = c(0, 100), xlim = c(0, 10))
hist(flapper0$meanLimbRatio, add = TRUE, col = "red")
hist(flapper1$meanLimbRatio, ylim = c(0, 100), xlim = c(0, 6))
hist(flapper0$meanLimbRatio, add = TRUE, col = "red")
migrant0 <- Traits %>% filter(Migrant == 0)
migrant1 <- Traits %>% filter(Migrant == 1)
hist(migrant1$meanLimbRatio, ylim = c(0, 40), xlim = c(0.5, 2))
hist(migrant1$meanLimbRatio, ylim = c(0, 40), xlim = c(0, 6))
hist(migrant1$meanLimbRatio, ylim = c(0, 100), xlim = c(0, 6))
hist(migrant0$meanLimbRatio, add = TRUE, col = "red")
hist(migrant0$meanLimbRatio, ylim = c(0, 100), xlim = c(0, 6))
hist(migrant1$meanLimbRatio, add = TRUE, col = "red")
hist(flapper1$meanLimbRatio, ylim = c(0, 100), xlim = c(0, 6))
hist(flapper0$meanLimbRatio, add = TRUE, col = "red")
var(Traits$meanLimbRatio)
mean(Traits$meanLimbRatio)
min(Traits$meanLimbRatio)
max(Traits$meanLimbRatio)
library(ape)
library(tidyverse)
discreteTrait <- read_csv("./bird_feather_3.csv")
discreteTrait <- read_csv("./bird_feather_3.csv")
contTrait <- read_csv("./bird_feather_1.csv")
View(discreteTrait)
discreteTrait <- discreteTrait %>% dplyr::select(1, 3, 8)
contTrait_p1 <- contTrait %>%
filter(p1_p8 == "p1") %>%
drop_na() %>%
dplyr::select(1:4) %>%
group_by(species) %>%
rename(Species = 'species')
contTrait_p8 <- contTrait %>%
filter(p1_p8 == "p8") %>%
drop_na() %>%
dplyr::select(1:4) %>%
group_by(species) %>%
rename(Species = 'species')
Traits <- discreteTrait %>% inner_join(contTrait_p1) %>%
drop_na()
Traits <- discreteTrait %>% inner_join(contTrait_p1) %>%
drop_na()
discreteTrait <- discreteTrait %>% dplyr::select(1, 3, 8) %>%
for (i in 1:length(discreteTrait)){
m <- strsplit(discreteTrait$Species[i], split = " ")
discreteTrait$Species[i] <- paste0(m[1], "_", m[2])
}
discreteTrait <- discreteTrait %>% dplyr::select(1, 3, 8) %>%
for (i in 1:length(discreteTrait$Species)){
m <- strsplit(discreteTrait$Species[i], split = " ")
discreteTrait$Species[i] <- paste0(m[1], "_", m[2])
}
length(discreteTrait$Species)
i=1
m <- strsplit(discreteTrait$Species[i], split = " ")
View(m)
discreteTrait$Species[i] <- paste0(m[[1]], "_", m[[2]])
discreteTrait$Species[i] <- paste0(m[1][[1]], "_", m[1][[2]])
discreteTrait$Species[i] <- paste0(m[[1]][1], "_", m[[1]][2])
m <- strsplit(discreteTrait$Species[i], split = " ")
discreteTrait$Species[i]
discreteTrait <- read_csv("./bird_feather_3.csv")
discreteTrait <- discreteTrait %>% dplyr::select(1, 3, 8) %>%
for (i in 1:length(discreteTrait$Species)){
m <- strsplit(discreteTrait$Species[i], split = " ")
discreteTrait$Species[i] <- paste0(m[[1]][1], "_", m[[1]][2])
}
discreteTrait <- read_csv("./bird_feather_3.csv")
discreteTrait <- discreteTrait %>% dplyr::select(1, 3, 8) %>%
for (i in 1:length(discreteTrait$Species)){
m <- strsplit(discreteTrait$Species[i], split = " ")
discreteTrait$Species[i] <- paste0(m[[1]][1], "_", m[[1]][2])
}
discreteTrait <- read_csv("./bird_feather_3.csv")
discreteTrait <- discreteTrait %>% dplyr::select(1, 3, 8)
for (i in 1:length(discreteTrait$Species)){
m <- strsplit(discreteTrait$Species[i], split = " ")
discreteTrait$Species[i] <- paste0(m[[1]][1], "_", m[[1]][2])
}
Traits <- discreteTrait %>% inner_join(contTrait_p1) %>%
drop_na()
unique(Traits$Habitat)
habitat0 <- Traits %>% filter(Habitat == "T")
habitat1 <- Traits %>% filter(Habitat == "R")
habitat2 <- Traits %>% filter(Habitat == "A")
hist(habitat0$`Rachis width (mm)`, ylim = c(0, 100), xlim = c(0, 6))
hist(habitat2$`Rachis width (mm)`, add = TRUE, col = "red")
hist(habitat1$`Rachis width (mm)`, add = TRUE, col = "blue")
hist(habitat0$`Rachis width (mm)`, ylim = c(0, 100), xlim = c(0, 6), bin = 0.2)
hist(habitat0$`Rachis width (mm)`, ylim = c(0, 100), xlim = c(0, 6)
hist(habitat0$`Rachis width (mm)`, ylim = c(0, 100), xlim = c(0, 6))
hist(habitat0$`Rachis width (mm)`, ylim = c(0, 100), xlim = c(0, 6))
hist(habitat0$`Rachis width (mm)`, ylim = c(0, 100), xlim = c(0, 10))
hist(habitat0$`Rachis width (mm)`, ylim = c(0, 100), xlim = c(0, 8))
hist(habitat0$`Rachis width (mm)`, ylim = c(0, 50), xlim = c(0, 8))
hist(habitat2$`Rachis width (mm)`, add = TRUE, col = "red")
hist(habitat1$`Rachis width (mm)`, add = TRUE, col = "blue")
hist(habitat0$`Barb bensity (number/cm)`, ylim = c(0, 50), xlim = c(0, 8))
max(habitat0$`Barbule density (number/mm)`)
hist(habitat0$`Barb bensity (number/cm)`, ylim = c(0, 50), xlim = c(0, 50))
hist(habitat2$`Barb bensity (number/cm)`, add = TRUE, col = "red")
hist(habitat1$`Barb bensity (number/cm)`, add = TRUE, col = "blue")
hist(habitat0$`Barbule density (number/mm)`, ylim = c(0, 50), xlim = c(0, 8))
hist(habitat0$`Barbule density (number/mm)`, ylim = c(0, 50), xlim = c(0, 50))
hist(habitat0$`Barbule density (number/mm)`, ylim = c(0, 50), xlim = c(10, 80))
hist(habitat0$`Barbule density (number/mm)`, ylim = c(0, 50), xlim = c(10, 60))
hist(habitat2$`Barbule density (number/mm)`, add = TRUE, col = "red")
hist(habitat1$`Barbule density (number/mm)`, add = TRUE, col = "blue")
hist(habitat0$`Barb bensity (number/cm)`, ylim = c(0, 50), xlim = c(0, 50))
hist(habitat2$`Barb bensity (number/cm)`, add = TRUE, col = "red")
hist(habitat0$`Barb bensity (number/cm)`, ylim = c(0, 50), xlim = c(10, 40))
hist(habitat2$`Barb bensity (number/cm)`, add = TRUE, col = "red")
hist(habitat1$`Barb bensity (number/cm)`, add = TRUE, col = "blue")
hist(habitat0$`Rachis width (mm)`, ylim = c(0, 50), xlim = c(0, 8))
hist(habitat2$`Rachis width (mm)`, add = TRUE, col = "red")
hist(habitat1$`Rachis width (mm)`, add = TRUE, col = "blue")
discreteTrait <- read_csv("./bird_feather_3.csv")
discreteTrait <- discreteTrait %>% dplyr::select(1, 3, 8) %>%
rename(Flight = `Flight type`) %>%
mutate(mixFlight = Flight)
for (i in 1:length(discreteTrait$Flight)){
if (discreteTrait$Flight[i] == "1"){
discreteTrait$Flight[i] <- 1
discreteTrait$mixFlight[i] <- 1
} else if (discreteTrait$Flight[i] == "3") {
discreteTrait$Flight[i] <- 0
discreteTrait$mixFlight[i] <- 0
}
else {
discreteTrait$Flight[i] <- 2
if (discreteTrait$Flight[i] == "2a") {
discreteTrait$mixFlight[i] <- 2
} else if (discreteTrait$Flight[i] == "2b") {
discreteTrait$mixFlight[i] <- 3
} else {
discreteTrait$mixFlight[i] <- 4
}
}
}
discreteTrait <- read_csv("./bird_feather_3.csv")
discreteTrait <- discreteTrait %>% dplyr::select(1, 3, 8) %>%
rename(Flight = `Flight type`) %>%
mutate(mixFlight = Flight)
for (i in 1:length(discreteTrait$Flight)){
if (discreteTrait$Flight[i] == "1"){
discreteTrait$Flight[i] <- 1
discreteTrait$mixFlight[i] <- 1
} else if (discreteTrait$Flight[i] == "3") {
discreteTrait$Flight[i] <- 0
discreteTrait$mixFlight[i] <- 0
}
else {
discreteTrait$Flight[i] <- 2
if (discreteTrait$Flight[i] == "2a"){
discreteTrait$mixFlight[i] <- 2
} else if (discreteTrait$Flight[i] == "2b"){
discreteTrait$mixFlight[i] <- 3
} else if (discreteTrait$Flight[i] == "2c"){
discreteTrait$mixFlight[i] <- 4
}
}
}
discreteTrait <- read_csv("./bird_feather_3.csv")
discreteTrait <- discreteTrait %>% dplyr::select(1, 3, 8) %>%
rename(Flight = `Flight type`) %>%
mutate(mixFlight = Flight)
for (i in 1:length(discreteTrait$Flight)){
if (discreteTrait$Flight[i] == "1"){
discreteTrait$Flight[i] <- 1
discreteTrait$mixFlight[i] <- 1
} else if (discreteTrait$Flight[i] == "3") {
discreteTrait$Flight[i] <- 0
discreteTrait$mixFlight[i] <- 0
}
else {
if (discreteTrait$Flight[i] == "2a"){
discreteTrait$mixFlight[i] <- 2
}
else if (discreteTrait$Flight[i] == "2b"){
discreteTrait$mixFlight[i] <- 3
}
else if (discreteTrait$Flight[i] == "2c"){
discreteTrait$mixFlight[i] <- 4
}
discreteTrait$Flight[i] <- 2
}
}
discreteTrait$Species[i] <- paste0(m[[1]][1], "_", m[[1]][2])
for (i in 1:length(discreteTrait$Species)){
m <- strsplit(discreteTrait$Species[i], split = " ")
discreteTrait$Species[i] <- paste0(m[[1]][1], "_", m[[1]][2])
}
#Making discrete trait nexus file
DiscTrait <- list()
for (i in 1:length(discreteTrait$Species)){
DiscTrait[[discreteTrait$Species[i]]] <- list(discreteTrait$Habitat[i],
discreteTrait$Flight[i],
discreteTrait$mixFlight[i])
}
nex <- read.nexus.data("birdDiscrete_combined.nex")
nex <- read.nexus.data("birdDiscrete.nex")
nex <- read.nexus.data("birdDiscrete.nex")
?read.nexus.data
nex <- read.nexus.data("birdCont.nex", )
nex <- read.nexus.data("birdCont.nex")
View(nex)
#Making discrete trait nexus file
DiscTrait <- list()
for (i in 1:length(discreteTrait$Species)){
DiscTrait[[discreteTrait$Species[i]]] <- list("Habitat",
"Flight",
"mixFlight")
DiscTrait[[discreteTrait$Species[i]]]$Habitat = discreteTrait$Habitat[i]
DiscTrait[[discreteTrait$Species[i]]]$Flight = discreteTrait$Flight[i]
DiscTrait[[discreteTrait$Species[i]]]$mixFlight = discreteTrait$mixFlight[i]
}
write.nexus.data(DiscTrait, "./birdFeatherDiscrete.nex", format = "standard")
unique(Traits$Habitat)
for (i in 1:length(discreteTrait$Habitat)){
if (discreteTrait$Habitat[i] == "T"){
discreteTrait$Habitat[i] <- 0
} else if (discreteTrait$Habitat[i] == "R") {
discreteTrait$Habitat[i] <- 1
}
else {
discreteTrait$Habitat[i] <- 2
}
}
#Making discrete trait nexus file
DiscTrait <- list()
for (i in 1:length(discreteTrait$Species)){
DiscTrait[[discreteTrait$Species[i]]] <- list("Habitat",
"Flight",
"mixFlight")
DiscTrait[[discreteTrait$Species[i]]]$Habitat = discreteTrait$Habitat[i]
DiscTrait[[discreteTrait$Species[i]]]$Flight = discreteTrait$Flight[i]
DiscTrait[[discreteTrait$Species[i]]]$mixFlight = discreteTrait$mixFlight[i]
}
write.nexus.data(DiscTrait, "./birdFeatherDiscrete.nex", format = "standard")
contTrait <- read_csv("./bird_feather_1.csv")
contTrait_p1 <- contTrait %>%
filter(p1_p8 == "p1") %>%
drop_na() %>%
dplyr::select(1:4) %>%
group_by(species) %>%
rename(Species = 'species',
RachisW = `Rachis width (mm)`,
BarbD = `Barb bensity (number/cm)`,
BarbuleD = `Barbule density (number/mm)`)
contTrait_p1[]
contTrait_p1[[]]
contTrait_p1[[1]]
contTrait_p1[[2]]
# Making continuous trait nexus file
contTraitP1 <- list()
for (i in 1:length(contTrait_p1$Species)){
contTraitP1[[contTrait_p1$Species[i]]] <- list("RachisW",
"BarbD",
"BarbuleD")
contTraitP1[[contTrait_p1$Species[i]]]$RachisW = contTrait_p1$RachisW[i]
contTraitP1[[contTrait_p1$Species[i]]]$BarbD = contTrait_p1$BarbD[i]
contTraitP1[[contTrait_p1$Species[i]]]$BarbuleD = contTrait_p1$BarbuleD[i]
}
for (i in 1:length(contTrait_p1$Species)){
contTraitP1[[contTrait_p1$Species[i]]]$RachisW = contTrait_p1$RachisW[i]
contTraitP1[[contTrait_p1$Species[i]]]$BarbD = contTrait_p1$BarbD[i]
contTraitP1[[contTrait_p1$Species[i]]]$BarbuleD = contTrait_p1$BarbuleD[i]
}
# Making continuous trait nexus file
contTraitP1 <- list()
for (i in 1:length(contTrait_p1$Species)){
contTraitP1[[contTrait_p1$Species[i]]]$RachisW = contTrait_p1$RachisW[i]
contTraitP1[[contTrait_p1$Species[i]]]$BarbD = contTrait_p1$BarbD[i]
contTraitP1[[contTrait_p1$Species[i]]]$BarbuleD = contTrait_p1$BarbuleD[i]
}
write.nexus.data(contTrait, "./birdFeatherCont.nex", format = "continuous")
write.nexus.data(contTraitP1, "./birdFeatherCont.nex", format = "continuous")
View(contTrait_p1)
library(ape)
library(tidyverse)
library(RRphylo)
tree <- read.nexus("bird_tree.nex")
prunedTree <- keep.tip(tree, contTrait_p1$Species)
discreteTrait <- read_csv("./bird_feather_3.csv")
discreteTrait$Species
discreteTrait$Species
prunedTree <- keep.tip(tree, contTrait_p1$Species)
